//(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){
//(function webpackUniversalModuleDefinition(root, factory) {
//	if(typeof exports === 'object' && typeof module === 'object')
//		module.exports = factory();
//	else if(typeof define === 'function' && define.amd)
//		define([], factory);
//	else if(typeof exports === 'object')
//		exports["fhir"] = factory();
//	else
//		root["fhir"] = factory();
//})(this, function() {
//return /******/ (function(modules) { // webpackBootstrap
///******/ 	// The module cache
///******/ 	var installedModules = {};

///******/ 	// The require function
///******/ 	function __webpack_require__(moduleId) {

///******/ 		// Check if module is in cache
///******/ 		if(installedModules[moduleId])
///******/ 			return installedModules[moduleId].exports;

///******/ 		// Create a new module (and put it into the cache)
///******/ 		var module = installedModules[moduleId] = {
///******/ 			exports: {},
///******/ 			id: moduleId,
///******/ 			loaded: false
///******/ 		};

///******/ 		// Execute the module function
///******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);

///******/ 		// Flag the module as loaded
///******/ 		module.loaded = true;

///******/ 		// Return the exports of the module
///******/ 		return module.exports;
///******/ 	}


///******/ 	// expose the modules object (__webpack_modules__)
///******/ 	__webpack_require__.m = modules;

///******/ 	// expose the module cache
///******/ 	__webpack_require__.c = installedModules;

///******/ 	// __webpack_public_path__
///******/ 	__webpack_require__.p = "";

///******/ 	// Load entry module and return exports
///******/ 	return __webpack_require__(0);
///******/ })
///************************************************************************/
///******/ ([
///* 0 */
///***/ function(module, exports, __webpack_require__) {

//	(function() {
//	    var mkFhir = __webpack_require__(1);
//	    var jquery = window['_jQuery'] || window['jQuery'];

//	    var defer = function(){
//	        pr = jquery.Deferred();
//	        pr.promise = pr.promise();
//	        return pr;
//	    };
//	    var adapter = {
//	        defer: defer,
//	        http: function(args) {
//	            var ret = jquery.Deferred();
//	            var opts = {
//	                type: args.method,
//	                url: args.url,
//	                headers: args.headers,
//	                dataType: "json",
//	                contentType: "application/json",
//	                data: args.data || args.params,
//	                withCredentials: args.credentials === 'include',
//	            };
//	            jquery.ajax(opts)
//	                .done(function(data, status, xhr) {ret.resolve({data: data, status: status, headers: xhr.getResponseHeader, config: args});})
//	                .fail(function(err) {ret.reject({error: err, data: err, config: args});});
//	            return ret.promise();
//	        }
//	    };

//	    var fhir = function(config) {
//	        return mkFhir(config, adapter);
//	    };
//	    fhir.defer = defer;
//	    module.exports = fhir;

//	}).call(this);


///***/ },
///* 1 */
///***/ function(module, exports, __webpack_require__) {

//	(function() {
//	    var utils = __webpack_require__(2);
//	    var M = __webpack_require__(5);
//	    var query = __webpack_require__(6);
//	    var auth = __webpack_require__(7);
//	    var transport = __webpack_require__(9);
//	    var errors = __webpack_require__(10);
//	    var config = __webpack_require__(11);
//	    var bundle = __webpack_require__(12);
//	    var pt = __webpack_require__(13);
//	    var refs = __webpack_require__(14);
//	    var url = __webpack_require__(15);
//	    var decorate = __webpack_require__(16);

//	    var cache = {};


//	    var fhir = function(cfg, adapter){
//	        var Middleware = M.Middleware;
//	        var $$Attr = M.$$Attr;

//	        var $$Method = function(m){ return $$Attr('method', m);};
//	        var $$Header = function(h,v) {return $$Attr('headers.' + h, v);};

//	        var $Errors = Middleware(errors);
//	        var Defaults = Middleware(config(cfg, adapter))
//	                .and($Errors)
//	                .and(auth.$Basic)
//	                .and(auth.$Bearer)
//	                .and(auth.$Credentials)
//	                .and(transport.$JsonData)
//	                .and($$Header('Accept', 'application/json'))
//	                .and($$Header('Content-Type', 'application/json'));

//	        var GET = Defaults.and($$Method('GET'));
//	        var POST = Defaults.and($$Method('POST'));
//	        var PUT = Defaults.and($$Method('PUT'));
//	        var DELETE = Defaults.and($$Method('DELETE'));

//	        var http = transport.Http(cfg, adapter);

//	        var Path = url.Path;
//	        var BaseUrl = Path(cfg.baseUrl);
//	        var resourceTypePath = BaseUrl.slash(":type || :resource.resourceType");
//	        var searchPath = resourceTypePath;
//	        var resourceTypeHxPath = resourceTypePath.slash("_history");
//	        var resourcePath = resourceTypePath.slash(":id || :resource.id");
//	        var resourceHxPath = resourcePath.slash("_history");
//	        var vreadPath =  resourceHxPath.slash(":versionId || :resource.meta.versionId");
//	        var resourceVersionPath = resourceHxPath.slash(":versionId || :resource.meta.versionId");

//	        var ReturnHeader = $$Header('Prefer', 'return=representation');

//	        var $Paging = Middleware(query.$Paging);

//	        return decorate({
//	            conformance: GET.and(BaseUrl.slash("metadata")).end(http),
//	            document: POST.and(BaseUrl.slash("Document")).end(http),
//	            profile:  GET.and(BaseUrl.slash("Profile").slash(":type")).end(http),
//	            transaction: POST.and(BaseUrl).end(http),
//	            history: GET.and(BaseUrl.slash("_history")).and($Paging).end(http),
//	            typeHistory: GET.and(resourceTypeHxPath).and($Paging).end(http),
//	            resourceHistory: GET.and(resourceHxPath).and($Paging).end(http),
//	            read: GET.and(pt.$WithPatient).and(resourcePath).end(http),
//	            vread: GET.and(vreadPath).end(http),
//	            "delete": DELETE.and(resourcePath).and(ReturnHeader).end(http),
//	            create: POST.and(resourceTypePath).and(ReturnHeader).end(http),
//	            validate: POST.and(resourceTypePath.slash("_validate")).end(http),
//	            search: GET.and(resourceTypePath).and(pt.$WithPatient).and(query.$SearchParams).and($Paging).end(http),
//	            update: PUT.and(resourcePath).and(ReturnHeader).end(http),
//	            nextPage: GET.and(bundle.$$BundleLinkUrl("next")).end(http),
//	            prevPage: GET.and(bundle.$$BundleLinkUrl("prev")).end(http),
//	            resolve: GET.and(refs.resolve).end(http)
//	        }, adapter);

//	    };
//	    module.exports = fhir;
//	}).call(this);


///***/ },
///* 2 */
///***/ function(module, exports, __webpack_require__) {

//	(function() {
//	  var merge = __webpack_require__(3);

//	  var RTRIM = /^[\s\uFEFF\xA0]+|[\s\uFEFF\xA0]+$/g;

//	  var trim = function(text) {
//	    return text ? text.toString().replace(RTRIM, "")  : "";
//	  };

//	  exports.trim = trim;

//	  var addKey = function(acc, str) {
//	    var pair, val;
//	    if (!str) {
//	      return null;
//	    }
//	    pair = str.split("=").map(trim);
//	    val = pair[1].replace(/(^"|"$)/g, '');
//	    if (val) {
//	      acc[pair[0]] = val;
//	    }
//	    return acc;
//	  };

//	  var type = function(obj) {
//	    var classToType;
//	    if (obj == null && obj === undefined) {
//	      return String(obj);
//	    }
//	    classToType = {
//	      '[object Boolean]': 'boolean',
//	      '[object Number]': 'number',
//	      '[object String]': 'string',
//	      '[object Function]': 'function',
//	      '[object Array]': 'array',
//	      '[object Date]': 'date',
//	      '[object RegExp]': 'regexp',
//	      '[object Object]': 'object'
//	    };
//	    return classToType[Object.prototype.toString.call(obj)];
//	  };

//	  exports.type = type;

//	  var assertArray = function(a) {
//	    if (type(a) !== 'array') {
//	      throw 'not array';
//	    }
//	    return a;
//	  };

//	  exports.assertArray = assertArray;

//	  var assertObject = function(a) {
//	    if (type(a) !== 'object') {
//	      throw 'not object';
//	    }
//	    return a;
//	  };

//	  exports.assertObject = assertObject;

//	  var reduceMap = function(m, fn, acc) {
//	    var k, v;
//	    acc || (acc = []);
//	    assertObject(m);
//	    return ((function() {
//	      var results;
//	      results = [];
//	      for (k in m) {
//	        v = m[k];
//	        results.push([k, v]);
//	      }
//	      return results;
//	    })()).reduce(fn, acc);
//	  };

//	  exports.reduceMap = reduceMap;

//	  var identity = function(x) {return x;};

//	  exports.identity = identity;

//	  var argsArray = function() {
//	     return Array.prototype.slice.call(arguments)
//	  };

//	  exports.argsArray = argsArray;

//	  var mergeLists = function() {
//	    var reduce;
//	    reduce = function(merged, nextMap) {
//	      var k, ret, v;
//	      ret = merge(true, merged);
//	      for (k in nextMap) {
//	        v = nextMap[k];
//	        ret[k] = (ret[k] || []).concat(v);
//	      }
//	      return ret;
//	    };
//	    return argsArray.apply(null, arguments).reduce(reduce, {});
//	  };

//	  exports.mergeLists = mergeLists;

//	  var absoluteUrl = function(baseUrl, ref) {
//	    if (!ref.match(/https?:\/\/./)) {
//	      return baseUrl + "/" + ref;
//	    } else {
//	      return ref;
//	    }
//	  };

//	  exports.absoluteUrl = absoluteUrl;

//	  var relativeUrl = function(baseUrl, ref) {
//	    if (ref.slice(ref, baseUrl.length + 1) === baseUrl + "/") {
//	      return ref.slice(baseUrl.length + 1);
//	    } else {
//	      return ref;
//	    }
//	  };

//	  exports.relativeUrl = relativeUrl;

//	  exports.resourceIdToUrl = function(id, baseUrl, type) {
//	    baseUrl = baseUrl.replace(/\/$/, '');
//	    id = id.replace(/^\//, '');
//	    if (id.indexOf('/') < 0) {
//	      return baseUrl + "/" + type + "/" + id;
//	    } else if (id.indexOf(baseUrl) !== 0) {
//	      return baseUrl + "/" + id;
//	    } else {
//	      return id;
//	    }
//	  };

//	  var walk = function(inner, outer, data, context) {
//	    var keysToMap, remapped;
//	    switch (type(data)) {
//	      case 'array':
//	        return outer(data.map(function(item) {
//	          return inner(item, [data, context]);
//	        }), context);
//	      case 'object':
//	        keysToMap = function(acc, arg) {
//	          var k, v;
//	          k = arg[0], v = arg[1];
//	          acc[k] = inner(v, [data].concat(context));
//	          return acc;
//	        };
//	        remapped = reduceMap(data, keysToMap, {});
//	        return outer(remapped, context);
//	      default:
//	        return outer(data, context);
//	    }
//	  };

//	  exports.walk = walk;

//	  var postwalk = function(f, data, context) {
//	    if (!data) {
//	      return function(data, context) {
//	        return postwalk(f, data, context);
//	      };
//	    } else {
//	      return walk(postwalk(f), f, data, context);
//	    }
//	  };

//	  exports.postwalk = postwalk;

//	}).call(this);


///***/ },
///* 3 */
///***/ function(module, exports, __webpack_require__) {

//	/* WEBPACK VAR INJECTION */(function(module) {/*!
//	 * @name JavaScript/NodeJS Merge v1.1.3
//	 * @author yeikos
//	 * @repository https://github.com/yeikos/js.merge

//	 * Copyright 2014 yeikos - MIT license
//	 * https://raw.github.com/yeikos/js.merge/master/LICENSE
//	 */

//	;(function(isNode) {

//		function merge() {

//			var items = Array.prototype.slice.call(arguments),
//				result = items.shift(),
//				deep = (result === true),
//				size = items.length,
//				item, index, key;

//			if (deep || typeOf(result) !== 'object')

//				result = {};

//			for (index=0;index<size;++index)

//				if (typeOf(item = items[index]) === 'object')

//					for (key in item)

//						result[key] = deep ? clone(item[key]) : item[key];

//			return result;

//		}

//		function clone(input) {

//			var output = input,
//				type = typeOf(input),
//				index, size;

//			if (type === 'array') {

//				output = [];
//				size = input.length;

//				for (index=0;index<size;++index)

//					output[index] = clone(input[index]);

//			} else if (type === 'object') {

//				output = {};

//				for (index in input)

//					output[index] = clone(input[index]);

//			}

//			return output;

//		}

//		function typeOf(input) {

//			return ({}).toString.call(input).match(/\s([\w]+)/)[1].toLowerCase();

//		}

//		if (isNode) {

//			module.exports = merge;

//		} else {

//			window.merge = merge;

//		}

//	})(typeof module === 'object' && module && typeof module.exports === 'object' && module.exports);
//	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(4)(module)))

///***/ },
///* 4 */
///***/ function(module, exports) {

//	module.exports = function(module) {
//		if(!module.webpackPolyfill) {
//			module.deprecate = function() {};
//			module.paths = [];
//			// module.parent = undefined by default
//			module.children = [];
//			module.webpackPolyfill = 1;
//		}
//		return module;
//	}


///***/ },
///* 5 */
///***/ function(module, exports, __webpack_require__) {

//	(function() {
//	    var utils = __webpack_require__(2);

//	    var id = function(x){return x;};
//	    var constantly = function(x){return function(){return x;};};

//	    var mwComposition = function(mw1, mw2){
//	        return function(h){ return mw1(mw2(h)); };
//	    };

//	    var Middleware = function(mw){
//	        mw.and = function(nmw){
//	            return Middleware(mwComposition(mw, nmw));
//	        };
//	        mw.end = function(h){
//	            return mw(h);
//	        };
//	        return mw;
//	    };

//	    // generate wm from function
//	    exports.$$Simple = function(f){
//	        return function(h){
//	            return function(args){
//	                return h(f(args));
//	            };
//	        };
//	    };

//	    var setAttr = function(args, attr, value){
//	        var path = attr.split('.');
//	        var obj = args;
//	        for(var i = 0; i < (path.length - 1); i++){
//	            var k = path[i];
//	            obj = args[k];
//	            if(!obj){
//	                obj = {};
//	                args[k] = obj;
//	            }
//	        }
//	        obj[path[path.length - 1]] = value;
//	        return args;
//	    };

//	    // generate wm from function
//	    exports.$$Attr = function(attr, fn){
//	        return Middleware(function(h){
//	            return function(args) {
//	                var value = null;
//	                if(utils.type(fn) == 'function'){
//	                   value = fn(args);
//	                } else {
//	                    value = fn;
//	                }
//	                if(value == null && value == undefined){
//	                    return h(args);
//	                }else {
//	                    return h(setAttr(args, attr, value));
//	                }
//	            };
//	        });
//	    };

//	    var Attribute = function(attr, fn){
//	        return Middleware(function(h){
//	            return function(args) {
//	                args[attr] = fn(args);
//	                return h(args);
//	            };
//	        });
//	    };

//	    var Method = function(method){
//	        return Attribute('method', constantly(method));
//	    };

//	    exports.Middleware = Middleware;
//	    exports.Attribute = Attribute;
//	    exports.Method = Method;

//	}).call(this);


///***/ },
///* 6 */
///***/ function(module, exports, __webpack_require__) {

//	(function() {
//	    var utils = __webpack_require__(2);

//	    var type = utils.type;

//	    var assertArray = utils.assertArray;

//	    var assertObject = utils.assertObject;

//	    var reduceMap = utils.reduceMap;

//	    var identity = utils.identity;

//	    var OPERATORS = {
//	        $gt: 'gt',
//	        $lt: 'lt',
//	        $lte: 'lte',
//	        $gte: 'gte'
//	    };

//	    var MODIFIERS = {
//	        $asc: ':asc',
//	        $desc: ':desc',
//	        $exact: ':exact',
//	        $missing: ':missing',
//	        $null: ':missing',
//	        $text: ':text'
//	    };

//	    var isOperator = function(v) {
//	        return v.indexOf('$') === 0;
//	    };

//	    var expandParam = function(k, v) {
//	        return reduceMap(v, function(acc, arg) {
//	            var kk, o, res, vv;
//	            kk = arg[0], vv = arg[1];
//	            return acc.concat(kk === '$and' ? assertArray(vv).reduce((function(a, vvv) {
//	                return a.concat(linearizeOne(k, vvv));
//	            }), []) : kk === '$type' ? [] : isOperator(kk) ? (o = {
//	                param: k
//	            }, kk === '$or' ? o.value = vv : (OPERATORS[kk] ? o.operator = OPERATORS[kk] : void 0, MODIFIERS[kk] ? o.modifier = MODIFIERS[kk] : void 0, type(vv) === 'object' && vv.$or ? o.value = vv.$or : o.value = [vv]), [o]) : (v.$type ? res = ":" + v.$type : void 0, linearizeOne("" + k + (res || '') + "." + kk, vv)));
//	        });
//	    };

//	    var handleSort = function(xs) {
//	        var i, len, results, x;
//	        assertArray(xs);
//	        results = [];
//	        for (i = 0, len = xs.length; i < len; i++) {
//	            x = xs[i];
//	            switch (type(x)) {
//	            case 'array':
//	                results.push({
//	                    param: '_sort',
//	                    value: x[0],
//	                    modifier: ":" + x[1]
//	                });
//	                break;
//	            case 'string':
//	                results.push({
//	                    param: '_sort',
//	                    value: x
//	                });
//	                break;
//	            default:
//	                results.push(void 0);
//	            }
//	        }
//	        return results;
//	    };

//	    var handleInclude = function(includes) {
//	        return reduceMap(includes, function(acc, arg) {
//	            var k, v;
//	            k = arg[0], v = arg[1];
//	            return acc.concat((function() {
//	                switch (type(v)) {
//	                case 'array':
//	                    return v.map(function(x) {
//	                        return {
//	                            param: '_include',
//	                            value: k + "." + x
//	                        };
//	                    });
//	                case 'string':
//	                    return [
//	                        {
//	                            param: '_include',
//	                            value: k + "." + v
//	                        }
//	                    ];
//	                }
//	            })());
//	        });
//	    };

//	    var linearizeOne = function(k, v) {
//	        if (k === '$sort') {
//	            return handleSort(v);
//	        } else if (k === '$include') {
//	            return handleInclude(v);
//	        } else {
//	            switch (type(v)) {
//	            case 'object':
//	                return expandParam(k, v);
//	            case 'string':
//	                return [
//	                    {
//	                        param: k,
//	                        value: [v]
//	                    }
//	                ];
//	            case 'number':
//	                return [
//	                    {
//	                        param: k,
//	                        value: [v]
//	                    }
//	                ];
//	            case 'array':
//	                return [
//	                    {
//	                        param: k,
//	                        value: [v.join("|")]
//	                    }
//	                ];
//	            default:
//	                throw "could not linearizeParams " + (type(v));
//	            }
//	        }
//	    };

//	    var linearizeParams = function(query) {
//	        return reduceMap(query, function(acc, arg) {
//	            var k, v;
//	            k = arg[0], v = arg[1];
//	            return acc.concat(linearizeOne(k, v));
//	        });
//	    };

//	    var buildSearchParams = function(query) {
//	        var p, ps;
//	        ps = (function() {
//	            var i, len, ref, results;
//	            ref = linearizeParams(query);
//	            results = [];
//	            for (i = 0, len = ref.length; i < len; i++) {
//	                p = ref[i];
//	                results.push([p.param, p.modifier, '=', p.operator, encodeURIComponent(p.value)].filter(identity).join(''));
//	            }
//	            return results;
//	        })();
//	        return ps.join("&");
//	    };

//	    exports._query = linearizeParams;

//	    exports.query = buildSearchParams;

//	    var mw = __webpack_require__(5);

//	    exports.$SearchParams = mw.$$Attr('url', function(args){
//	        var url = args.url;
//	        if(args.query){
//	             var queryStr = buildSearchParams(args.query);
//	             return url + "?" + queryStr;
//	        }
//	        return url;
//	    });


//	    exports.$Paging = function(h){
//	        return function(args){
//	            var params = args.params || {};
//	            if(args.since){params._since = args.since;}
//	            if(args.count){params._count = args.count;}
//	            args.params = params;
//	            return h(args);
//	        };
//	    };


//	}).call(this);


///***/ },
///* 7 */
///***/ function(module, exports, __webpack_require__) {

//	(function() {
//	    var mw = __webpack_require__(5);

//	    var btoa = __webpack_require__(8).btoa;

//	    exports.$Basic = mw.$$Attr('headers.Authorization', function(args){
//	        if(args.auth && args.auth.user && args.auth.pass){
//	            return "Basic " + btoa(args.auth.user + ":" + args.auth.pass);
//	        }
//	    });

//	    exports.$Bearer = mw.$$Attr('headers.Authorization', function(args){
//	        if(args.auth && args.auth.bearer){
//	            return "Bearer " + args.auth.bearer;
//	        }
//	    });

//	    var credentials;
//	    // this first middleware sets the credentials attribute to empty, so
//	    // adapters cannot use it directly, thus enforcing a valid value to be parsed in.
//	    exports.$Credentials = mw.Middleware(mw.$$Attr('credentials', function(args){
//	      // Assign value for later checking
//	      credentials = args.credentials

//	      // Needs to return non-null and not-undefined
//	      // in order for value to be (un)set
//	      return '';
//	    })).and(mw.$$Attr('credentials', function(args){
//	        // check credentials for valid options, valid for fetch
//	        if(['same-origin', 'include'].indexOf(credentials) > -1 ){
//	            return credentials;
//	        }
//	    }));

//	}).call(this);


///***/ },
///* 8 */
///***/ function(module, exports, __webpack_require__) {

//	;(function () {

//	  var object =  true ? exports : this; // #8: web workers
//	  var chars = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=';

//	  function InvalidCharacterError(message) {
//	    this.message = message;
//	  }
//	  InvalidCharacterError.prototype = new Error;
//	  InvalidCharacterError.prototype.name = 'InvalidCharacterError';

//	  // encoder
//	  // [https://gist.github.com/999166] by [https://github.com/nignag]
//	  object.btoa || (
//	  object.btoa = function (input) {
//	    var str = String(input);
//	    for (
//	      // initialize result and counter
//	      var block, charCode, idx = 0, map = chars, output = '';
//	      // if the next str index does not exist:
//	      //   change the mapping table to "="
//	      //   check if d has no fractional digits
//	      str.charAt(idx | 0) || (map = '=', idx % 1);
//	      // "8 - idx % 1 * 8" generates the sequence 2, 4, 6, 8
//	      output += map.charAt(63 & block >> 8 - idx % 1 * 8)
//	    ) {
//	      charCode = str.charCodeAt(idx += 3/4);
//	      if (charCode > 0xFF) {
//	        throw new InvalidCharacterError("'btoa' failed: The string to be encoded contains characters outside of the Latin1 range.");
//	      }
//	      block = block << 8 | charCode;
//	    }
//	    return output;
//	  });

//	  // decoder
//	  // [https://gist.github.com/1020396] by [https://github.com/atk]
//	  object.atob || (
//	  object.atob = function (input) {
//	    var str = String(input).replace(/=+$/, '');
//	    if (str.length % 4 == 1) {
//	      throw new InvalidCharacterError("'atob' failed: The string to be decoded is not correctly encoded.");
//	    }
//	    for (
//	      // initialize result and counters
//	      var bc = 0, bs, buffer, idx = 0, output = '';
//	      // get next character
//	      buffer = str.charAt(idx++);
//	      // character found in table? initialize bit storage and add its ascii value;
//	      ~buffer && (bs = bc % 4 ? bs * 64 + buffer : buffer,
//	        // and if not first of each 4 characters,
//	        // convert the first 8 bits to one ascii character
//	        bc++ % 4) ? output += String.fromCharCode(255 & bs >> (-2 * bc & 6)) : 0
//	    ) {
//	      // try to find character in table (0-63, not found => -1)
//	      buffer = chars.indexOf(buffer);
//	    }
//	    return output;
//	  });

//	}());


///***/ },
///* 9 */
///***/ function(module, exports, __webpack_require__) {

//	(function() {
//	    var utils = __webpack_require__(2);

//	    exports.Http = function(cfg, adapter){
//	        return function(args){
//	            if(args.debug){
//	                console.log("\nDEBUG (request):", args.method, args.url, args);
//	            }
//	            var promise = (args.http || adapter.http  || cfg.http)(args);
//	            if (args.debug && promise && promise.then){
//	                promise.then(function(x){ console.log("\nDEBUG: (responce)", x);});
//	            }
//	            return promise;
//	        };
//	    };

//	    var toJson = function(x){
//	        return (utils.type(x) == 'object') ? JSON.stringify(x) : x;
//	    };

//	    exports.$JsonData = function(h){
//	        return function(args){
//	            var data = args.bundle || args.data || args.resource;
//	            if(data){
//	                args.data = toJson(data);
//	            }
//	            return h(args);
//	        };
//	    };

//	}).call(this);


///***/ },
///* 10 */
///***/ function(module, exports) {

//	module.exports = function(h){
//	    return function(args){
//	        try{
//	            return h(args);
//	        }catch(e){
//	            if(args.debug){
//	               console.log("\nDEBUG: (ERROR in middleware)");
//	               console.log(e.message);
//	               console.log(e.stack);
//	            }
//	            if(!args.defer) {
//	                console.log("\nDEBUG: (ERROR in middleware)");
//	                console.log(e.message);
//	                console.log(e.stack);
//	                throw new Error("I need adapter.defer");
//	            }
//	            var deff = args.defer();
//	            deff.reject(e);
//	            return deff.promise;
//	        }
//	    };
//	};


///***/ },
///* 11 */
///***/ function(module, exports) {

//	(function() {
//	    var copyAttr = function(from, to, attr){
//	        var v =  from[attr];
//	        if(v && !to[attr]) {to[attr] = v;}
//	        return from;
//	    };

//	    module.exports = function(cfg, adapter){
//	        return function(h){
//	            return function(args){
//	                copyAttr(cfg, args, 'baseUrl');
//	                copyAttr(cfg, args, 'cache');
//	                copyAttr(cfg, args, 'auth');
//	                copyAttr(cfg, args, 'patient');
//	                copyAttr(cfg, args, 'debug');
//	                copyAttr(adapter, args, 'defer');
//	                copyAttr(adapter, args, 'http');
//	                return h(args);
//	            };
//	        };
//	    };
//	}).call(this);


///***/ },
///* 12 */
///***/ function(module, exports) {

//	exports.$$BundleLinkUrl =  function(rel){
//	    return function(h) {
//	        return function(args){
//	            var matched = function(x){return x.relation && x.relation === rel;};
//	            var res =  args.bundle && (args.bundle.link || []).filter(matched)[0];
//	            if(res && res.url){
//	                args.url = res.url;
//	                args.data = null;
//	                return h(args);
//	            }
//	            else{
//	                throw new Error("No " + rel + " link found in bundle");
//	            }
//	        };
//	    };
//	};


///***/ },
///* 13 */
///***/ function(module, exports, __webpack_require__) {

//	(function() {
//	    var mw = __webpack_require__(5);

//	    // List of resources with 'patient' or 'subject' properties (as of FHIR DSTU2 1.0.0)
//	    var targets = [
//	        "Account",
//	        "AllergyIntolerance",
//	        "BodySite",
//	        "CarePlan",
//	        "Claim",
//	        "ClinicalImpression",
//	        "Communication",
//	        "CommunicationRequest",
//	        "Composition",
//	        "Condition",
//	        "Contract",
//	        "DetectedIssue",
//	        "Device",
//	        "DeviceUseRequest",
//	        "DeviceUseStatement",
//	        "DiagnosticOrder",
//	        "DiagnosticReport",
//	        "DocumentManifest",
//	        "DocumentReference",
//	        "Encounter",
//	        "EnrollmentRequest",
//	        "EpisodeOfCare",
//	        "FamilyMemberHistory",
//	        "Flag",
//	        "Goal",
//	        "ImagingObjectSelection",
//	        "ImagingStudy",
//	        "Immunization",
//	        "ImmunizationRecommendation",
//	        "List",
//	        "Media",
//	        "MedicationAdministration",
//	        "MedicationDispense",
//	        "MedicationOrder",
//	        "MedicationStatement",
//	        "NutritionOrder",
//	        "Observation",
//	        "Order",
//	        "Procedure",
//	        "ProcedureRequest",
//	        "QuestionnaireResponse",
//	        "ReferralRequest",
//	        "RelatedPerson",
//	        "RiskAssessment",
//	        "Specimen",
//	        "SupplyDelivery",
//	        "SupplyRequest",
//	        "VisionPrescription"
//	    ];

//	    exports.$WithPatient = mw.$$Simple(function(args){
//	        var type = args.type;
//	        if (args.patient) {
//	            if (type === "Patient") {
//	                args.query = args.query || {};
//	                args.query["_id"] = args.patient;
//	                args["id"] = args.patient;
//	            } else if (targets.indexOf(type) >= 0){
//	                args.query = args.query || {};
//	                args.query["patient"] = args.patient;
//	            }
//	        }
//	        return args;
//	    });
//	}).call(this);


///***/ },
///* 14 */
///***/ function(module, exports, __webpack_require__) {

//	(function() {
//	    var utils = __webpack_require__(2);

//	    var CONTAINED = /^#(.*)/;
//	    var resolveContained = function(ref, resource) {
//	        var cid = ref.match(CONTAINED)[1];
//	        var ret = (resource.contained || []).filter(function(r){
//	            return (r.id || r._id) == cid;
//	        })[0];
//	        return (ret && {content: ret}) || null;
//	    };

//	    var sync = function(arg) {
//	        var cache = arg.cache;
//	        var reference = arg.reference;
//	        var bundle = arg.bundle;
//	        var ref = reference;
//	        if (!ref.reference) {return null;}
//	        if (ref.reference.match(CONTAINED)) {return resolveContained(ref.reference, arg.resource);}
//	        var abs = utils.absoluteUrl(arg.baseUrl, ref.reference);
//	        var bundled = ((bundle && bundle.entry) || []).filter( function(e){
//	            return e.id === abs;
//	        })[0];
//	        return bundled || (cache != null ? cache[abs] : void 0) || null;
//	    };

//	    var resolve = function(h){
//	        return function(args) {
//	            var cacheMatched = sync(args);
//	            var ref = args.reference;
//	            var def = args.defer();
//	            if (cacheMatched) {
//	                if(!args.defer){ throw new Error("I need promise constructor 'adapter.defer' in adapter"); }
//	                def.resolve(cacheMatched);
//	                return def.promise;
//	            }
//	            if (!ref) {
//	                throw new Error("No reference found");
//	            }
//	            if (ref && ref.reference.match(CONTAINED)) {
//	                throw new Error("Contained resource not found");
//	            }
//	            args.url = utils.absoluteUrl(args.baseUrl, ref.reference);
//	            args.data = null;
//	            return h(args);
//	        };
//	    };

//	    module.exports.sync = sync;
//	    module.exports.resolve = resolve;

//	}).call(this);


///***/ },
///* 15 */
///***/ function(module, exports, __webpack_require__) {

//	(function() {
//	    var utils = __webpack_require__(2);
//	    var core = __webpack_require__(5);

//	    var id = function(x){return x;};
//	    var constantly = function(x){return function(){return x;};};

//	    var get_in = function(obj, path){
//	        return path.split('.').reduce(function(acc,x){
//	            if(acc == null || acc == undefined) { return null; }
//	            return acc[x];
//	        }, obj);
//	    };

//	    var evalPropsExpr = function(exp, args){
//	        var exps =  exp.split('||').map(function(x){return x.trim().substring(1);});
//	        for(var i = 0; i < exps.length; i++){
//	            var res = get_in(args, exps[i]);
//	            if(res){ return res; }
//	        }
//	        return null;
//	    };

//	    var evalExpr = function(exp, args){
//	        if (exp.indexOf(":") == 0){
//	            return evalPropsExpr(exp, args);
//	        } else {
//	            return exp;
//	        }
//	    };

//	    var buildPathPart = function(pth, args){
//	        var k = evalExpr(pth.trim(), args);
//	        if(k==null || k === undefined){ throw new Error("Parameter "+pth+" is required: " + JSON.stringify(args)); }
//	        return k;
//	    };

//	    // path chaining function
//	    // which return haldler wrapper: (h, cfg)->(args -> promise)
//	    // it's chainable Path("baseUrl").slash(":type").slash(":id").slash("_history")(id, {})({id: 5, type: 'Patient'})
//	    // and composable p0 = Path("baseUrl); p1 = p0.slash("path)
//	    var Path = function(tkn, chain){
//	        //Chainable
//	        var new_chain = function(args){
//	            return ((chain && (chain(args) + "/")) || "") +  buildPathPart(tkn, args);
//	        };
//	        var ch = core.Attribute('url', new_chain);
//	        ch.slash = function(tkn){
//	            return Path(tkn, new_chain);
//	        };
//	        return ch;
//	    };

//	    exports.Path = Path;
//	}).call(this);


///***/ },
///* 16 */
///***/ function(module, exports) {

//	(function() {
//	    var fhirAPI;
//	    var adapter;

//	    function getNext (bundle, process) {
//	        var i;
//	        var d = bundle.data.entry || [];
//	        var entries = [];
//	        for (i = 0; i < d.length; i++) {
//	            entries.push(d[i].resource);
//	        }
//	        process(entries);
//	        var def = adapter.defer();
//	        fhirAPI.nextPage({bundle:bundle.data}).then(function (r) {
//	            getNext(r, process).then(function (t) {
//	                def.resolve();
//	            });
//	        }, function(err) {def.resolve()});
//	        return def.promise;
//	    }
	    
//	    function drain (searchParams, process, done, fail) {
//	        var ret = adapter.defer();
	        
//	        fhirAPI.search(searchParams).then(function(data){
//	            getNext(data, process).then(function() {
//	                done();
//	            }, function(err) {
//	                fail(err);
//	            });
//	        }, function(err) {
//	            fail(err);
//	        });
//	    };
	    
//	    function fetchAll (searchParams){
//	        var ret = adapter.defer();
//	        var results = [];
	        
//	        drain(
//	            searchParams,
//	            function(entries) {
//	                entries.forEach(function(entry) {
//	                    results.push(entry);
//	                });
//	            },
//	            function () {
//	                ret.resolve(results);
//	            },
//	            function (err) {
//	                ret.reject(err);
//	            }
//	        );
	          
//	        return ret.promise;
//	    };

//	    function fetchAllWithReferences (searchParams, resolveParams) {
//	        var ret = adapter.defer();
	          
//	        fhirAPI.search(searchParams)  // TODO: THIS IS NOT CORRECT (need fetchAll, but it does not return a bundle yet)
//	            .then(function(results){

//	                var resolvedReferences = {};

//	                var queue = [function() {
//	                    var entries = results.data.entry || [];
//	                    var res = entries.map(function(r){
//	                        return r.resource;
//	                    });
//	                    var refs = function (resource, reference) {
//	                        var refID = normalizeRefID(resource,reference);
//	                        return resolvedReferences[refID];
//	                    };
//	                    ret.resolve(res,refs);
//	                }];

//	                function normalizeRefID (resource, reference) {
//	                    var refID = reference.reference;
//	                    if (refID.startsWith('#')) {
//	                        var resourceID = resource.resourceType + "/" + resource.id;
//	                        return resourceID + refID;
//	                    } else {
//	                        return refID;
//	                    }
//	                }
	                
//	                function enqueue (bundle,resource,reference) {
//	                  queue.push(function() {
//	                    resolveReference(bundle,resource,reference);
//	                  });
//	                }

//	                function next() {
//	                  (queue.pop())();
//	                }

//	                function resolveReference (bundle,resource,reference) {
//	                    var refID = normalizeRefID(resource,reference);
//	                    fhirAPI.resolve({'bundle': bundle, 'resource': resource, 'reference':reference}).then(function(res){
//	                      var referencedObject = res.data || res.content;
//	                      resolvedReferences[refID] = referencedObject;
//	                      next();
//	                    });
//	                }

//	                var bundle = results.data;

//	                bundle.entry && bundle.entry.forEach(function(element){
//	                  var resource = element.resource;
//	                  var type = resource.resourceType;
//	                  resolveParams && resolveParams.forEach(function(resolveParam){
//	                    var param = resolveParam.split('.');
//	                    var targetType = param[0];
//	                    var targetElement = param[1];
//	                    var reference = resource[targetElement];
//	                    if (type === targetType && reference) {
//	                      var referenceID = reference.reference;
//	                      if (!resolvedReferences[referenceID]) {
//	                        enqueue(bundle,resource,reference);
//	                      }
//	                    }
//	                  });
//	                });

//	                next();

//	            }, function(){
//	                ret.reject("Could not fetch search results");
//	            });
	          
//	        return ret.promise;
//	    };

//	    function decorate (client, newAdapter) {
//	        fhirAPI = client;
//	        adapter = newAdapter;
//	        client["drain"] = drain;
//	        client["fetchAll"] = fetchAll;
//	        client["fetchAllWithReferences"] = fetchAllWithReferences;
//	        return client;
//	    }
	    
//	    module.exports = decorate;
//	}).call(this);

///***/ }
///******/ ])
//});
//;
//},{}],2:[function(require,module,exports){

//},{}],3:[function(require,module,exports){
///*!
// * The buffer module from node.js, for the browser.
// *
// * @author   Feross Aboukhadijeh <feross@feross.org> <http://feross.org>
// * @license  MIT
// */

//var base64 = require('base64-js')
//var ieee754 = require('ieee754')

//exports.Buffer = Buffer
//exports.SlowBuffer = Buffer
//exports.INSPECT_MAX_BYTES = 50
//Buffer.poolSize = 8192

///**
// * If `TYPED_ARRAY_SUPPORT`:
// *   === true    Use Uint8Array implementation (fastest)
// *   === false   Use Object implementation (most compatible, even IE6)
// *
// * Browsers that support typed arrays are IE 10+, Firefox 4+, Chrome 7+, Safari 5.1+,
// * Opera 11.6+, iOS 4.2+.
// *
// * Note:
// *
// * - Implementation must support adding new properties to `Uint8Array` instances.
// *   Firefox 4-29 lacked support, fixed in Firefox 30+.
// *   See: https://bugzilla.mozilla.org/show_bug.cgi?id=695438.
// *
// *  - Chrome 9-10 is missing the `TypedArray.prototype.subarray` function.
// *
// *  - IE10 has a broken `TypedArray.prototype.subarray` function which returns arrays of
// *    incorrect length in some situations.
// *
// * We detect these buggy browsers and set `TYPED_ARRAY_SUPPORT` to `false` so they will
// * get the Object implementation, which is slower but will work correctly.
// */
//var TYPED_ARRAY_SUPPORT = (function () {
//  try {
//    var buf = new ArrayBuffer(0)
//    var arr = new Uint8Array(buf)
//    arr.foo = function () { return 42 }
//    return 42 === arr.foo() && // typed array instances can be augmented
//        typeof arr.subarray === 'function' && // chrome 9-10 lack `subarray`
//        new Uint8Array(1).subarray(1, 1).byteLength === 0 // ie10 has broken `subarray`
//  } catch (e) {
//    return false
//  }
//})()

///**
// * Class: Buffer
// * =============
// *
// * The Buffer constructor returns instances of `Uint8Array` that are augmented
// * with function properties for all the node `Buffer` API functions. We use
// * `Uint8Array` so that square bracket notation works as expected -- it returns
// * a single octet.
// *
// * By augmenting the instances, we can avoid modifying the `Uint8Array`
// * prototype.
// */
//function Buffer (subject, encoding, noZero) {
//  if (!(this instanceof Buffer))
//    return new Buffer(subject, encoding, noZero)

//  var type = typeof subject

//  // Find the length
//  var length
//  if (type === 'number')
//    length = subject > 0 ? subject >>> 0 : 0
//  else if (type === 'string') {
//    if (encoding === 'base64')
//      subject = base64clean(subject)
//    length = Buffer.byteLength(subject, encoding)
//  } else if (type === 'object' && subject !== null) { // assume object is array-like
//    if (subject.type === 'Buffer' && isArray(subject.data))
//      subject = subject.data
//    length = +subject.length > 0 ? Math.floor(+subject.length) : 0
//  } else
//    throw new Error('First argument needs to be a number, array or string.')

//  var buf
//  if (TYPED_ARRAY_SUPPORT) {
//    // Preferred: Return an augmented `Uint8Array` instance for best performance
//    buf = Buffer._augment(new Uint8Array(length))
//  } else {
//    // Fallback: Return THIS instance of Buffer (created by `new`)
//    buf = this
//    buf.length = length
//    buf._isBuffer = true
//  }

//  var i
//  if (TYPED_ARRAY_SUPPORT && typeof subject.byteLength === 'number') {
//    // Speed optimization -- use set if we're copying from a typed array
//    buf._set(subject)
//  } else if (isArrayish(subject)) {
//    // Treat array-ish objects as a byte array
//    if (Buffer.isBuffer(subject)) {
//      for (i = 0; i < length; i++)
//        buf[i] = subject.readUInt8(i)
//    } else {
//      for (i = 0; i < length; i++)
//        buf[i] = ((subject[i] % 256) + 256) % 256
//    }
//  } else if (type === 'string') {
//    buf.write(subject, 0, encoding)
//  } else if (type === 'number' && !TYPED_ARRAY_SUPPORT && !noZero) {
//    for (i = 0; i < length; i++) {
//      buf[i] = 0
//    }
//  }

//  return buf
//}

//// STATIC METHODS
//// ==============

//Buffer.isEncoding = function (encoding) {
//  switch (String(encoding).toLowerCase()) {
//    case 'hex':
//    case 'utf8':
//    case 'utf-8':
//    case 'ascii':
//    case 'binary':
//    case 'base64':
//    case 'raw':
//    case 'ucs2':
//    case 'ucs-2':
//    case 'utf16le':
//    case 'utf-16le':
//      return true
//    default:
//      return false
//  }
//}

//Buffer.isBuffer = function (b) {
//  return !!(b != null && b._isBuffer)
//}

//Buffer.byteLength = function (str, encoding) {
//  var ret
//  str = str.toString()
//  switch (encoding || 'utf8') {
//    case 'hex':
//      ret = str.length / 2
//      break
//    case 'utf8':
//    case 'utf-8':
//      ret = utf8ToBytes(str).length
//      break
//    case 'ascii':
//    case 'binary':
//    case 'raw':
//      ret = str.length
//      break
//    case 'base64':
//      ret = base64ToBytes(str).length
//      break
//    case 'ucs2':
//    case 'ucs-2':
//    case 'utf16le':
//    case 'utf-16le':
//      ret = str.length * 2
//      break
//    default:
//      throw new Error('Unknown encoding')
//  }
//  return ret
//}

//Buffer.concat = function (list, totalLength) {
//  assert(isArray(list), 'Usage: Buffer.concat(list[, length])')

//  if (list.length === 0) {
//    return new Buffer(0)
//  } else if (list.length === 1) {
//    return list[0]
//  }

//  var i
//  if (totalLength === undefined) {
//    totalLength = 0
//    for (i = 0; i < list.length; i++) {
//      totalLength += list[i].length
//    }
//  }

//  var buf = new Buffer(totalLength)
//  var pos = 0
//  for (i = 0; i < list.length; i++) {
//    var item = list[i]
//    item.copy(buf, pos)
//    pos += item.length
//  }
//  return buf
//}

//Buffer.compare = function (a, b) {
//  assert(Buffer.isBuffer(a) && Buffer.isBuffer(b), 'Arguments must be Buffers')
//  var x = a.length
//  var y = b.length
//  for (var i = 0, len = Math.min(x, y); i < len && a[i] === b[i]; i++) {}
//  if (i !== len) {
//    x = a[i]
//    y = b[i]
//  }
//  if (x < y) {
//    return -1
//  }
//  if (y < x) {
//    return 1
//  }
//  return 0
//}

//// BUFFER INSTANCE METHODS
//// =======================

//function hexWrite (buf, string, offset, length) {
//  offset = Number(offset) || 0
//  var remaining = buf.length - offset
//  if (!length) {
//    length = remaining
//  } else {
//    length = Number(length)
//    if (length > remaining) {
//      length = remaining
//    }
//  }

//  // must be an even number of digits
//  var strLen = string.length
//  assert(strLen % 2 === 0, 'Invalid hex string')

//  if (length > strLen / 2) {
//    length = strLen / 2
//  }
//  for (var i = 0; i < length; i++) {
//    var byte = parseInt(string.substr(i * 2, 2), 16)
//    assert(!isNaN(byte), 'Invalid hex string')
//    buf[offset + i] = byte
//  }
//  return i
//}

//function utf8Write (buf, string, offset, length) {
//  var charsWritten = blitBuffer(utf8ToBytes(string), buf, offset, length)
//  return charsWritten
//}

//function asciiWrite (buf, string, offset, length) {
//  var charsWritten = blitBuffer(asciiToBytes(string), buf, offset, length)
//  return charsWritten
//}

//function binaryWrite (buf, string, offset, length) {
//  return asciiWrite(buf, string, offset, length)
//}

//function base64Write (buf, string, offset, length) {
//  var charsWritten = blitBuffer(base64ToBytes(string), buf, offset, length)
//  return charsWritten
//}

//function utf16leWrite (buf, string, offset, length) {
//  var charsWritten = blitBuffer(utf16leToBytes(string), buf, offset, length)
//  return charsWritten
//}

//Buffer.prototype.write = function (string, offset, length, encoding) {
//  // Support both (string, offset, length, encoding)
//  // and the legacy (string, encoding, offset, length)
//  if (isFinite(offset)) {
//    if (!isFinite(length)) {
//      encoding = length
//      length = undefined
//    }
//  } else {  // legacy
//    var swap = encoding
//    encoding = offset
//    offset = length
//    length = swap
//  }

//  offset = Number(offset) || 0
//  var remaining = this.length - offset
//  if (!length) {
//    length = remaining
//  } else {
//    length = Number(length)
//    if (length > remaining) {
//      length = remaining
//    }
//  }
//  encoding = String(encoding || 'utf8').toLowerCase()

//  var ret
//  switch (encoding) {
//    case 'hex':
//      ret = hexWrite(this, string, offset, length)
//      break
//    case 'utf8':
//    case 'utf-8':
//      ret = utf8Write(this, string, offset, length)
//      break
//    case 'ascii':
//      ret = asciiWrite(this, string, offset, length)
//      break
//    case 'binary':
//      ret = binaryWrite(this, string, offset, length)
//      break
//    case 'base64':
//      ret = base64Write(this, string, offset, length)
//      break
//    case 'ucs2':
//    case 'ucs-2':
//    case 'utf16le':
//    case 'utf-16le':
//      ret = utf16leWrite(this, string, offset, length)
//      break
//    default:
//      throw new Error('Unknown encoding')
//  }
//  return ret
//}

//Buffer.prototype.toString = function (encoding, start, end) {
//  var self = this

//  encoding = String(encoding || 'utf8').toLowerCase()
//  start = Number(start) || 0
//  end = (end === undefined) ? self.length : Number(end)

//  // Fastpath empty strings
//  if (end === start)
//    return ''

//  var ret
//  switch (encoding) {
//    case 'hex':
//      ret = hexSlice(self, start, end)
//      break
//    case 'utf8':
//    case 'utf-8':
//      ret = utf8Slice(self, start, end)
//      break
//    case 'ascii':
//      ret = asciiSlice(self, start, end)
//      break
//    case 'binary':
//      ret = binarySlice(self, start, end)
//      break
//    case 'base64':
//      ret = base64Slice(self, start, end)
//      break
//    case 'ucs2':
//    case 'ucs-2':
//    case 'utf16le':
//    case 'utf-16le':
//      ret = utf16leSlice(self, start, end)
//      break
//    default:
//      throw new Error('Unknown encoding')
//  }
//  return ret
//}

//Buffer.prototype.toJSON = function () {
//  return {
//    type: 'Buffer',
//    data: Array.prototype.slice.call(this._arr || this, 0)
//  }
//}

//Buffer.prototype.equals = function (b) {
//  assert(Buffer.isBuffer(b), 'Argument must be a Buffer')
//  return Buffer.compare(this, b) === 0
//}

//Buffer.prototype.compare = function (b) {
//  assert(Buffer.isBuffer(b), 'Argument must be a Buffer')
//  return Buffer.compare(this, b)
//}

//// copy(targetBuffer, targetStart=0, sourceStart=0, sourceEnd=buffer.length)
//Buffer.prototype.copy = function (target, target_start, start, end) {
//  var source = this

//  if (!start) start = 0
//  if (!end && end !== 0) end = this.length
//  if (!target_start) target_start = 0

//  // Copy 0 bytes; we're done
//  if (end === start) return
//  if (target.length === 0 || source.length === 0) return

//  // Fatal error conditions
//  assert(end >= start, 'sourceEnd < sourceStart')
//  assert(target_start >= 0 && target_start < target.length,
//      'targetStart out of bounds')
//  assert(start >= 0 && start < source.length, 'sourceStart out of bounds')
//  assert(end >= 0 && end <= source.length, 'sourceEnd out of bounds')

//  // Are we oob?
//  if (end > this.length)
//    end = this.length
//  if (target.length - target_start < end - start)
//    end = target.length - target_start + start

//  var len = end - start

//  if (len < 100 || !TYPED_ARRAY_SUPPORT) {
//    for (var i = 0; i < len; i++) {
//      target[i + target_start] = this[i + start]
//    }
//  } else {
//    target._set(this.subarray(start, start + len), target_start)
//  }
//}

//function base64Slice (buf, start, end) {
//  if (start === 0 && end === buf.length) {
//    return base64.fromByteArray(buf)
//  } else {
//    return base64.fromByteArray(buf.slice(start, end))
//  }
//}

//function utf8Slice (buf, start, end) {
//  var res = ''
//  var tmp = ''
//  end = Math.min(buf.length, end)

//  for (var i = start; i < end; i++) {
//    if (buf[i] <= 0x7F) {
//      res += decodeUtf8Char(tmp) + String.fromCharCode(buf[i])
//      tmp = ''
//    } else {
//      tmp += '%' + buf[i].toString(16)
//    }
//  }

//  return res + decodeUtf8Char(tmp)
//}

//function asciiSlice (buf, start, end) {
//  var ret = ''
//  end = Math.min(buf.length, end)

//  for (var i = start; i < end; i++) {
//    ret += String.fromCharCode(buf[i])
//  }
//  return ret
//}

//function binarySlice (buf, start, end) {
//  return asciiSlice(buf, start, end)
//}

//function hexSlice (buf, start, end) {
//  var len = buf.length

//  if (!start || start < 0) start = 0
//  if (!end || end < 0 || end > len) end = len

//  var out = ''
//  for (var i = start; i < end; i++) {
//    out += toHex(buf[i])
//  }
//  return out
//}

//function utf16leSlice (buf, start, end) {
//  var bytes = buf.slice(start, end)
//  var res = ''
//  for (var i = 0; i < bytes.length; i += 2) {
//    res += String.fromCharCode(bytes[i] + bytes[i + 1] * 256)
//  }
//  return res
//}

//Buffer.prototype.slice = function (start, end) {
//  var len = this.length
//  start = ~~start
//  end = end === undefined ? len : ~~end

//  if (start < 0) {
//    start += len;
//    if (start < 0)
//      start = 0
//  } else if (start > len) {
//    start = len
//  }

//  if (end < 0) {
//    end += len
//    if (end < 0)
//      end = 0
//  } else if (end > len) {
//    end = len
//  }

//  if (end < start)
//    end = start

//  if (TYPED_ARRAY_SUPPORT) {
//    return Buffer._augment(this.subarray(start, end))
//  } else {
//    var sliceLen = end - start
//    var newBuf = new Buffer(sliceLen, undefined, true)
//    for (var i = 0; i < sliceLen; i++) {
//      newBuf[i] = this[i + start]
//    }
//    return newBuf
//  }
//}

//// `get` will be removed in Node 0.13+
//Buffer.prototype.get = function (offset) {
//  console.log('.get() is deprecated. Access using array indexes instead.')
//  return this.readUInt8(offset)
//}

//// `set` will be removed in Node 0.13+
//Buffer.prototype.set = function (v, offset) {
//  console.log('.set() is deprecated. Access using array indexes instead.')
//  return this.writeUInt8(v, offset)
//}

//Buffer.prototype.readUInt8 = function (offset, noAssert) {
//  if (!noAssert) {
//    assert(offset !== undefined && offset !== null, 'missing offset')
//    assert(offset < this.length, 'Trying to read beyond buffer length')
//  }

//  if (offset >= this.length)
//    return

//  return this[offset]
//}

//function readUInt16 (buf, offset, littleEndian, noAssert) {
//  if (!noAssert) {
//    assert(typeof littleEndian === 'boolean', 'missing or invalid endian')
//    assert(offset !== undefined && offset !== null, 'missing offset')
//    assert(offset + 1 < buf.length, 'Trying to read beyond buffer length')
//  }

//  var len = buf.length
//  if (offset >= len)
//    return

//  var val
//  if (littleEndian) {
//    val = buf[offset]
//    if (offset + 1 < len)
//      val |= buf[offset + 1] << 8
//  } else {
//    val = buf[offset] << 8
//    if (offset + 1 < len)
//      val |= buf[offset + 1]
//  }
//  return val
//}

//Buffer.prototype.readUInt16LE = function (offset, noAssert) {
//  return readUInt16(this, offset, true, noAssert)
//}

//Buffer.prototype.readUInt16BE = function (offset, noAssert) {
//  return readUInt16(this, offset, false, noAssert)
//}

//function readUInt32 (buf, offset, littleEndian, noAssert) {
//  if (!noAssert) {
//    assert(typeof littleEndian === 'boolean', 'missing or invalid endian')
//    assert(offset !== undefined && offset !== null, 'missing offset')
//    assert(offset + 3 < buf.length, 'Trying to read beyond buffer length')
//  }

//  var len = buf.length
//  if (offset >= len)
//    return

//  var val
//  if (littleEndian) {
//    if (offset + 2 < len)
//      val = buf[offset + 2] << 16
//    if (offset + 1 < len)
//      val |= buf[offset + 1] << 8
//    val |= buf[offset]
//    if (offset + 3 < len)
//      val = val + (buf[offset + 3] << 24 >>> 0)
//  } else {
//    if (offset + 1 < len)
//      val = buf[offset + 1] << 16
//    if (offset + 2 < len)
//      val |= buf[offset + 2] << 8
//    if (offset + 3 < len)
//      val |= buf[offset + 3]
//    val = val + (buf[offset] << 24 >>> 0)
//  }
//  return val
//}

//Buffer.prototype.readUInt32LE = function (offset, noAssert) {
//  return readUInt32(this, offset, true, noAssert)
//}

//Buffer.prototype.readUInt32BE = function (offset, noAssert) {
//  return readUInt32(this, offset, false, noAssert)
//}

//Buffer.prototype.readInt8 = function (offset, noAssert) {
//  if (!noAssert) {
//    assert(offset !== undefined && offset !== null,
//        'missing offset')
//    assert(offset < this.length, 'Trying to read beyond buffer length')
//  }

//  if (offset >= this.length)
//    return

//  var neg = this[offset] & 0x80
//  if (neg)
//    return (0xff - this[offset] + 1) * -1
//  else
//    return this[offset]
//}

//function readInt16 (buf, offset, littleEndian, noAssert) {
//  if (!noAssert) {
//    assert(typeof littleEndian === 'boolean', 'missing or invalid endian')
//    assert(offset !== undefined && offset !== null, 'missing offset')
//    assert(offset + 1 < buf.length, 'Trying to read beyond buffer length')
//  }

//  var len = buf.length
//  if (offset >= len)
//    return

//  var val = readUInt16(buf, offset, littleEndian, true)
//  var neg = val & 0x8000
//  if (neg)
//    return (0xffff - val + 1) * -1
//  else
//    return val
//}

//Buffer.prototype.readInt16LE = function (offset, noAssert) {
//  return readInt16(this, offset, true, noAssert)
//}

//Buffer.prototype.readInt16BE = function (offset, noAssert) {
//  return readInt16(this, offset, false, noAssert)
//}

//function readInt32 (buf, offset, littleEndian, noAssert) {
//  if (!noAssert) {
//    assert(typeof littleEndian === 'boolean', 'missing or invalid endian')
//    assert(offset !== undefined && offset !== null, 'missing offset')
//    assert(offset + 3 < buf.length, 'Trying to read beyond buffer length')
//  }

//  var len = buf.length
//  if (offset >= len)
//    return

//  var val = readUInt32(buf, offset, littleEndian, true)
//  var neg = val & 0x80000000
//  if (neg)
//    return (0xffffffff - val + 1) * -1
//  else
//    return val
//}

//Buffer.prototype.readInt32LE = function (offset, noAssert) {
//  return readInt32(this, offset, true, noAssert)
//}

//Buffer.prototype.readInt32BE = function (offset, noAssert) {
//  return readInt32(this, offset, false, noAssert)
//}

//function readFloat (buf, offset, littleEndian, noAssert) {
//  if (!noAssert) {
//    assert(typeof littleEndian === 'boolean', 'missing or invalid endian')
//    assert(offset + 3 < buf.length, 'Trying to read beyond buffer length')
//  }

//  return ieee754.read(buf, offset, littleEndian, 23, 4)
//}

//Buffer.prototype.readFloatLE = function (offset, noAssert) {
//  return readFloat(this, offset, true, noAssert)
//}

//Buffer.prototype.readFloatBE = function (offset, noAssert) {
//  return readFloat(this, offset, false, noAssert)
//}

//function readDouble (buf, offset, littleEndian, noAssert) {
//  if (!noAssert) {
//    assert(typeof littleEndian === 'boolean', 'missing or invalid endian')
//    assert(offset + 7 < buf.length, 'Trying to read beyond buffer length')
//  }

//  return ieee754.read(buf, offset, littleEndian, 52, 8)
//}

//Buffer.prototype.readDoubleLE = function (offset, noAssert) {
//  return readDouble(this, offset, true, noAssert)
//}

//Buffer.prototype.readDoubleBE = function (offset, noAssert) {
//  return readDouble(this, offset, false, noAssert)
//}

//Buffer.prototype.writeUInt8 = function (value, offset, noAssert) {
//  if (!noAssert) {
//    assert(value !== undefined && value !== null, 'missing value')
//    assert(offset !== undefined && offset !== null, 'missing offset')
//    assert(offset < this.length, 'trying to write beyond buffer length')
//    verifuint(value, 0xff)
//  }

//  if (offset >= this.length) return

//  this[offset] = value
//  return offset + 1
//}

//function writeUInt16 (buf, value, offset, littleEndian, noAssert) {
//  if (!noAssert) {
//    assert(value !== undefined && value !== null, 'missing value')
//    assert(typeof littleEndian === 'boolean', 'missing or invalid endian')
//    assert(offset !== undefined && offset !== null, 'missing offset')
//    assert(offset + 1 < buf.length, 'trying to write beyond buffer length')
//    verifuint(value, 0xffff)
//  }

//  var len = buf.length
//  if (offset >= len)
//    return

//  for (var i = 0, j = Math.min(len - offset, 2); i < j; i++) {
//    buf[offset + i] =
//        (value & (0xff << (8 * (littleEndian ? i : 1 - i)))) >>>
//            (littleEndian ? i : 1 - i) * 8
//  }
//  return offset + 2
//}

//Buffer.prototype.writeUInt16LE = function (value, offset, noAssert) {
//  return writeUInt16(this, value, offset, true, noAssert)
//}

//Buffer.prototype.writeUInt16BE = function (value, offset, noAssert) {
//  return writeUInt16(this, value, offset, false, noAssert)
//}

//function writeUInt32 (buf, value, offset, littleEndian, noAssert) {
//  if (!noAssert) {
//    assert(value !== undefined && value !== null, 'missing value')
//    assert(typeof littleEndian === 'boolean', 'missing or invalid endian')
//    assert(offset !== undefined && offset !== null, 'missing offset')
//    assert(offset + 3 < buf.length, 'trying to write beyond buffer length')
//    verifuint(value, 0xffffffff)
//  }

//  var len = buf.length
//  if (offset >= len)
//    return

//  for (var i = 0, j = Math.min(len - offset, 4); i < j; i++) {
//    buf[offset + i] =
//        (value >>> (littleEndian ? i : 3 - i) * 8) & 0xff
//  }
//  return offset + 4
//}

//Buffer.prototype.writeUInt32LE = function (value, offset, noAssert) {
//  return writeUInt32(this, value, offset, true, noAssert)
//}

//Buffer.prototype.writeUInt32BE = function (value, offset, noAssert) {
//  return writeUInt32(this, value, offset, false, noAssert)
//}

//Buffer.prototype.writeInt8 = function (value, offset, noAssert) {
//  if (!noAssert) {
//    assert(value !== undefined && value !== null, 'missing value')
//    assert(offset !== undefined && offset !== null, 'missing offset')
//    assert(offset < this.length, 'Trying to write beyond buffer length')
//    verifsint(value, 0x7f, -0x80)
//  }

//  if (offset >= this.length)
//    return

//  if (value >= 0)
//    this.writeUInt8(value, offset, noAssert)
//  else
//    this.writeUInt8(0xff + value + 1, offset, noAssert)
//  return offset + 1
//}

//function writeInt16 (buf, value, offset, littleEndian, noAssert) {
//  if (!noAssert) {
//    assert(value !== undefined && value !== null, 'missing value')
//    assert(typeof littleEndian === 'boolean', 'missing or invalid endian')
//    assert(offset !== undefined && offset !== null, 'missing offset')
//    assert(offset + 1 < buf.length, 'Trying to write beyond buffer length')
//    verifsint(value, 0x7fff, -0x8000)
//  }

//  var len = buf.length
//  if (offset >= len)
//    return

//  if (value >= 0)
//    writeUInt16(buf, value, offset, littleEndian, noAssert)
//  else
//    writeUInt16(buf, 0xffff + value + 1, offset, littleEndian, noAssert)
//  return offset + 2
//}

//Buffer.prototype.writeInt16LE = function (value, offset, noAssert) {
//  return writeInt16(this, value, offset, true, noAssert)
//}

//Buffer.prototype.writeInt16BE = function (value, offset, noAssert) {
//  return writeInt16(this, value, offset, false, noAssert)
//}

//function writeInt32 (buf, value, offset, littleEndian, noAssert) {
//  if (!noAssert) {
//    assert(value !== undefined && value !== null, 'missing value')
//    assert(typeof littleEndian === 'boolean', 'missing or invalid endian')
//    assert(offset !== undefined && offset !== null, 'missing offset')
//    assert(offset + 3 < buf.length, 'Trying to write beyond buffer length')
//    verifsint(value, 0x7fffffff, -0x80000000)
//  }

//  var len = buf.length
//  if (offset >= len)
//    return

//  if (value >= 0)
//    writeUInt32(buf, value, offset, littleEndian, noAssert)
//  else
//    writeUInt32(buf, 0xffffffff + value + 1, offset, littleEndian, noAssert)
//  return offset + 4
//}

//Buffer.prototype.writeInt32LE = function (value, offset, noAssert) {
//  return writeInt32(this, value, offset, true, noAssert)
//}

//Buffer.prototype.writeInt32BE = function (value, offset, noAssert) {
//  return writeInt32(this, value, offset, false, noAssert)
//}

//function writeFloat (buf, value, offset, littleEndian, noAssert) {
//  if (!noAssert) {
//    assert(value !== undefined && value !== null, 'missing value')
//    assert(typeof littleEndian === 'boolean', 'missing or invalid endian')
//    assert(offset !== undefined && offset !== null, 'missing offset')
//    assert(offset + 3 < buf.length, 'Trying to write beyond buffer length')
//    verifIEEE754(value, 3.4028234663852886e+38, -3.4028234663852886e+38)
//  }

//  var len = buf.length
//  if (offset >= len)
//    return

//  ieee754.write(buf, value, offset, littleEndian, 23, 4)
//  return offset + 4
//}

//Buffer.prototype.writeFloatLE = function (value, offset, noAssert) {
//  return writeFloat(this, value, offset, true, noAssert)
//}

//Buffer.prototype.writeFloatBE = function (value, offset, noAssert) {
//  return writeFloat(this, value, offset, false, noAssert)
//}

//function writeDouble (buf, value, offset, littleEndian, noAssert) {
//  if (!noAssert) {
//    assert(value !== undefined && value !== null, 'missing value')
//    assert(typeof littleEndian === 'boolean', 'missing or invalid endian')
//    assert(offset !== undefined && offset !== null, 'missing offset')
//    assert(offset + 7 < buf.length,
//        'Trying to write beyond buffer length')
//    verifIEEE754(value, 1.7976931348623157E+308, -1.7976931348623157E+308)
//  }

//  var len = buf.length
//  if (offset >= len)
//    return

//  ieee754.write(buf, value, offset, littleEndian, 52, 8)
//  return offset + 8
//}

//Buffer.prototype.writeDoubleLE = function (value, offset, noAssert) {
//  return writeDouble(this, value, offset, true, noAssert)
//}

//Buffer.prototype.writeDoubleBE = function (value, offset, noAssert) {
//  return writeDouble(this, value, offset, false, noAssert)
//}

//// fill(value, start=0, end=buffer.length)
//Buffer.prototype.fill = function (value, start, end) {
//  if (!value) value = 0
//  if (!start) start = 0
//  if (!end) end = this.length

//  assert(end >= start, 'end < start')

//  // Fill 0 bytes; we're done
//  if (end === start) return
//  if (this.length === 0) return

//  assert(start >= 0 && start < this.length, 'start out of bounds')
//  assert(end >= 0 && end <= this.length, 'end out of bounds')

//  var i
//  if (typeof value === 'number') {
//    for (i = start; i < end; i++) {
//      this[i] = value
//    }
//  } else {
//    var bytes = utf8ToBytes(value.toString())
//    var len = bytes.length
//    for (i = start; i < end; i++) {
//      this[i] = bytes[i % len]
//    }
//  }

//  return this
//}

//Buffer.prototype.inspect = function () {
//  var out = []
//  var len = this.length
//  for (var i = 0; i < len; i++) {
//    out[i] = toHex(this[i])
//    if (i === exports.INSPECT_MAX_BYTES) {
//      out[i + 1] = '...'
//      break
//    }
//  }
//  return '<Buffer ' + out.join(' ') + '>'
//}

///**
// * Creates a new `ArrayBuffer` with the *copied* memory of the buffer instance.
// * Added in Node 0.12. Only available in browsers that support ArrayBuffer.
// */
//Buffer.prototype.toArrayBuffer = function () {
//  if (typeof Uint8Array !== 'undefined') {
//    if (TYPED_ARRAY_SUPPORT) {
//      return (new Buffer(this)).buffer
//    } else {
//      var buf = new Uint8Array(this.length)
//      for (var i = 0, len = buf.length; i < len; i += 1) {
//        buf[i] = this[i]
//      }
//      return buf.buffer
//    }
//  } else {
//    throw new Error('Buffer.toArrayBuffer not supported in this browser')
//  }
//}

//// HELPER FUNCTIONS
//// ================

//var BP = Buffer.prototype

///**
// * Augment a Uint8Array *instance* (not the Uint8Array class!) with Buffer methods
// */
//Buffer._augment = function (arr) {
//  arr._isBuffer = true

//  // save reference to original Uint8Array get/set methods before overwriting
//  arr._get = arr.get
//  arr._set = arr.set

//  // deprecated, will be removed in node 0.13+
//  arr.get = BP.get
//  arr.set = BP.set

//  arr.write = BP.write
//  arr.toString = BP.toString
//  arr.toLocaleString = BP.toString
//  arr.toJSON = BP.toJSON
//  arr.equals = BP.equals
//  arr.compare = BP.compare
//  arr.copy = BP.copy
//  arr.slice = BP.slice
//  arr.readUInt8 = BP.readUInt8
//  arr.readUInt16LE = BP.readUInt16LE
//  arr.readUInt16BE = BP.readUInt16BE
//  arr.readUInt32LE = BP.readUInt32LE
//  arr.readUInt32BE = BP.readUInt32BE
//  arr.readInt8 = BP.readInt8
//  arr.readInt16LE = BP.readInt16LE
//  arr.readInt16BE = BP.readInt16BE
//  arr.readInt32LE = BP.readInt32LE
//  arr.readInt32BE = BP.readInt32BE
//  arr.readFloatLE = BP.readFloatLE
//  arr.readFloatBE = BP.readFloatBE
//  arr.readDoubleLE = BP.readDoubleLE
//  arr.readDoubleBE = BP.readDoubleBE
//  arr.writeUInt8 = BP.writeUInt8
//  arr.writeUInt16LE = BP.writeUInt16LE
//  arr.writeUInt16BE = BP.writeUInt16BE
//  arr.writeUInt32LE = BP.writeUInt32LE
//  arr.writeUInt32BE = BP.writeUInt32BE
//  arr.writeInt8 = BP.writeInt8
//  arr.writeInt16LE = BP.writeInt16LE
//  arr.writeInt16BE = BP.writeInt16BE
//  arr.writeInt32LE = BP.writeInt32LE
//  arr.writeInt32BE = BP.writeInt32BE
//  arr.writeFloatLE = BP.writeFloatLE
//  arr.writeFloatBE = BP.writeFloatBE
//  arr.writeDoubleLE = BP.writeDoubleLE
//  arr.writeDoubleBE = BP.writeDoubleBE
//  arr.fill = BP.fill
//  arr.inspect = BP.inspect
//  arr.toArrayBuffer = BP.toArrayBuffer

//  return arr
//}

//var INVALID_BASE64_RE = /[^+\/0-9A-z]/g

//function base64clean (str) {
//  // Node strips out invalid characters like \n and \t from the string, base64-js does not
//  str = stringtrim(str).replace(INVALID_BASE64_RE, '')
//  // Node allows for non-padded base64 strings (missing trailing ===), base64-js does not
//  while (str.length % 4 !== 0) {
//    str = str + '='
//  }
//  return str
//}

//function stringtrim (str) {
//  if (str.trim) return str.trim()
//  return str.replace(/^\s+|\s+$/g, '')
//}

//function isArray (subject) {
//  return (Array.isArray || function (subject) {
//    return Object.prototype.toString.call(subject) === '[object Array]'
//  })(subject)
//}

//function isArrayish (subject) {
//  return isArray(subject) || Buffer.isBuffer(subject) ||
//      subject && typeof subject === 'object' &&
//      typeof subject.length === 'number'
//}

//function toHex (n) {
//  if (n < 16) return '0' + n.toString(16)
//  return n.toString(16)
//}

//function utf8ToBytes (str) {
//  var byteArray = []
//  for (var i = 0; i < str.length; i++) {
//    var b = str.charCodeAt(i)
//    if (b <= 0x7F) {
//      byteArray.push(b)
//    } else {
//      var start = i
//      if (b >= 0xD800 && b <= 0xDFFF) i++
//      var h = encodeURIComponent(str.slice(start, i+1)).substr(1).split('%')
//      for (var j = 0; j < h.length; j++) {
//        byteArray.push(parseInt(h[j], 16))
//      }
//    }
//  }
//  return byteArray
//}

//function asciiToBytes (str) {
//  var byteArray = []
//  for (var i = 0; i < str.length; i++) {
//    // Node's code seems to be doing this and not & 0x7F..
//    byteArray.push(str.charCodeAt(i) & 0xFF)
//  }
//  return byteArray
//}

//function utf16leToBytes (str) {
//  var c, hi, lo
//  var byteArray = []
//  for (var i = 0; i < str.length; i++) {
//    c = str.charCodeAt(i)
//    hi = c >> 8
//    lo = c % 256
//    byteArray.push(lo)
//    byteArray.push(hi)
//  }

//  return byteArray
//}

//function base64ToBytes (str) {
//  return base64.toByteArray(str)
//}

//function blitBuffer (src, dst, offset, length) {
//  for (var i = 0; i < length; i++) {
//    if ((i + offset >= dst.length) || (i >= src.length))
//      break
//    dst[i + offset] = src[i]
//  }
//  return i
//}

//function decodeUtf8Char (str) {
//  try {
//    return decodeURIComponent(str)
//  } catch (err) {
//    return String.fromCharCode(0xFFFD) // UTF 8 invalid char
//  }
//}

///*
// * We have to make sure that the value is a valid integer. This means that it
// * is non-negative. It has no fractional component and that it does not
// * exceed the maximum allowed value.
// */
//function verifuint (value, max) {
//  assert(typeof value === 'number', 'cannot write a non-number as a number')
//  assert(value >= 0, 'specified a negative value for writing an unsigned value')
//  assert(value <= max, 'value is larger than maximum value for type')
//  assert(Math.floor(value) === value, 'value has a fractional component')
//}

//function verifsint (value, max, min) {
//  assert(typeof value === 'number', 'cannot write a non-number as a number')
//  assert(value <= max, 'value larger than maximum allowed value')
//  assert(value >= min, 'value smaller than minimum allowed value')
//  assert(Math.floor(value) === value, 'value has a fractional component')
//}

//function verifIEEE754 (value, max, min) {
//  assert(typeof value === 'number', 'cannot write a non-number as a number')
//  assert(value <= max, 'value larger than maximum allowed value')
//  assert(value >= min, 'value smaller than minimum allowed value')
//}

//function assert (test, message) {
//  if (!test) throw new Error(message || 'Failed assertion')
//}

//},{"base64-js":4,"ieee754":5}],4:[function(require,module,exports){
//var lookup = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/';

//;(function (exports) {
//	'use strict';

//  var Arr = (typeof Uint8Array !== 'undefined')
//    ? Uint8Array
//    : Array

//	var PLUS   = '+'.charCodeAt(0)
//	var SLASH  = '/'.charCodeAt(0)
//	var NUMBER = '0'.charCodeAt(0)
//	var LOWER  = 'a'.charCodeAt(0)
//	var UPPER  = 'A'.charCodeAt(0)

//	function decode (elt) {
//		var code = elt.charCodeAt(0)
//		if (code === PLUS)
//			return 62 // '+'
//		if (code === SLASH)
//			return 63 // '/'
//		if (code < NUMBER)
//			return -1 //no match
//		if (code < NUMBER + 10)
//			return code - NUMBER + 26 + 26
//		if (code < UPPER + 26)
//			return code - UPPER
//		if (code < LOWER + 26)
//			return code - LOWER + 26
//	}

//	function b64ToByteArray (b64) {
//		var i, j, l, tmp, placeHolders, arr

//		if (b64.length % 4 > 0) {
//			throw new Error('Invalid string. Length must be a multiple of 4')
//		}

//		// the number of equal signs (place holders)
//		// if there are two placeholders, than the two characters before it
//		// represent one byte
//		// if there is only one, then the three characters before it represent 2 bytes
//		// this is just a cheap hack to not do indexOf twice
//		var len = b64.length
//		placeHolders = '=' === b64.charAt(len - 2) ? 2 : '=' === b64.charAt(len - 1) ? 1 : 0

//		// base64 is 4/3 + up to two characters of the original data
//		arr = new Arr(b64.length * 3 / 4 - placeHolders)

//		// if there are placeholders, only get up to the last complete 4 chars
//		l = placeHolders > 0 ? b64.length - 4 : b64.length

//		var L = 0

//		function push (v) {
//			arr[L++] = v
//		}

//		for (i = 0, j = 0; i < l; i += 4, j += 3) {
//			tmp = (decode(b64.charAt(i)) << 18) | (decode(b64.charAt(i + 1)) << 12) | (decode(b64.charAt(i + 2)) << 6) | decode(b64.charAt(i + 3))
//			push((tmp & 0xFF0000) >> 16)
//			push((tmp & 0xFF00) >> 8)
//			push(tmp & 0xFF)
//		}

//		if (placeHolders === 2) {
//			tmp = (decode(b64.charAt(i)) << 2) | (decode(b64.charAt(i + 1)) >> 4)
//			push(tmp & 0xFF)
//		} else if (placeHolders === 1) {
//			tmp = (decode(b64.charAt(i)) << 10) | (decode(b64.charAt(i + 1)) << 4) | (decode(b64.charAt(i + 2)) >> 2)
//			push((tmp >> 8) & 0xFF)
//			push(tmp & 0xFF)
//		}

//		return arr
//	}

//	function uint8ToBase64 (uint8) {
//		var i,
//			extraBytes = uint8.length % 3, // if we have 1 byte left, pad 2 bytes
//			output = "",
//			temp, length

//		function encode (num) {
//			return lookup.charAt(num)
//		}

//		function tripletToBase64 (num) {
//			return encode(num >> 18 & 0x3F) + encode(num >> 12 & 0x3F) + encode(num >> 6 & 0x3F) + encode(num & 0x3F)
//		}

//		// go through the array every three bytes, we'll deal with trailing stuff later
//		for (i = 0, length = uint8.length - extraBytes; i < length; i += 3) {
//			temp = (uint8[i] << 16) + (uint8[i + 1] << 8) + (uint8[i + 2])
//			output += tripletToBase64(temp)
//		}

//		// pad the end with zeros, but make sure to not forget the extra bytes
//		switch (extraBytes) {
//			case 1:
//				temp = uint8[uint8.length - 1]
//				output += encode(temp >> 2)
//				output += encode((temp << 4) & 0x3F)
//				output += '=='
//				break
//			case 2:
//				temp = (uint8[uint8.length - 2] << 8) + (uint8[uint8.length - 1])
//				output += encode(temp >> 10)
//				output += encode((temp >> 4) & 0x3F)
//				output += encode((temp << 2) & 0x3F)
//				output += '='
//				break
//		}

//		return output
//	}

//	exports.toByteArray = b64ToByteArray
//	exports.fromByteArray = uint8ToBase64
//}(typeof exports === 'undefined' ? (this.base64js = {}) : exports))

//},{}],5:[function(require,module,exports){
//exports.read = function(buffer, offset, isLE, mLen, nBytes) {
//  var e, m,
//      eLen = nBytes * 8 - mLen - 1,
//      eMax = (1 << eLen) - 1,
//      eBias = eMax >> 1,
//      nBits = -7,
//      i = isLE ? (nBytes - 1) : 0,
//      d = isLE ? -1 : 1,
//      s = buffer[offset + i];

//  i += d;

//  e = s & ((1 << (-nBits)) - 1);
//  s >>= (-nBits);
//  nBits += eLen;
//  for (; nBits > 0; e = e * 256 + buffer[offset + i], i += d, nBits -= 8);

//  m = e & ((1 << (-nBits)) - 1);
//  e >>= (-nBits);
//  nBits += mLen;
//  for (; nBits > 0; m = m * 256 + buffer[offset + i], i += d, nBits -= 8);

//  if (e === 0) {
//    e = 1 - eBias;
//  } else if (e === eMax) {
//    return m ? NaN : ((s ? -1 : 1) * Infinity);
//  } else {
//    m = m + Math.pow(2, mLen);
//    e = e - eBias;
//  }
//  return (s ? -1 : 1) * m * Math.pow(2, e - mLen);
//};

//exports.write = function(buffer, value, offset, isLE, mLen, nBytes) {
//  var e, m, c,
//      eLen = nBytes * 8 - mLen - 1,
//      eMax = (1 << eLen) - 1,
//      eBias = eMax >> 1,
//      rt = (mLen === 23 ? Math.pow(2, -24) - Math.pow(2, -77) : 0),
//      i = isLE ? 0 : (nBytes - 1),
//      d = isLE ? 1 : -1,
//      s = value < 0 || (value === 0 && 1 / value < 0) ? 1 : 0;

//  value = Math.abs(value);

//  if (isNaN(value) || value === Infinity) {
//    m = isNaN(value) ? 1 : 0;
//    e = eMax;
//  } else {
//    e = Math.floor(Math.log(value) / Math.LN2);
//    if (value * (c = Math.pow(2, -e)) < 1) {
//      e--;
//      c *= 2;
//    }
//    if (e + eBias >= 1) {
//      value += rt / c;
//    } else {
//      value += rt * Math.pow(2, 1 - eBias);
//    }
//    if (value * c >= 2) {
//      e++;
//      c /= 2;
//    }

//    if (e + eBias >= eMax) {
//      m = 0;
//      e = eMax;
//    } else if (e + eBias >= 1) {
//      m = (value * c - 1) * Math.pow(2, mLen);
//      e = e + eBias;
//    } else {
//      m = value * Math.pow(2, eBias - 1) * Math.pow(2, mLen);
//      e = 0;
//    }
//  }

//  for (; mLen >= 8; buffer[offset + i] = m & 0xff, i += d, m /= 256, mLen -= 8);

//  e = (e << mLen) | m;
//  eLen += mLen;
//  for (; eLen > 0; buffer[offset + i] = e & 0xff, i += d, e /= 256, eLen -= 8);

//  buffer[offset + i - d] |= s * 128;
//};

//},{}],6:[function(require,module,exports){
//(function (Buffer){
//var createHash = require('sha.js')

//var md5 = toConstructor(require('./md5'))
//var rmd160 = toConstructor(require('ripemd160'))

//function toConstructor (fn) {
//  return function () {
//    var buffers = []
//    var m= {
//      update: function (data, enc) {
//        if(!Buffer.isBuffer(data)) data = new Buffer(data, enc)
//        buffers.push(data)
//        return this
//      },
//      digest: function (enc) {
//        var buf = Buffer.concat(buffers)
//        var r = fn(buf)
//        buffers = null
//        return enc ? r.toString(enc) : r
//      }
//    }
//    return m
//  }
//}

//module.exports = function (alg) {
//  if('md5' === alg) return new md5()
//  if('rmd160' === alg) return new rmd160()
//  return createHash(alg)
//}

//}).call(this,require("buffer").Buffer)
//},{"./md5":10,"buffer":3,"ripemd160":11,"sha.js":13}],7:[function(require,module,exports){
//(function (Buffer){
//var createHash = require('./create-hash')

//var blocksize = 64
//var zeroBuffer = new Buffer(blocksize); zeroBuffer.fill(0)

//module.exports = Hmac

//function Hmac (alg, key) {
//  if(!(this instanceof Hmac)) return new Hmac(alg, key)
//  this._opad = opad
//  this._alg = alg

//  key = this._key = !Buffer.isBuffer(key) ? new Buffer(key) : key

//  if(key.length > blocksize) {
//    key = createHash(alg).update(key).digest()
//  } else if(key.length < blocksize) {
//    key = Buffer.concat([key, zeroBuffer], blocksize)
//  }

//  var ipad = this._ipad = new Buffer(blocksize)
//  var opad = this._opad = new Buffer(blocksize)

//  for(var i = 0; i < blocksize; i++) {
//    ipad[i] = key[i] ^ 0x36
//    opad[i] = key[i] ^ 0x5C
//  }

//  this._hash = createHash(alg).update(ipad)
//}

//Hmac.prototype.update = function (data, enc) {
//  this._hash.update(data, enc)
//  return this
//}

//Hmac.prototype.digest = function (enc) {
//  var h = this._hash.digest()
//  return createHash(this._alg).update(this._opad).update(h).digest(enc)
//}


//}).call(this,require("buffer").Buffer)
//},{"./create-hash":6,"buffer":3}],8:[function(require,module,exports){
//(function (Buffer){
//var intSize = 4;
//var zeroBuffer = new Buffer(intSize); zeroBuffer.fill(0);
//var chrsz = 8;

//function toArray(buf, bigEndian) {
//  if ((buf.length % intSize) !== 0) {
//    var len = buf.length + (intSize - (buf.length % intSize));
//    buf = Buffer.concat([buf, zeroBuffer], len);
//  }

//  var arr = [];
//  var fn = bigEndian ? buf.readInt32BE : buf.readInt32LE;
//  for (var i = 0; i < buf.length; i += intSize) {
//    arr.push(fn.call(buf, i));
//  }
//  return arr;
//}

//function toBuffer(arr, size, bigEndian) {
//  var buf = new Buffer(size);
//  var fn = bigEndian ? buf.writeInt32BE : buf.writeInt32LE;
//  for (var i = 0; i < arr.length; i++) {
//    fn.call(buf, arr[i], i * 4, true);
//  }
//  return buf;
//}

//function hash(buf, fn, hashSize, bigEndian) {
//  if (!Buffer.isBuffer(buf)) buf = new Buffer(buf);
//  var arr = fn(toArray(buf, bigEndian), buf.length * chrsz);
//  return toBuffer(arr, hashSize, bigEndian);
//}

//module.exports = { hash: hash };

//}).call(this,require("buffer").Buffer)
//},{"buffer":3}],9:[function(require,module,exports){
//(function (Buffer){
//var rng = require('./rng')

//function error () {
//  var m = [].slice.call(arguments).join(' ')
//  throw new Error([
//    m,
//    'we accept pull requests',
//    'http://github.com/dominictarr/crypto-browserify'
//    ].join('\n'))
//}

//exports.createHash = require('./create-hash')

//exports.createHmac = require('./create-hmac')

//exports.randomBytes = function(size, callback) {
//  if (callback && callback.call) {
//    try {
//      callback.call(this, undefined, new Buffer(rng(size)))
//    } catch (err) { callback(err) }
//  } else {
//    return new Buffer(rng(size))
//  }
//}

//function each(a, f) {
//  for(var i in a)
//    f(a[i], i)
//}

//exports.getHashes = function () {
//  return ['sha1', 'sha256', 'md5', 'rmd160']

//}

//var p = require('./pbkdf2')(exports.createHmac)
//exports.pbkdf2 = p.pbkdf2
//exports.pbkdf2Sync = p.pbkdf2Sync


//// the least I can do is make error messages for the rest of the node.js/crypto api.
//each(['createCredentials'
//, 'createCipher'
//, 'createCipheriv'
//, 'createDecipher'
//, 'createDecipheriv'
//, 'createSign'
//, 'createVerify'
//, 'createDiffieHellman'
//], function (name) {
//  exports[name] = function () {
//    error('sorry,', name, 'is not implemented yet')
//  }
//})

//}).call(this,require("buffer").Buffer)
//},{"./create-hash":6,"./create-hmac":7,"./pbkdf2":17,"./rng":18,"buffer":3}],10:[function(require,module,exports){
///*
// * A JavaScript implementation of the RSA Data Security, Inc. MD5 Message
// * Digest Algorithm, as defined in RFC 1321.
// * Version 2.1 Copyright (C) Paul Johnston 1999 - 2002.
// * Other contributors: Greg Holt, Andrew Kepert, Ydnar, Lostinet
// * Distributed under the BSD License
// * See http://pajhome.org.uk/crypt/md5 for more info.
// */

//var helpers = require('./helpers');

///*
// * Calculate the MD5 of an array of little-endian words, and a bit length
// */
//function core_md5(x, len)
//{
//  /* append padding */
//  x[len >> 5] |= 0x80 << ((len) % 32);
//  x[(((len + 64) >>> 9) << 4) + 14] = len;

//  var a =  1732584193;
//  var b = -271733879;
//  var c = -1732584194;
//  var d =  271733878;

//  for(var i = 0; i < x.length; i += 16)
//  {
//    var olda = a;
//    var oldb = b;
//    var oldc = c;
//    var oldd = d;

//    a = md5_ff(a, b, c, d, x[i+ 0], 7 , -680876936);
//    d = md5_ff(d, a, b, c, x[i+ 1], 12, -389564586);
//    c = md5_ff(c, d, a, b, x[i+ 2], 17,  606105819);
//    b = md5_ff(b, c, d, a, x[i+ 3], 22, -1044525330);
//    a = md5_ff(a, b, c, d, x[i+ 4], 7 , -176418897);
//    d = md5_ff(d, a, b, c, x[i+ 5], 12,  1200080426);
//    c = md5_ff(c, d, a, b, x[i+ 6], 17, -1473231341);
//    b = md5_ff(b, c, d, a, x[i+ 7], 22, -45705983);
//    a = md5_ff(a, b, c, d, x[i+ 8], 7 ,  1770035416);
//    d = md5_ff(d, a, b, c, x[i+ 9], 12, -1958414417);
//    c = md5_ff(c, d, a, b, x[i+10], 17, -42063);
//    b = md5_ff(b, c, d, a, x[i+11], 22, -1990404162);
//    a = md5_ff(a, b, c, d, x[i+12], 7 ,  1804603682);
//    d = md5_ff(d, a, b, c, x[i+13], 12, -40341101);
//    c = md5_ff(c, d, a, b, x[i+14], 17, -1502002290);
//    b = md5_ff(b, c, d, a, x[i+15], 22,  1236535329);

//    a = md5_gg(a, b, c, d, x[i+ 1], 5 , -165796510);
//    d = md5_gg(d, a, b, c, x[i+ 6], 9 , -1069501632);
//    c = md5_gg(c, d, a, b, x[i+11], 14,  643717713);
//    b = md5_gg(b, c, d, a, x[i+ 0], 20, -373897302);
//    a = md5_gg(a, b, c, d, x[i+ 5], 5 , -701558691);
//    d = md5_gg(d, a, b, c, x[i+10], 9 ,  38016083);
//    c = md5_gg(c, d, a, b, x[i+15], 14, -660478335);
//    b = md5_gg(b, c, d, a, x[i+ 4], 20, -405537848);
//    a = md5_gg(a, b, c, d, x[i+ 9], 5 ,  568446438);
//    d = md5_gg(d, a, b, c, x[i+14], 9 , -1019803690);
//    c = md5_gg(c, d, a, b, x[i+ 3], 14, -187363961);
//    b = md5_gg(b, c, d, a, x[i+ 8], 20,  1163531501);
//    a = md5_gg(a, b, c, d, x[i+13], 5 , -1444681467);
//    d = md5_gg(d, a, b, c, x[i+ 2], 9 , -51403784);
//    c = md5_gg(c, d, a, b, x[i+ 7], 14,  1735328473);
//    b = md5_gg(b, c, d, a, x[i+12], 20, -1926607734);

//    a = md5_hh(a, b, c, d, x[i+ 5], 4 , -378558);
//    d = md5_hh(d, a, b, c, x[i+ 8], 11, -2022574463);
//    c = md5_hh(c, d, a, b, x[i+11], 16,  1839030562);
//    b = md5_hh(b, c, d, a, x[i+14], 23, -35309556);
//    a = md5_hh(a, b, c, d, x[i+ 1], 4 , -1530992060);
//    d = md5_hh(d, a, b, c, x[i+ 4], 11,  1272893353);
//    c = md5_hh(c, d, a, b, x[i+ 7], 16, -155497632);
//    b = md5_hh(b, c, d, a, x[i+10], 23, -1094730640);
//    a = md5_hh(a, b, c, d, x[i+13], 4 ,  681279174);
//    d = md5_hh(d, a, b, c, x[i+ 0], 11, -358537222);
//    c = md5_hh(c, d, a, b, x[i+ 3], 16, -722521979);
//    b = md5_hh(b, c, d, a, x[i+ 6], 23,  76029189);
//    a = md5_hh(a, b, c, d, x[i+ 9], 4 , -640364487);
//    d = md5_hh(d, a, b, c, x[i+12], 11, -421815835);
//    c = md5_hh(c, d, a, b, x[i+15], 16,  530742520);
//    b = md5_hh(b, c, d, a, x[i+ 2], 23, -995338651);

//    a = md5_ii(a, b, c, d, x[i+ 0], 6 , -198630844);
//    d = md5_ii(d, a, b, c, x[i+ 7], 10,  1126891415);
//    c = md5_ii(c, d, a, b, x[i+14], 15, -1416354905);
//    b = md5_ii(b, c, d, a, x[i+ 5], 21, -57434055);
//    a = md5_ii(a, b, c, d, x[i+12], 6 ,  1700485571);
//    d = md5_ii(d, a, b, c, x[i+ 3], 10, -1894986606);
//    c = md5_ii(c, d, a, b, x[i+10], 15, -1051523);
//    b = md5_ii(b, c, d, a, x[i+ 1], 21, -2054922799);
//    a = md5_ii(a, b, c, d, x[i+ 8], 6 ,  1873313359);
//    d = md5_ii(d, a, b, c, x[i+15], 10, -30611744);
//    c = md5_ii(c, d, a, b, x[i+ 6], 15, -1560198380);
//    b = md5_ii(b, c, d, a, x[i+13], 21,  1309151649);
//    a = md5_ii(a, b, c, d, x[i+ 4], 6 , -145523070);
//    d = md5_ii(d, a, b, c, x[i+11], 10, -1120210379);
//    c = md5_ii(c, d, a, b, x[i+ 2], 15,  718787259);
//    b = md5_ii(b, c, d, a, x[i+ 9], 21, -343485551);

//    a = safe_add(a, olda);
//    b = safe_add(b, oldb);
//    c = safe_add(c, oldc);
//    d = safe_add(d, oldd);
//  }
//  return Array(a, b, c, d);

//}

///*
// * These functions implement the four basic operations the algorithm uses.
// */
//function md5_cmn(q, a, b, x, s, t)
//{
//  return safe_add(bit_rol(safe_add(safe_add(a, q), safe_add(x, t)), s),b);
//}
//function md5_ff(a, b, c, d, x, s, t)
//{
//  return md5_cmn((b & c) | ((~b) & d), a, b, x, s, t);
//}
//function md5_gg(a, b, c, d, x, s, t)
//{
//  return md5_cmn((b & d) | (c & (~d)), a, b, x, s, t);
//}
//function md5_hh(a, b, c, d, x, s, t)
//{
//  return md5_cmn(b ^ c ^ d, a, b, x, s, t);
//}
//function md5_ii(a, b, c, d, x, s, t)
//{
//  return md5_cmn(c ^ (b | (~d)), a, b, x, s, t);
//}

///*
// * Add integers, wrapping at 2^32. This uses 16-bit operations internally
// * to work around bugs in some JS interpreters.
// */
//function safe_add(x, y)
//{
//  var lsw = (x & 0xFFFF) + (y & 0xFFFF);
//  var msw = (x >> 16) + (y >> 16) + (lsw >> 16);
//  return (msw << 16) | (lsw & 0xFFFF);
//}

///*
// * Bitwise rotate a 32-bit number to the left.
// */
//function bit_rol(num, cnt)
//{
//  return (num << cnt) | (num >>> (32 - cnt));
//}

//module.exports = function md5(buf) {
//  return helpers.hash(buf, core_md5, 16);
//};

//},{"./helpers":8}],11:[function(require,module,exports){
//(function (Buffer){

//module.exports = ripemd160



///*
//CryptoJS v3.1.2
//code.google.com/p/crypto-js
//(c) 2009-2013 by Jeff Mott. All rights reserved.
//code.google.com/p/crypto-js/wiki/License
//*/
///** @preserve
//(c) 2012 by Cédric Mesnil. All rights reserved.

//Redistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met:

//    - Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer.
//    - Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution.

//THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
//*/

//// Constants table
//var zl = [
//    0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15,
//    7,  4, 13,  1, 10,  6, 15,  3, 12,  0,  9,  5,  2, 14, 11,  8,
//    3, 10, 14,  4,  9, 15,  8,  1,  2,  7,  0,  6, 13, 11,  5, 12,
//    1,  9, 11, 10,  0,  8, 12,  4, 13,  3,  7, 15, 14,  5,  6,  2,
//    4,  0,  5,  9,  7, 12,  2, 10, 14,  1,  3,  8, 11,  6, 15, 13];
//var zr = [
//    5, 14,  7,  0,  9,  2, 11,  4, 13,  6, 15,  8,  1, 10,  3, 12,
//    6, 11,  3,  7,  0, 13,  5, 10, 14, 15,  8, 12,  4,  9,  1,  2,
//    15,  5,  1,  3,  7, 14,  6,  9, 11,  8, 12,  2, 10,  0,  4, 13,
//    8,  6,  4,  1,  3, 11, 15,  0,  5, 12,  2, 13,  9,  7, 10, 14,
//    12, 15, 10,  4,  1,  5,  8,  7,  6,  2, 13, 14,  0,  3,  9, 11];
//var sl = [
//     11, 14, 15, 12,  5,  8,  7,  9, 11, 13, 14, 15,  6,  7,  9,  8,
//    7, 6,   8, 13, 11,  9,  7, 15,  7, 12, 15,  9, 11,  7, 13, 12,
//    11, 13,  6,  7, 14,  9, 13, 15, 14,  8, 13,  6,  5, 12,  7,  5,
//      11, 12, 14, 15, 14, 15,  9,  8,  9, 14,  5,  6,  8,  6,  5, 12,
//    9, 15,  5, 11,  6,  8, 13, 12,  5, 12, 13, 14, 11,  8,  5,  6 ];
//var sr = [
//    8,  9,  9, 11, 13, 15, 15,  5,  7,  7,  8, 11, 14, 14, 12,  6,
//    9, 13, 15,  7, 12,  8,  9, 11,  7,  7, 12,  7,  6, 15, 13, 11,
//    9,  7, 15, 11,  8,  6,  6, 14, 12, 13,  5, 14, 13, 13,  7,  5,
//    15,  5,  8, 11, 14, 14,  6, 14,  6,  9, 12,  9, 12,  5, 15,  8,
//    8,  5, 12,  9, 12,  5, 14,  6,  8, 13,  6,  5, 15, 13, 11, 11 ];

//var hl =  [ 0x00000000, 0x5A827999, 0x6ED9EBA1, 0x8F1BBCDC, 0xA953FD4E];
//var hr =  [ 0x50A28BE6, 0x5C4DD124, 0x6D703EF3, 0x7A6D76E9, 0x00000000];

//var bytesToWords = function (bytes) {
//  var words = [];
//  for (var i = 0, b = 0; i < bytes.length; i++, b += 8) {
//    words[b >>> 5] |= bytes[i] << (24 - b % 32);
//  }
//  return words;
//};

//var wordsToBytes = function (words) {
//  var bytes = [];
//  for (var b = 0; b < words.length * 32; b += 8) {
//    bytes.push((words[b >>> 5] >>> (24 - b % 32)) & 0xFF);
//  }
//  return bytes;
//};

//var processBlock = function (H, M, offset) {

//  // Swap endian
//  for (var i = 0; i < 16; i++) {
//    var offset_i = offset + i;
//    var M_offset_i = M[offset_i];

//    // Swap
//    M[offset_i] = (
//        (((M_offset_i << 8)  | (M_offset_i >>> 24)) & 0x00ff00ff) |
//        (((M_offset_i << 24) | (M_offset_i >>> 8))  & 0xff00ff00)
//    );
//  }

//  // Working variables
//  var al, bl, cl, dl, el;
//  var ar, br, cr, dr, er;

//  ar = al = H[0];
//  br = bl = H[1];
//  cr = cl = H[2];
//  dr = dl = H[3];
//  er = el = H[4];
//  // Computation
//  var t;
//  for (var i = 0; i < 80; i += 1) {
//    t = (al +  M[offset+zl[i]])|0;
//    if (i<16){
//        t +=  f1(bl,cl,dl) + hl[0];
//    } else if (i<32) {
//        t +=  f2(bl,cl,dl) + hl[1];
//    } else if (i<48) {
//        t +=  f3(bl,cl,dl) + hl[2];
//    } else if (i<64) {
//        t +=  f4(bl,cl,dl) + hl[3];
//    } else {// if (i<80) {
//        t +=  f5(bl,cl,dl) + hl[4];
//    }
//    t = t|0;
//    t =  rotl(t,sl[i]);
//    t = (t+el)|0;
//    al = el;
//    el = dl;
//    dl = rotl(cl, 10);
//    cl = bl;
//    bl = t;

//    t = (ar + M[offset+zr[i]])|0;
//    if (i<16){
//        t +=  f5(br,cr,dr) + hr[0];
//    } else if (i<32) {
//        t +=  f4(br,cr,dr) + hr[1];
//    } else if (i<48) {
//        t +=  f3(br,cr,dr) + hr[2];
//    } else if (i<64) {
//        t +=  f2(br,cr,dr) + hr[3];
//    } else {// if (i<80) {
//        t +=  f1(br,cr,dr) + hr[4];
//    }
//    t = t|0;
//    t =  rotl(t,sr[i]) ;
//    t = (t+er)|0;
//    ar = er;
//    er = dr;
//    dr = rotl(cr, 10);
//    cr = br;
//    br = t;
//  }
//  // Intermediate hash value
//  t    = (H[1] + cl + dr)|0;
//  H[1] = (H[2] + dl + er)|0;
//  H[2] = (H[3] + el + ar)|0;
//  H[3] = (H[4] + al + br)|0;
//  H[4] = (H[0] + bl + cr)|0;
//  H[0] =  t;
//};

//function f1(x, y, z) {
//  return ((x) ^ (y) ^ (z));
//}

//function f2(x, y, z) {
//  return (((x)&(y)) | ((~x)&(z)));
//}

//function f3(x, y, z) {
//  return (((x) | (~(y))) ^ (z));
//}

//function f4(x, y, z) {
//  return (((x) & (z)) | ((y)&(~(z))));
//}

//function f5(x, y, z) {
//  return ((x) ^ ((y) |(~(z))));
//}

//function rotl(x,n) {
//  return (x<<n) | (x>>>(32-n));
//}

//function ripemd160(message) {
//  var H = [0x67452301, 0xEFCDAB89, 0x98BADCFE, 0x10325476, 0xC3D2E1F0];

//  if (typeof message == 'string')
//    message = new Buffer(message, 'utf8');

//  var m = bytesToWords(message);

//  var nBitsLeft = message.length * 8;
//  var nBitsTotal = message.length * 8;

//  // Add padding
//  m[nBitsLeft >>> 5] |= 0x80 << (24 - nBitsLeft % 32);
//  m[(((nBitsLeft + 64) >>> 9) << 4) + 14] = (
//      (((nBitsTotal << 8)  | (nBitsTotal >>> 24)) & 0x00ff00ff) |
//      (((nBitsTotal << 24) | (nBitsTotal >>> 8))  & 0xff00ff00)
//  );

//  for (var i=0 ; i<m.length; i += 16) {
//    processBlock(H, m, i);
//  }

//  // Swap endian
//  for (var i = 0; i < 5; i++) {
//      // Shortcut
//    var H_i = H[i];

//    // Swap
//    H[i] = (((H_i << 8)  | (H_i >>> 24)) & 0x00ff00ff) |
//          (((H_i << 24) | (H_i >>> 8))  & 0xff00ff00);
//  }

//  var digestbytes = wordsToBytes(H);
//  return new Buffer(digestbytes);
//}



//}).call(this,require("buffer").Buffer)
//},{"buffer":3}],12:[function(require,module,exports){
//var u = require('./util')
//var write = u.write
//var fill = u.zeroFill

//module.exports = function (Buffer) {

//  //prototype class for hash functions
//  function Hash (blockSize, finalSize) {
//    this._block = new Buffer(blockSize) //new Uint32Array(blockSize/4)
//    this._finalSize = finalSize
//    this._blockSize = blockSize
//    this._len = 0
//    this._s = 0
//  }

//  Hash.prototype.init = function () {
//    this._s = 0
//    this._len = 0
//  }

//  function lengthOf(data, enc) {
//    if(enc == null)     return data.byteLength || data.length
//    if(enc == 'ascii' || enc == 'binary')  return data.length
//    if(enc == 'hex')    return data.length/2
//    if(enc == 'base64') return data.length/3
//  }

//  Hash.prototype.update = function (data, enc) {
//    var bl = this._blockSize

//    //I'd rather do this with a streaming encoder, like the opposite of
//    //http://nodejs.org/api/string_decoder.html
//    var length
//      if(!enc && 'string' === typeof data)
//        enc = 'utf8'

//    if(enc) {
//      if(enc === 'utf-8')
//        enc = 'utf8'

//      if(enc === 'base64' || enc === 'utf8')
//        data = new Buffer(data, enc), enc = null

//      length = lengthOf(data, enc)
//    } else
//      length = data.byteLength || data.length

//    var l = this._len += length
//    var s = this._s = (this._s || 0)
//    var f = 0
//    var buffer = this._block
//    while(s < l) {
//      var t = Math.min(length, f + bl - s%bl)
//      write(buffer, data, enc, s%bl, f, t)
//      var ch = (t - f);
//      s += ch; f += ch

//      if(!(s%bl))
//        this._update(buffer)
//    }
//    this._s = s

//    return this

//  }

//  Hash.prototype.digest = function (enc) {
//    var bl = this._blockSize
//    var fl = this._finalSize
//    var len = this._len*8

//    var x = this._block

//    var bits = len % (bl*8)

//    //add end marker, so that appending 0's creats a different hash.
//    x[this._len % bl] = 0x80
//    fill(this._block, this._len % bl + 1)

//    if(bits >= fl*8) {
//      this._update(this._block)
//      u.zeroFill(this._block, 0)
//    }

//    //TODO: handle case where the bit length is > Math.pow(2, 29)
//    x.writeInt32BE(len, fl + 4) //big endian

//    var hash = this._update(this._block) || this._hash()
//    if(enc == null) return hash
//    return hash.toString(enc)
//  }

//  Hash.prototype._update = function () {
//    throw new Error('_update must be implemented by subclass')
//  }

//  return Hash
//}

//},{"./util":16}],13:[function(require,module,exports){
//var exports = module.exports = function (alg) {
//  var Alg = exports[alg]
//  if(!Alg) throw new Error(alg + ' is not supported (we accept pull requests)')
//  return new Alg()
//}

//var Buffer = require('buffer').Buffer
//var Hash   = require('./hash')(Buffer)

//exports.sha =
//exports.sha1 = require('./sha1')(Buffer, Hash)
//exports.sha256 = require('./sha256')(Buffer, Hash)

//},{"./hash":12,"./sha1":14,"./sha256":15,"buffer":3}],14:[function(require,module,exports){
///*
// * A JavaScript implementation of the Secure Hash Algorithm, SHA-1, as defined
// * in FIPS PUB 180-1
// * Version 2.1a Copyright Paul Johnston 2000 - 2002.
// * Other contributors: Greg Holt, Andrew Kepert, Ydnar, Lostinet
// * Distributed under the BSD License
// * See http://pajhome.org.uk/crypt/md5 for details.
// */
//module.exports = function (Buffer, Hash) {

//  var inherits = require('util').inherits

//  inherits(Sha1, Hash)

//  var A = 0|0
//  var B = 4|0
//  var C = 8|0
//  var D = 12|0
//  var E = 16|0

//  var BE = false
//  var LE = true

//  var W = new Int32Array(80)

//  var POOL = []

//  function Sha1 () {
//    if(POOL.length)
//      return POOL.pop().init()

//    if(!(this instanceof Sha1)) return new Sha1()
//    this._w = W
//    Hash.call(this, 16*4, 14*4)
  
//    this._h = null
//    this.init()
//  }

//  Sha1.prototype.init = function () {
//    this._a = 0x67452301
//    this._b = 0xefcdab89
//    this._c = 0x98badcfe
//    this._d = 0x10325476
//    this._e = 0xc3d2e1f0

//    Hash.prototype.init.call(this)
//    return this
//  }

//  Sha1.prototype._POOL = POOL

//  // assume that array is a Uint32Array with length=16,
//  // and that if it is the last block, it already has the length and the 1 bit appended.


//  var isDV = new Buffer(1) instanceof DataView
//  function readInt32BE (X, i) {
//    return isDV
//      ? X.getInt32(i, false)
//      : X.readInt32BE(i)
//  }

//  Sha1.prototype._update = function (array) {

//    var X = this._block
//    var h = this._h
//    var a, b, c, d, e, _a, _b, _c, _d, _e

//    a = _a = this._a
//    b = _b = this._b
//    c = _c = this._c
//    d = _d = this._d
//    e = _e = this._e

//    var w = this._w

//    for(var j = 0; j < 80; j++) {
//      var W = w[j]
//        = j < 16
//        //? X.getInt32(j*4, false)
//        //? readInt32BE(X, j*4) //*/ X.readInt32BE(j*4) //*/
//        ? X.readInt32BE(j*4)
//        : rol(w[j - 3] ^ w[j -  8] ^ w[j - 14] ^ w[j - 16], 1)

//      var t =
//        add(
//          add(rol(a, 5), sha1_ft(j, b, c, d)),
//          add(add(e, W), sha1_kt(j))
//        );

//      e = d
//      d = c
//      c = rol(b, 30)
//      b = a
//      a = t
//    }

//    this._a = add(a, _a)
//    this._b = add(b, _b)
//    this._c = add(c, _c)
//    this._d = add(d, _d)
//    this._e = add(e, _e)
//  }

//  Sha1.prototype._hash = function () {
//    if(POOL.length < 100) POOL.push(this)
//    var H = new Buffer(20)
//    //console.log(this._a|0, this._b|0, this._c|0, this._d|0, this._e|0)
//    H.writeInt32BE(this._a|0, A)
//    H.writeInt32BE(this._b|0, B)
//    H.writeInt32BE(this._c|0, C)
//    H.writeInt32BE(this._d|0, D)
//    H.writeInt32BE(this._e|0, E)
//    return H
//  }

//  /*
//   * Perform the appropriate triplet combination function for the current
//   * iteration
//   */
//  function sha1_ft(t, b, c, d) {
//    if(t < 20) return (b & c) | ((~b) & d);
//    if(t < 40) return b ^ c ^ d;
//    if(t < 60) return (b & c) | (b & d) | (c & d);
//    return b ^ c ^ d;
//  }

//  /*
//   * Determine the appropriate additive constant for the current iteration
//   */
//  function sha1_kt(t) {
//    return (t < 20) ?  1518500249 : (t < 40) ?  1859775393 :
//           (t < 60) ? -1894007588 : -899497514;
//  }

//  /*
//   * Add integers, wrapping at 2^32. This uses 16-bit operations internally
//   * to work around bugs in some JS interpreters.
//   * //dominictarr: this is 10 years old, so maybe this can be dropped?)
//   *
//   */
//  function add(x, y) {
//    return (x + y ) | 0
//  //lets see how this goes on testling.
//  //  var lsw = (x & 0xFFFF) + (y & 0xFFFF);
//  //  var msw = (x >> 16) + (y >> 16) + (lsw >> 16);
//  //  return (msw << 16) | (lsw & 0xFFFF);
//  }

//  /*
//   * Bitwise rotate a 32-bit number to the left.
//   */
//  function rol(num, cnt) {
//    return (num << cnt) | (num >>> (32 - cnt));
//  }

//  return Sha1
//}

//},{"util":37}],15:[function(require,module,exports){

///**
// * A JavaScript implementation of the Secure Hash Algorithm, SHA-256, as defined
// * in FIPS 180-2
// * Version 2.2-beta Copyright Angel Marin, Paul Johnston 2000 - 2009.
// * Other contributors: Greg Holt, Andrew Kepert, Ydnar, Lostinet
// *
// */

//var inherits = require('util').inherits
//var BE       = false
//var LE       = true
//var u        = require('./util')

//module.exports = function (Buffer, Hash) {

//  var K = [
//      0x428A2F98, 0x71374491, 0xB5C0FBCF, 0xE9B5DBA5,
//      0x3956C25B, 0x59F111F1, 0x923F82A4, 0xAB1C5ED5,
//      0xD807AA98, 0x12835B01, 0x243185BE, 0x550C7DC3,
//      0x72BE5D74, 0x80DEB1FE, 0x9BDC06A7, 0xC19BF174,
//      0xE49B69C1, 0xEFBE4786, 0x0FC19DC6, 0x240CA1CC,
//      0x2DE92C6F, 0x4A7484AA, 0x5CB0A9DC, 0x76F988DA,
//      0x983E5152, 0xA831C66D, 0xB00327C8, 0xBF597FC7,
//      0xC6E00BF3, 0xD5A79147, 0x06CA6351, 0x14292967,
//      0x27B70A85, 0x2E1B2138, 0x4D2C6DFC, 0x53380D13,
//      0x650A7354, 0x766A0ABB, 0x81C2C92E, 0x92722C85,
//      0xA2BFE8A1, 0xA81A664B, 0xC24B8B70, 0xC76C51A3,
//      0xD192E819, 0xD6990624, 0xF40E3585, 0x106AA070,
//      0x19A4C116, 0x1E376C08, 0x2748774C, 0x34B0BCB5,
//      0x391C0CB3, 0x4ED8AA4A, 0x5B9CCA4F, 0x682E6FF3,
//      0x748F82EE, 0x78A5636F, 0x84C87814, 0x8CC70208,
//      0x90BEFFFA, 0xA4506CEB, 0xBEF9A3F7, 0xC67178F2
//    ]

//  inherits(Sha256, Hash)
//  var W = new Array(64)
//  var POOL = []
//  function Sha256() {
//    if(POOL.length) {
//      //return POOL.shift().init()
//    }
//    //this._data = new Buffer(32)

//    this.init()

//    this._w = W //new Array(64)

//    Hash.call(this, 16*4, 14*4)
//  };

//  Sha256.prototype.init = function () {

//    this._a = 0x6a09e667|0
//    this._b = 0xbb67ae85|0
//    this._c = 0x3c6ef372|0
//    this._d = 0xa54ff53a|0
//    this._e = 0x510e527f|0
//    this._f = 0x9b05688c|0
//    this._g = 0x1f83d9ab|0
//    this._h = 0x5be0cd19|0

//    this._len = this._s = 0

//    return this
//  }

//  var safe_add = function(x, y) {
//    var lsw = (x & 0xFFFF) + (y & 0xFFFF);
//    var msw = (x >> 16) + (y >> 16) + (lsw >> 16);
//    return (msw << 16) | (lsw & 0xFFFF);
//  }

//  function S (X, n) {
//    return (X >>> n) | (X << (32 - n));
//  }

//  function R (X, n) {
//    return (X >>> n);
//  }

//  function Ch (x, y, z) {
//    return ((x & y) ^ ((~x) & z));
//  }

//  function Maj (x, y, z) {
//    return ((x & y) ^ (x & z) ^ (y & z));
//  }

//  function Sigma0256 (x) {
//    return (S(x, 2) ^ S(x, 13) ^ S(x, 22));
//  }

//  function Sigma1256 (x) {
//    return (S(x, 6) ^ S(x, 11) ^ S(x, 25));
//  }

//  function Gamma0256 (x) {
//    return (S(x, 7) ^ S(x, 18) ^ R(x, 3));
//  }

//  function Gamma1256 (x) {
//    return (S(x, 17) ^ S(x, 19) ^ R(x, 10));
//  }

//  Sha256.prototype._update = function(m) {
//    var M = this._block
//    var W = this._w
//    var a, b, c, d, e, f, g, h
//    var T1, T2

//    a = this._a | 0
//    b = this._b | 0
//    c = this._c | 0
//    d = this._d | 0
//    e = this._e | 0
//    f = this._f | 0
//    g = this._g | 0
//    h = this._h | 0

//    for (var j = 0; j < 64; j++) {
//      var w = W[j] = j < 16
//        ? M.readInt32BE(j * 4)
//        : Gamma1256(W[j - 2]) + W[j - 7] + Gamma0256(W[j - 15]) + W[j - 16]

//      T1 = h + Sigma1256(e) + Ch(e, f, g) + K[j] + w

//      T2 = Sigma0256(a) + Maj(a, b, c);
//      h = g; g = f; f = e; e = d + T1; d = c; c = b; b = a; a = T1 + T2;
//    }

//    this._a = (a + this._a) | 0
//    this._b = (b + this._b) | 0
//    this._c = (c + this._c) | 0
//    this._d = (d + this._d) | 0
//    this._e = (e + this._e) | 0
//    this._f = (f + this._f) | 0
//    this._g = (g + this._g) | 0
//    this._h = (h + this._h) | 0

//  };

//  Sha256.prototype._hash = function () {
//    if(POOL.length < 10)
//      POOL.push(this)

//    var H = new Buffer(32)

//    H.writeInt32BE(this._a,  0)
//    H.writeInt32BE(this._b,  4)
//    H.writeInt32BE(this._c,  8)
//    H.writeInt32BE(this._d, 12)
//    H.writeInt32BE(this._e, 16)
//    H.writeInt32BE(this._f, 20)
//    H.writeInt32BE(this._g, 24)
//    H.writeInt32BE(this._h, 28)

//    return H
//  }

//  return Sha256

//}

//},{"./util":16,"util":37}],16:[function(require,module,exports){
//exports.write = write
//exports.zeroFill = zeroFill

//exports.toString = toString

//function write (buffer, string, enc, start, from, to, LE) {
//  var l = (to - from)
//  if(enc === 'ascii' || enc === 'binary') {
//    for( var i = 0; i < l; i++) {
//      buffer[start + i] = string.charCodeAt(i + from)
//    }
//  }
//  else if(enc == null) {
//    for( var i = 0; i < l; i++) {
//      buffer[start + i] = string[i + from]
//    }
//  }
//  else if(enc === 'hex') {
//    for(var i = 0; i < l; i++) {
//      var j = from + i
//      buffer[start + i] = parseInt(string[j*2] + string[(j*2)+1], 16)
//    }
//  }
//  else if(enc === 'base64') {
//    throw new Error('base64 encoding not yet supported')
//  }
//  else
//    throw new Error(enc +' encoding not yet supported')
//}

////always fill to the end!
//function zeroFill(buf, from) {
//  for(var i = from; i < buf.length; i++)
//    buf[i] = 0
//}


//},{}],17:[function(require,module,exports){
//(function (Buffer){
//// JavaScript PBKDF2 Implementation
//// Based on http://git.io/qsv2zw
//// Licensed under LGPL v3
//// Copyright (c) 2013 jduncanator

//var blocksize = 64
//var zeroBuffer = new Buffer(blocksize); zeroBuffer.fill(0)

//module.exports = function (createHmac, exports) {
//  exports = exports || {}

//  exports.pbkdf2 = function(password, salt, iterations, keylen, cb) {
//    if('function' !== typeof cb)
//      throw new Error('No callback provided to pbkdf2');
//    setTimeout(function () {
//      cb(null, exports.pbkdf2Sync(password, salt, iterations, keylen))
//    })
//  }

//  exports.pbkdf2Sync = function(key, salt, iterations, keylen) {
//    if('number' !== typeof iterations)
//      throw new TypeError('Iterations not a number')
//    if(iterations < 0)
//      throw new TypeError('Bad iterations')
//    if('number' !== typeof keylen)
//      throw new TypeError('Key length not a number')
//    if(keylen < 0)
//      throw new TypeError('Bad key length')

//    //stretch key to the correct length that hmac wants it,
//    //otherwise this will happen every time hmac is called
//    //twice per iteration.
//    var key = !Buffer.isBuffer(key) ? new Buffer(key) : key

//    if(key.length > blocksize) {
//      key = createHash(alg).update(key).digest()
//    } else if(key.length < blocksize) {
//      key = Buffer.concat([key, zeroBuffer], blocksize)
//    }

//    var HMAC;
//    var cplen, p = 0, i = 1, itmp = new Buffer(4), digtmp;
//    var out = new Buffer(keylen);
//    out.fill(0);
//    while(keylen) {
//      if(keylen > 20)
//        cplen = 20;
//      else
//        cplen = keylen;

//      /* We are unlikely to ever use more than 256 blocks (5120 bits!)
//         * but just in case...
//         */
//        itmp[0] = (i >> 24) & 0xff;
//        itmp[1] = (i >> 16) & 0xff;
//          itmp[2] = (i >> 8) & 0xff;
//          itmp[3] = i & 0xff;

//          HMAC = createHmac('sha1', key);
//          HMAC.update(salt)
//          HMAC.update(itmp);
//        digtmp = HMAC.digest();
//        digtmp.copy(out, p, 0, cplen);

//        for(var j = 1; j < iterations; j++) {
//          HMAC = createHmac('sha1', key);
//          HMAC.update(digtmp);
//          digtmp = HMAC.digest();
//          for(var k = 0; k < cplen; k++) {
//            out[k] ^= digtmp[k];
//          }
//        }
//      keylen -= cplen;
//      i++;
//      p += cplen;
//    }

//    return out;
//  }

//  return exports
//}

//}).call(this,require("buffer").Buffer)
//},{"buffer":3}],18:[function(require,module,exports){
//(function (Buffer){
//(function() {
//  module.exports = function(size) {
//    var bytes = new Buffer(size); //in browserify, this is an extended Uint8Array
//    /* This will not work in older browsers.
//     * See https://developer.mozilla.org/en-US/docs/Web/API/window.crypto.getRandomValues
//     */
//    crypto.getRandomValues(bytes);
//    return bytes;
//  }
//}())

//}).call(this,require("buffer").Buffer)
//},{"buffer":3}],19:[function(require,module,exports){
//// Copyright Joyent, Inc. and other Node contributors.
////
//// Permission is hereby granted, free of charge, to any person obtaining a
//// copy of this software and associated documentation files (the
//// "Software"), to deal in the Software without restriction, including
//// without limitation the rights to use, copy, modify, merge, publish,
//// distribute, sublicense, and/or sell copies of the Software, and to permit
//// persons to whom the Software is furnished to do so, subject to the
//// following conditions:
////
//// The above copyright notice and this permission notice shall be included
//// in all copies or substantial portions of the Software.
////
//// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
//// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
//// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
//// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
//// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
//// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
//// USE OR OTHER DEALINGS IN THE SOFTWARE.

//function EventEmitter() {
//  this._events = this._events || {};
//  this._maxListeners = this._maxListeners || undefined;
//}
//module.exports = EventEmitter;

//// Backwards-compat with node 0.10.x
//EventEmitter.EventEmitter = EventEmitter;

//EventEmitter.prototype._events = undefined;
//EventEmitter.prototype._maxListeners = undefined;

//// By default EventEmitters will print a warning if more than 10 listeners are
//// added to it. This is a useful default which helps finding memory leaks.
//EventEmitter.defaultMaxListeners = 10;

//// Obviously not all Emitters should be limited to 10. This function allows
//// that to be increased. Set to zero for unlimited.
//EventEmitter.prototype.setMaxListeners = function(n) {
//  if (!isNumber(n) || n < 0 || isNaN(n))
//    throw TypeError('n must be a positive number');
//  this._maxListeners = n;
//  return this;
//};

//EventEmitter.prototype.emit = function(type) {
//  var er, handler, len, args, i, listeners;

//  if (!this._events)
//    this._events = {};

//  // If there is no 'error' event listener then throw.
//  if (type === 'error') {
//    if (!this._events.error ||
//        (isObject(this._events.error) && !this._events.error.length)) {
//      er = arguments[1];
//      if (er instanceof Error) {
//        throw er; // Unhandled 'error' event
//      } else {
//        throw TypeError('Uncaught, unspecified "error" event.');
//      }
//      return false;
//    }
//  }

//  handler = this._events[type];

//  if (isUndefined(handler))
//    return false;

//  if (isFunction(handler)) {
//    switch (arguments.length) {
//      // fast cases
//      case 1:
//        handler.call(this);
//        break;
//      case 2:
//        handler.call(this, arguments[1]);
//        break;
//      case 3:
//        handler.call(this, arguments[1], arguments[2]);
//        break;
//      // slower
//      default:
//        len = arguments.length;
//        args = new Array(len - 1);
//        for (i = 1; i < len; i++)
//          args[i - 1] = arguments[i];
//        handler.apply(this, args);
//    }
//  } else if (isObject(handler)) {
//    len = arguments.length;
//    args = new Array(len - 1);
//    for (i = 1; i < len; i++)
//      args[i - 1] = arguments[i];

//    listeners = handler.slice();
//    len = listeners.length;
//    for (i = 0; i < len; i++)
//      listeners[i].apply(this, args);
//  }

//  return true;
//};

//EventEmitter.prototype.addListener = function(type, listener) {
//  var m;

//  if (!isFunction(listener))
//    throw TypeError('listener must be a function');

//  if (!this._events)
//    this._events = {};

//  // To avoid recursion in the case that type === "newListener"! Before
//  // adding it to the listeners, first emit "newListener".
//  if (this._events.newListener)
//    this.emit('newListener', type,
//              isFunction(listener.listener) ?
//              listener.listener : listener);

//  if (!this._events[type])
//    // Optimize the case of one listener. Don't need the extra array object.
//    this._events[type] = listener;
//  else if (isObject(this._events[type]))
//    // If we've already got an array, just append.
//    this._events[type].push(listener);
//  else
//    // Adding the second element, need to change to array.
//    this._events[type] = [this._events[type], listener];

//  // Check for listener leak
//  if (isObject(this._events[type]) && !this._events[type].warned) {
//    var m;
//    if (!isUndefined(this._maxListeners)) {
//      m = this._maxListeners;
//    } else {
//      m = EventEmitter.defaultMaxListeners;
//    }

//    if (m && m > 0 && this._events[type].length > m) {
//      this._events[type].warned = true;
//      console.error('(node) warning: possible EventEmitter memory ' +
//                    'leak detected. %d listeners added. ' +
//                    'Use emitter.setMaxListeners() to increase limit.',
//                    this._events[type].length);
//      if (typeof console.trace === 'function') {
//        // not supported in IE 10
//        console.trace();
//      }
//    }
//  }

//  return this;
//};

//EventEmitter.prototype.on = EventEmitter.prototype.addListener;

//EventEmitter.prototype.once = function(type, listener) {
//  if (!isFunction(listener))
//    throw TypeError('listener must be a function');

//  var fired = false;

//  function g() {
//    this.removeListener(type, g);

//    if (!fired) {
//      fired = true;
//      listener.apply(this, arguments);
//    }
//  }

//  g.listener = listener;
//  this.on(type, g);

//  return this;
//};

//// emits a 'removeListener' event iff the listener was removed
//EventEmitter.prototype.removeListener = function(type, listener) {
//  var list, position, length, i;

//  if (!isFunction(listener))
//    throw TypeError('listener must be a function');

//  if (!this._events || !this._events[type])
//    return this;

//  list = this._events[type];
//  length = list.length;
//  position = -1;

//  if (list === listener ||
//      (isFunction(list.listener) && list.listener === listener)) {
//    delete this._events[type];
//    if (this._events.removeListener)
//      this.emit('removeListener', type, listener);

//  } else if (isObject(list)) {
//    for (i = length; i-- > 0;) {
//      if (list[i] === listener ||
//          (list[i].listener && list[i].listener === listener)) {
//        position = i;
//        break;
//      }
//    }

//    if (position < 0)
//      return this;

//    if (list.length === 1) {
//      list.length = 0;
//      delete this._events[type];
//    } else {
//      list.splice(position, 1);
//    }

//    if (this._events.removeListener)
//      this.emit('removeListener', type, listener);
//  }

//  return this;
//};

//EventEmitter.prototype.removeAllListeners = function(type) {
//  var key, listeners;

//  if (!this._events)
//    return this;

//  // not listening for removeListener, no need to emit
//  if (!this._events.removeListener) {
//    if (arguments.length === 0)
//      this._events = {};
//    else if (this._events[type])
//      delete this._events[type];
//    return this;
//  }

//  // emit removeListener for all listeners on all events
//  if (arguments.length === 0) {
//    for (key in this._events) {
//      if (key === 'removeListener') continue;
//      this.removeAllListeners(key);
//    }
//    this.removeAllListeners('removeListener');
//    this._events = {};
//    return this;
//  }

//  listeners = this._events[type];

//  if (isFunction(listeners)) {
//    this.removeListener(type, listeners);
//  } else {
//    // LIFO order
//    while (listeners.length)
//      this.removeListener(type, listeners[listeners.length - 1]);
//  }
//  delete this._events[type];

//  return this;
//};

//EventEmitter.prototype.listeners = function(type) {
//  var ret;
//  if (!this._events || !this._events[type])
//    ret = [];
//  else if (isFunction(this._events[type]))
//    ret = [this._events[type]];
//  else
//    ret = this._events[type].slice();
//  return ret;
//};

//EventEmitter.listenerCount = function(emitter, type) {
//  var ret;
//  if (!emitter._events || !emitter._events[type])
//    ret = 0;
//  else if (isFunction(emitter._events[type]))
//    ret = 1;
//  else
//    ret = emitter._events[type].length;
//  return ret;
//};

//function isFunction(arg) {
//  return typeof arg === 'function';
//}

//function isNumber(arg) {
//  return typeof arg === 'number';
//}

//function isObject(arg) {
//  return typeof arg === 'object' && arg !== null;
//}

//function isUndefined(arg) {
//  return arg === void 0;
//}

//},{}],20:[function(require,module,exports){
//if (typeof Object.create === 'function') {
//  // implementation from standard node.js 'util' module
//  module.exports = function inherits(ctor, superCtor) {
//    ctor.super_ = superCtor
//    ctor.prototype = Object.create(superCtor.prototype, {
//      constructor: {
//        value: ctor,
//        enumerable: false,
//        writable: true,
//        configurable: true
//      }
//    });
//  };
//} else {
//  // old school shim for old browsers
//  module.exports = function inherits(ctor, superCtor) {
//    ctor.super_ = superCtor
//    var TempCtor = function () {}
//    TempCtor.prototype = superCtor.prototype
//    ctor.prototype = new TempCtor()
//    ctor.prototype.constructor = ctor
//  }
//}

//},{}],21:[function(require,module,exports){
//module.exports = Array.isArray || function (arr) {
//  return Object.prototype.toString.call(arr) == '[object Array]';
//};

//},{}],22:[function(require,module,exports){
//// shim for using process in browser

//var process = module.exports = {};

//process.nextTick = (function () {
//    var canSetImmediate = typeof window !== 'undefined'
//    && window.setImmediate;
//    var canPost = typeof window !== 'undefined'
//    && window.postMessage && window.addEventListener
//    ;

//    if (canSetImmediate) {
//        return function (f) { return window.setImmediate(f) };
//    }

//    if (canPost) {
//        var queue = [];
//        window.addEventListener('message', function (ev) {
//            var source = ev.source;
//            if ((source === window || source === null) && ev.data === 'process-tick') {
//                ev.stopPropagation();
//                if (queue.length > 0) {
//                    var fn = queue.shift();
//                    fn();
//                }
//            }
//        }, true);

//        return function nextTick(fn) {
//            queue.push(fn);
//            window.postMessage('process-tick', '*');
//        };
//    }

//    return function nextTick(fn) {
//        setTimeout(fn, 0);
//    };
//})();

//process.title = 'browser';
//process.browser = true;
//process.env = {};
//process.argv = [];

//function noop() {}

//process.on = noop;
//process.addListener = noop;
//process.once = noop;
//process.off = noop;
//process.removeListener = noop;
//process.removeAllListeners = noop;
//process.emit = noop;

//process.binding = function (name) {
//    throw new Error('process.binding is not supported');
//}

//// TODO(shtylman)
//process.cwd = function () { return '/' };
//process.chdir = function (dir) {
//    throw new Error('process.chdir is not supported');
//};

//},{}],23:[function(require,module,exports){
//module.exports = require("./lib/_stream_duplex.js")

//},{"./lib/_stream_duplex.js":24}],24:[function(require,module,exports){
//(function (process){
//// Copyright Joyent, Inc. and other Node contributors.
////
//// Permission is hereby granted, free of charge, to any person obtaining a
//// copy of this software and associated documentation files (the
//// "Software"), to deal in the Software without restriction, including
//// without limitation the rights to use, copy, modify, merge, publish,
//// distribute, sublicense, and/or sell copies of the Software, and to permit
//// persons to whom the Software is furnished to do so, subject to the
//// following conditions:
////
//// The above copyright notice and this permission notice shall be included
//// in all copies or substantial portions of the Software.
////
//// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
//// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
//// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
//// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
//// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
//// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
//// USE OR OTHER DEALINGS IN THE SOFTWARE.

//// a duplex stream is just a stream that is both readable and writable.
//// Since JS doesn't have multiple prototypal inheritance, this class
//// prototypally inherits from Readable, and then parasitically from
//// Writable.

//module.exports = Duplex;

///*<replacement>*/
//var objectKeys = Object.keys || function (obj) {
//  var keys = [];
//  for (var key in obj) keys.push(key);
//  return keys;
//}
///*</replacement>*/


///*<replacement>*/
//var util = require('core-util-is');
//util.inherits = require('inherits');
///*</replacement>*/

//var Readable = require('./_stream_readable');
//var Writable = require('./_stream_writable');

//util.inherits(Duplex, Readable);

//forEach(objectKeys(Writable.prototype), function(method) {
//  if (!Duplex.prototype[method])
//    Duplex.prototype[method] = Writable.prototype[method];
//});

//function Duplex(options) {
//  if (!(this instanceof Duplex))
//    return new Duplex(options);

//  Readable.call(this, options);
//  Writable.call(this, options);

//  if (options && options.readable === false)
//    this.readable = false;

//  if (options && options.writable === false)
//    this.writable = false;

//  this.allowHalfOpen = true;
//  if (options && options.allowHalfOpen === false)
//    this.allowHalfOpen = false;

//  this.once('end', onend);
//}

//// the no-half-open enforcer
//function onend() {
//  // if we allow half-open state, or if the writable side ended,
//  // then we're ok.
//  if (this.allowHalfOpen || this._writableState.ended)
//    return;

//  // no more data can be written.
//  // But allow more writes to happen in this tick.
//  process.nextTick(this.end.bind(this));
//}

//function forEach (xs, f) {
//  for (var i = 0, l = xs.length; i < l; i++) {
//    f(xs[i], i);
//  }
//}

//}).call(this,require('_process'))
//},{"./_stream_readable":26,"./_stream_writable":28,"_process":22,"core-util-is":29,"inherits":20}],25:[function(require,module,exports){
//// Copyright Joyent, Inc. and other Node contributors.
////
//// Permission is hereby granted, free of charge, to any person obtaining a
//// copy of this software and associated documentation files (the
//// "Software"), to deal in the Software without restriction, including
//// without limitation the rights to use, copy, modify, merge, publish,
//// distribute, sublicense, and/or sell copies of the Software, and to permit
//// persons to whom the Software is furnished to do so, subject to the
//// following conditions:
////
//// The above copyright notice and this permission notice shall be included
//// in all copies or substantial portions of the Software.
////
//// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
//// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
//// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
//// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
//// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
//// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
//// USE OR OTHER DEALINGS IN THE SOFTWARE.

//// a passthrough stream.
//// basically just the most minimal sort of Transform stream.
//// Every written chunk gets output as-is.

//module.exports = PassThrough;

//var Transform = require('./_stream_transform');

///*<replacement>*/
//var util = require('core-util-is');
//util.inherits = require('inherits');
///*</replacement>*/

//util.inherits(PassThrough, Transform);

//function PassThrough(options) {
//  if (!(this instanceof PassThrough))
//    return new PassThrough(options);

//  Transform.call(this, options);
//}

//PassThrough.prototype._transform = function(chunk, encoding, cb) {
//  cb(null, chunk);
//};

//},{"./_stream_transform":27,"core-util-is":29,"inherits":20}],26:[function(require,module,exports){
//(function (process){
//// Copyright Joyent, Inc. and other Node contributors.
////
//// Permission is hereby granted, free of charge, to any person obtaining a
//// copy of this software and associated documentation files (the
//// "Software"), to deal in the Software without restriction, including
//// without limitation the rights to use, copy, modify, merge, publish,
//// distribute, sublicense, and/or sell copies of the Software, and to permit
//// persons to whom the Software is furnished to do so, subject to the
//// following conditions:
////
//// The above copyright notice and this permission notice shall be included
//// in all copies or substantial portions of the Software.
////
//// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
//// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
//// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
//// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
//// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
//// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
//// USE OR OTHER DEALINGS IN THE SOFTWARE.

//module.exports = Readable;

///*<replacement>*/
//var isArray = require('isarray');
///*</replacement>*/


///*<replacement>*/
//var Buffer = require('buffer').Buffer;
///*</replacement>*/

//Readable.ReadableState = ReadableState;

//var EE = require('events').EventEmitter;

///*<replacement>*/
//if (!EE.listenerCount) EE.listenerCount = function(emitter, type) {
//  return emitter.listeners(type).length;
//};
///*</replacement>*/

//var Stream = require('stream');

///*<replacement>*/
//var util = require('core-util-is');
//util.inherits = require('inherits');
///*</replacement>*/

//var StringDecoder;

//util.inherits(Readable, Stream);

//function ReadableState(options, stream) {
//  options = options || {};

//  // the point at which it stops calling _read() to fill the buffer
//  // Note: 0 is a valid value, means "don't call _read preemptively ever"
//  var hwm = options.highWaterMark;
//  this.highWaterMark = (hwm || hwm === 0) ? hwm : 16 * 1024;

//  // cast to ints.
//  this.highWaterMark = ~~this.highWaterMark;

//  this.buffer = [];
//  this.length = 0;
//  this.pipes = null;
//  this.pipesCount = 0;
//  this.flowing = false;
//  this.ended = false;
//  this.endEmitted = false;
//  this.reading = false;

//  // In streams that never have any data, and do push(null) right away,
//  // the consumer can miss the 'end' event if they do some I/O before
//  // consuming the stream.  So, we don't emit('end') until some reading
//  // happens.
//  this.calledRead = false;

//  // a flag to be able to tell if the onwrite cb is called immediately,
//  // or on a later tick.  We set this to true at first, becuase any
//  // actions that shouldn't happen until "later" should generally also
//  // not happen before the first write call.
//  this.sync = true;

//  // whenever we return null, then we set a flag to say
//  // that we're awaiting a 'readable' event emission.
//  this.needReadable = false;
//  this.emittedReadable = false;
//  this.readableListening = false;


//  // object stream flag. Used to make read(n) ignore n and to
//  // make all the buffer merging and length checks go away
//  this.objectMode = !!options.objectMode;

//  // Crypto is kind of old and crusty.  Historically, its default string
//  // encoding is 'binary' so we have to make this configurable.
//  // Everything else in the universe uses 'utf8', though.
//  this.defaultEncoding = options.defaultEncoding || 'utf8';

//  // when piping, we only care about 'readable' events that happen
//  // after read()ing all the bytes and not getting any pushback.
//  this.ranOut = false;

//  // the number of writers that are awaiting a drain event in .pipe()s
//  this.awaitDrain = 0;

//  // if true, a maybeReadMore has been scheduled
//  this.readingMore = false;

//  this.decoder = null;
//  this.encoding = null;
//  if (options.encoding) {
//    if (!StringDecoder)
//      StringDecoder = require('string_decoder/').StringDecoder;
//    this.decoder = new StringDecoder(options.encoding);
//    this.encoding = options.encoding;
//  }
//}

//function Readable(options) {
//  if (!(this instanceof Readable))
//    return new Readable(options);

//  this._readableState = new ReadableState(options, this);

//  // legacy
//  this.readable = true;

//  Stream.call(this);
//}

//// Manually shove something into the read() buffer.
//// This returns true if the highWaterMark has not been hit yet,
//// similar to how Writable.write() returns true if you should
//// write() some more.
//Readable.prototype.push = function(chunk, encoding) {
//  var state = this._readableState;

//  if (typeof chunk === 'string' && !state.objectMode) {
//    encoding = encoding || state.defaultEncoding;
//    if (encoding !== state.encoding) {
//      chunk = new Buffer(chunk, encoding);
//      encoding = '';
//    }
//  }

//  return readableAddChunk(this, state, chunk, encoding, false);
//};

//// Unshift should *always* be something directly out of read()
//Readable.prototype.unshift = function(chunk) {
//  var state = this._readableState;
//  return readableAddChunk(this, state, chunk, '', true);
//};

//function readableAddChunk(stream, state, chunk, encoding, addToFront) {
//  var er = chunkInvalid(state, chunk);
//  if (er) {
//    stream.emit('error', er);
//  } else if (chunk === null || chunk === undefined) {
//    state.reading = false;
//    if (!state.ended)
//      onEofChunk(stream, state);
//  } else if (state.objectMode || chunk && chunk.length > 0) {
//    if (state.ended && !addToFront) {
//      var e = new Error('stream.push() after EOF');
//      stream.emit('error', e);
//    } else if (state.endEmitted && addToFront) {
//      var e = new Error('stream.unshift() after end event');
//      stream.emit('error', e);
//    } else {
//      if (state.decoder && !addToFront && !encoding)
//        chunk = state.decoder.write(chunk);

//      // update the buffer info.
//      state.length += state.objectMode ? 1 : chunk.length;
//      if (addToFront) {
//        state.buffer.unshift(chunk);
//      } else {
//        state.reading = false;
//        state.buffer.push(chunk);
//      }

//      if (state.needReadable)
//        emitReadable(stream);

//      maybeReadMore(stream, state);
//    }
//  } else if (!addToFront) {
//    state.reading = false;
//  }

//  return needMoreData(state);
//}



//// if it's past the high water mark, we can push in some more.
//// Also, if we have no data yet, we can stand some
//// more bytes.  This is to work around cases where hwm=0,
//// such as the repl.  Also, if the push() triggered a
//// readable event, and the user called read(largeNumber) such that
//// needReadable was set, then we ought to push more, so that another
//// 'readable' event will be triggered.
//function needMoreData(state) {
//  return !state.ended &&
//         (state.needReadable ||
//          state.length < state.highWaterMark ||
//          state.length === 0);
//}

//// backwards compatibility.
//Readable.prototype.setEncoding = function(enc) {
//  if (!StringDecoder)
//    StringDecoder = require('string_decoder/').StringDecoder;
//  this._readableState.decoder = new StringDecoder(enc);
//  this._readableState.encoding = enc;
//};

//// Don't raise the hwm > 128MB
//var MAX_HWM = 0x800000;
//function roundUpToNextPowerOf2(n) {
//  if (n >= MAX_HWM) {
//    n = MAX_HWM;
//  } else {
//    // Get the next highest power of 2
//    n--;
//    for (var p = 1; p < 32; p <<= 1) n |= n >> p;
//    n++;
//  }
//  return n;
//}

//function howMuchToRead(n, state) {
//  if (state.length === 0 && state.ended)
//    return 0;

//  if (state.objectMode)
//    return n === 0 ? 0 : 1;

//  if (n === null || isNaN(n)) {
//    // only flow one buffer at a time
//    if (state.flowing && state.buffer.length)
//      return state.buffer[0].length;
//    else
//      return state.length;
//  }

//  if (n <= 0)
//    return 0;

//  // If we're asking for more than the target buffer level,
//  // then raise the water mark.  Bump up to the next highest
//  // power of 2, to prevent increasing it excessively in tiny
//  // amounts.
//  if (n > state.highWaterMark)
//    state.highWaterMark = roundUpToNextPowerOf2(n);

//  // don't have that much.  return null, unless we've ended.
//  if (n > state.length) {
//    if (!state.ended) {
//      state.needReadable = true;
//      return 0;
//    } else
//      return state.length;
//  }

//  return n;
//}

//// you can override either this method, or the async _read(n) below.
//Readable.prototype.read = function(n) {
//  var state = this._readableState;
//  state.calledRead = true;
//  var nOrig = n;
//  var ret;

//  if (typeof n !== 'number' || n > 0)
//    state.emittedReadable = false;

//  // if we're doing read(0) to trigger a readable event, but we
//  // already have a bunch of data in the buffer, then just trigger
//  // the 'readable' event and move on.
//  if (n === 0 &&
//      state.needReadable &&
//      (state.length >= state.highWaterMark || state.ended)) {
//    emitReadable(this);
//    return null;
//  }

//  n = howMuchToRead(n, state);

//  // if we've ended, and we're now clear, then finish it up.
//  if (n === 0 && state.ended) {
//    ret = null;

//    // In cases where the decoder did not receive enough data
//    // to produce a full chunk, then immediately received an
//    // EOF, state.buffer will contain [<Buffer >, <Buffer 00 ...>].
//    // howMuchToRead will see this and coerce the amount to
//    // read to zero (because it's looking at the length of the
//    // first <Buffer > in state.buffer), and we'll end up here.
//    //
//    // This can only happen via state.decoder -- no other venue
//    // exists for pushing a zero-length chunk into state.buffer
//    // and triggering this behavior. In this case, we return our
//    // remaining data and end the stream, if appropriate.
//    if (state.length > 0 && state.decoder) {
//      ret = fromList(n, state);
//      state.length -= ret.length;
//    }

//    if (state.length === 0)
//      endReadable(this);

//    return ret;
//  }

//  // All the actual chunk generation logic needs to be
//  // *below* the call to _read.  The reason is that in certain
//  // synthetic stream cases, such as passthrough streams, _read
//  // may be a completely synchronous operation which may change
//  // the state of the read buffer, providing enough data when
//  // before there was *not* enough.
//  //
//  // So, the steps are:
//  // 1. Figure out what the state of things will be after we do
//  // a read from the buffer.
//  //
//  // 2. If that resulting state will trigger a _read, then call _read.
//  // Note that this may be asynchronous, or synchronous.  Yes, it is
//  // deeply ugly to write APIs this way, but that still doesn't mean
//  // that the Readable class should behave improperly, as streams are
//  // designed to be sync/async agnostic.
//  // Take note if the _read call is sync or async (ie, if the read call
//  // has returned yet), so that we know whether or not it's safe to emit
//  // 'readable' etc.
//  //
//  // 3. Actually pull the requested chunks out of the buffer and return.

//  // if we need a readable event, then we need to do some reading.
//  var doRead = state.needReadable;

//  // if we currently have less than the highWaterMark, then also read some
//  if (state.length - n <= state.highWaterMark)
//    doRead = true;

//  // however, if we've ended, then there's no point, and if we're already
//  // reading, then it's unnecessary.
//  if (state.ended || state.reading)
//    doRead = false;

//  if (doRead) {
//    state.reading = true;
//    state.sync = true;
//    // if the length is currently zero, then we *need* a readable event.
//    if (state.length === 0)
//      state.needReadable = true;
//    // call internal read method
//    this._read(state.highWaterMark);
//    state.sync = false;
//  }

//  // If _read called its callback synchronously, then `reading`
//  // will be false, and we need to re-evaluate how much data we
//  // can return to the user.
//  if (doRead && !state.reading)
//    n = howMuchToRead(nOrig, state);

//  if (n > 0)
//    ret = fromList(n, state);
//  else
//    ret = null;

//  if (ret === null) {
//    state.needReadable = true;
//    n = 0;
//  }

//  state.length -= n;

//  // If we have nothing in the buffer, then we want to know
//  // as soon as we *do* get something into the buffer.
//  if (state.length === 0 && !state.ended)
//    state.needReadable = true;

//  // If we happened to read() exactly the remaining amount in the
//  // buffer, and the EOF has been seen at this point, then make sure
//  // that we emit 'end' on the very next tick.
//  if (state.ended && !state.endEmitted && state.length === 0)
//    endReadable(this);

//  return ret;
//};

//function chunkInvalid(state, chunk) {
//  var er = null;
//  if (!Buffer.isBuffer(chunk) &&
//      'string' !== typeof chunk &&
//      chunk !== null &&
//      chunk !== undefined &&
//      !state.objectMode) {
//    er = new TypeError('Invalid non-string/buffer chunk');
//  }
//  return er;
//}


//function onEofChunk(stream, state) {
//  if (state.decoder && !state.ended) {
//    var chunk = state.decoder.end();
//    if (chunk && chunk.length) {
//      state.buffer.push(chunk);
//      state.length += state.objectMode ? 1 : chunk.length;
//    }
//  }
//  state.ended = true;

//  // if we've ended and we have some data left, then emit
//  // 'readable' now to make sure it gets picked up.
//  if (state.length > 0)
//    emitReadable(stream);
//  else
//    endReadable(stream);
//}

//// Don't emit readable right away in sync mode, because this can trigger
//// another read() call => stack overflow.  This way, it might trigger
//// a nextTick recursion warning, but that's not so bad.
//function emitReadable(stream) {
//  var state = stream._readableState;
//  state.needReadable = false;
//  if (state.emittedReadable)
//    return;

//  state.emittedReadable = true;
//  if (state.sync)
//    process.nextTick(function() {
//      emitReadable_(stream);
//    });
//  else
//    emitReadable_(stream);
//}

//function emitReadable_(stream) {
//  stream.emit('readable');
//}


//// at this point, the user has presumably seen the 'readable' event,
//// and called read() to consume some data.  that may have triggered
//// in turn another _read(n) call, in which case reading = true if
//// it's in progress.
//// However, if we're not ended, or reading, and the length < hwm,
//// then go ahead and try to read some more preemptively.
//function maybeReadMore(stream, state) {
//  if (!state.readingMore) {
//    state.readingMore = true;
//    process.nextTick(function() {
//      maybeReadMore_(stream, state);
//    });
//  }
//}

//function maybeReadMore_(stream, state) {
//  var len = state.length;
//  while (!state.reading && !state.flowing && !state.ended &&
//         state.length < state.highWaterMark) {
//    stream.read(0);
//    if (len === state.length)
//      // didn't get any data, stop spinning.
//      break;
//    else
//      len = state.length;
//  }
//  state.readingMore = false;
//}

//// abstract method.  to be overridden in specific implementation classes.
//// call cb(er, data) where data is <= n in length.
//// for virtual (non-string, non-buffer) streams, "length" is somewhat
//// arbitrary, and perhaps not very meaningful.
//Readable.prototype._read = function(n) {
//  this.emit('error', new Error('not implemented'));
//};

//Readable.prototype.pipe = function(dest, pipeOpts) {
//  var src = this;
//  var state = this._readableState;

//  switch (state.pipesCount) {
//    case 0:
//      state.pipes = dest;
//      break;
//    case 1:
//      state.pipes = [state.pipes, dest];
//      break;
//    default:
//      state.pipes.push(dest);
//      break;
//  }
//  state.pipesCount += 1;

//  var doEnd = (!pipeOpts || pipeOpts.end !== false) &&
//              dest !== process.stdout &&
//              dest !== process.stderr;

//  var endFn = doEnd ? onend : cleanup;
//  if (state.endEmitted)
//    process.nextTick(endFn);
//  else
//    src.once('end', endFn);

//  dest.on('unpipe', onunpipe);
//  function onunpipe(readable) {
//    if (readable !== src) return;
//    cleanup();
//  }

//  function onend() {
//    dest.end();
//  }

//  // when the dest drains, it reduces the awaitDrain counter
//  // on the source.  This would be more elegant with a .once()
//  // handler in flow(), but adding and removing repeatedly is
//  // too slow.
//  var ondrain = pipeOnDrain(src);
//  dest.on('drain', ondrain);

//  function cleanup() {
//    // cleanup event handlers once the pipe is broken
//    dest.removeListener('close', onclose);
//    dest.removeListener('finish', onfinish);
//    dest.removeListener('drain', ondrain);
//    dest.removeListener('error', onerror);
//    dest.removeListener('unpipe', onunpipe);
//    src.removeListener('end', onend);
//    src.removeListener('end', cleanup);

//    // if the reader is waiting for a drain event from this
//    // specific writer, then it would cause it to never start
//    // flowing again.
//    // So, if this is awaiting a drain, then we just call it now.
//    // If we don't know, then assume that we are waiting for one.
//    if (!dest._writableState || dest._writableState.needDrain)
//      ondrain();
//  }

//  // if the dest has an error, then stop piping into it.
//  // however, don't suppress the throwing behavior for this.
//  function onerror(er) {
//    unpipe();
//    dest.removeListener('error', onerror);
//    if (EE.listenerCount(dest, 'error') === 0)
//      dest.emit('error', er);
//  }
//  // This is a brutally ugly hack to make sure that our error handler
//  // is attached before any userland ones.  NEVER DO THIS.
//  if (!dest._events || !dest._events.error)
//    dest.on('error', onerror);
//  else if (isArray(dest._events.error))
//    dest._events.error.unshift(onerror);
//  else
//    dest._events.error = [onerror, dest._events.error];



//  // Both close and finish should trigger unpipe, but only once.
//  function onclose() {
//    dest.removeListener('finish', onfinish);
//    unpipe();
//  }
//  dest.once('close', onclose);
//  function onfinish() {
//    dest.removeListener('close', onclose);
//    unpipe();
//  }
//  dest.once('finish', onfinish);

//  function unpipe() {
//    src.unpipe(dest);
//  }

//  // tell the dest that it's being piped to
//  dest.emit('pipe', src);

//  // start the flow if it hasn't been started already.
//  if (!state.flowing) {
//    // the handler that waits for readable events after all
//    // the data gets sucked out in flow.
//    // This would be easier to follow with a .once() handler
//    // in flow(), but that is too slow.
//    this.on('readable', pipeOnReadable);

//    state.flowing = true;
//    process.nextTick(function() {
//      flow(src);
//    });
//  }

//  return dest;
//};

//function pipeOnDrain(src) {
//  return function() {
//    var dest = this;
//    var state = src._readableState;
//    state.awaitDrain--;
//    if (state.awaitDrain === 0)
//      flow(src);
//  };
//}

//function flow(src) {
//  var state = src._readableState;
//  var chunk;
//  state.awaitDrain = 0;

//  function write(dest, i, list) {
//    var written = dest.write(chunk);
//    if (false === written) {
//      state.awaitDrain++;
//    }
//  }

//  while (state.pipesCount && null !== (chunk = src.read())) {

//    if (state.pipesCount === 1)
//      write(state.pipes, 0, null);
//    else
//      forEach(state.pipes, write);

//    src.emit('data', chunk);

//    // if anyone needs a drain, then we have to wait for that.
//    if (state.awaitDrain > 0)
//      return;
//  }

//  // if every destination was unpiped, either before entering this
//  // function, or in the while loop, then stop flowing.
//  //
//  // NB: This is a pretty rare edge case.
//  if (state.pipesCount === 0) {
//    state.flowing = false;

//    // if there were data event listeners added, then switch to old mode.
//    if (EE.listenerCount(src, 'data') > 0)
//      emitDataEvents(src);
//    return;
//  }

//  // at this point, no one needed a drain, so we just ran out of data
//  // on the next readable event, start it over again.
//  state.ranOut = true;
//}

//function pipeOnReadable() {
//  if (this._readableState.ranOut) {
//    this._readableState.ranOut = false;
//    flow(this);
//  }
//}


//Readable.prototype.unpipe = function(dest) {
//  var state = this._readableState;

//  // if we're not piping anywhere, then do nothing.
//  if (state.pipesCount === 0)
//    return this;

//  // just one destination.  most common case.
//  if (state.pipesCount === 1) {
//    // passed in one, but it's not the right one.
//    if (dest && dest !== state.pipes)
//      return this;

//    if (!dest)
//      dest = state.pipes;

//    // got a match.
//    state.pipes = null;
//    state.pipesCount = 0;
//    this.removeListener('readable', pipeOnReadable);
//    state.flowing = false;
//    if (dest)
//      dest.emit('unpipe', this);
//    return this;
//  }

//  // slow case. multiple pipe destinations.

//  if (!dest) {
//    // remove all.
//    var dests = state.pipes;
//    var len = state.pipesCount;
//    state.pipes = null;
//    state.pipesCount = 0;
//    this.removeListener('readable', pipeOnReadable);
//    state.flowing = false;

//    for (var i = 0; i < len; i++)
//      dests[i].emit('unpipe', this);
//    return this;
//  }

//  // try to find the right one.
//  var i = indexOf(state.pipes, dest);
//  if (i === -1)
//    return this;

//  state.pipes.splice(i, 1);
//  state.pipesCount -= 1;
//  if (state.pipesCount === 1)
//    state.pipes = state.pipes[0];

//  dest.emit('unpipe', this);

//  return this;
//};

//// set up data events if they are asked for
//// Ensure readable listeners eventually get something
//Readable.prototype.on = function(ev, fn) {
//  var res = Stream.prototype.on.call(this, ev, fn);

//  if (ev === 'data' && !this._readableState.flowing)
//    emitDataEvents(this);

//  if (ev === 'readable' && this.readable) {
//    var state = this._readableState;
//    if (!state.readableListening) {
//      state.readableListening = true;
//      state.emittedReadable = false;
//      state.needReadable = true;
//      if (!state.reading) {
//        this.read(0);
//      } else if (state.length) {
//        emitReadable(this, state);
//      }
//    }
//  }

//  return res;
//};
//Readable.prototype.addListener = Readable.prototype.on;

//// pause() and resume() are remnants of the legacy readable stream API
//// If the user uses them, then switch into old mode.
//Readable.prototype.resume = function() {
//  emitDataEvents(this);
//  this.read(0);
//  this.emit('resume');
//};

//Readable.prototype.pause = function() {
//  emitDataEvents(this, true);
//  this.emit('pause');
//};

//function emitDataEvents(stream, startPaused) {
//  var state = stream._readableState;

//  if (state.flowing) {
//    // https://github.com/isaacs/readable-stream/issues/16
//    throw new Error('Cannot switch to old mode now.');
//  }

//  var paused = startPaused || false;
//  var readable = false;

//  // convert to an old-style stream.
//  stream.readable = true;
//  stream.pipe = Stream.prototype.pipe;
//  stream.on = stream.addListener = Stream.prototype.on;

//  stream.on('readable', function() {
//    readable = true;

//    var c;
//    while (!paused && (null !== (c = stream.read())))
//      stream.emit('data', c);

//    if (c === null) {
//      readable = false;
//      stream._readableState.needReadable = true;
//    }
//  });

//  stream.pause = function() {
//    paused = true;
//    this.emit('pause');
//  };

//  stream.resume = function() {
//    paused = false;
//    if (readable)
//      process.nextTick(function() {
//        stream.emit('readable');
//      });
//    else
//      this.read(0);
//    this.emit('resume');
//  };

//  // now make it start, just in case it hadn't already.
//  stream.emit('readable');
//}

//// wrap an old-style stream as the async data source.
//// This is *not* part of the readable stream interface.
//// It is an ugly unfortunate mess of history.
//Readable.prototype.wrap = function(stream) {
//  var state = this._readableState;
//  var paused = false;

//  var self = this;
//  stream.on('end', function() {
//    if (state.decoder && !state.ended) {
//      var chunk = state.decoder.end();
//      if (chunk && chunk.length)
//        self.push(chunk);
//    }

//    self.push(null);
//  });

//  stream.on('data', function(chunk) {
//    if (state.decoder)
//      chunk = state.decoder.write(chunk);

//    // don't skip over falsy values in objectMode
//    //if (state.objectMode && util.isNullOrUndefined(chunk))
//    if (state.objectMode && (chunk === null || chunk === undefined))
//      return;
//    else if (!state.objectMode && (!chunk || !chunk.length))
//      return;

//    var ret = self.push(chunk);
//    if (!ret) {
//      paused = true;
//      stream.pause();
//    }
//  });

//  // proxy all the other methods.
//  // important when wrapping filters and duplexes.
//  for (var i in stream) {
//    if (typeof stream[i] === 'function' &&
//        typeof this[i] === 'undefined') {
//      this[i] = function(method) { return function() {
//        return stream[method].apply(stream, arguments);
//      }}(i);
//    }
//  }

//  // proxy certain important events.
//  var events = ['error', 'close', 'destroy', 'pause', 'resume'];
//  forEach(events, function(ev) {
//    stream.on(ev, self.emit.bind(self, ev));
//  });

//  // when we try to consume some more bytes, simply unpause the
//  // underlying stream.
//  self._read = function(n) {
//    if (paused) {
//      paused = false;
//      stream.resume();
//    }
//  };

//  return self;
//};



//// exposed for testing purposes only.
//Readable._fromList = fromList;

//// Pluck off n bytes from an array of buffers.
//// Length is the combined lengths of all the buffers in the list.
//function fromList(n, state) {
//  var list = state.buffer;
//  var length = state.length;
//  var stringMode = !!state.decoder;
//  var objectMode = !!state.objectMode;
//  var ret;

//  // nothing in the list, definitely empty.
//  if (list.length === 0)
//    return null;

//  if (length === 0)
//    ret = null;
//  else if (objectMode)
//    ret = list.shift();
//  else if (!n || n >= length) {
//    // read it all, truncate the array.
//    if (stringMode)
//      ret = list.join('');
//    else
//      ret = Buffer.concat(list, length);
//    list.length = 0;
//  } else {
//    // read just some of it.
//    if (n < list[0].length) {
//      // just take a part of the first list item.
//      // slice is the same for buffers and strings.
//      var buf = list[0];
//      ret = buf.slice(0, n);
//      list[0] = buf.slice(n);
//    } else if (n === list[0].length) {
//      // first list is a perfect match
//      ret = list.shift();
//    } else {
//      // complex case.
//      // we have enough to cover it, but it spans past the first buffer.
//      if (stringMode)
//        ret = '';
//      else
//        ret = new Buffer(n);

//      var c = 0;
//      for (var i = 0, l = list.length; i < l && c < n; i++) {
//        var buf = list[0];
//        var cpy = Math.min(n - c, buf.length);

//        if (stringMode)
//          ret += buf.slice(0, cpy);
//        else
//          buf.copy(ret, c, 0, cpy);

//        if (cpy < buf.length)
//          list[0] = buf.slice(cpy);
//        else
//          list.shift();

//        c += cpy;
//      }
//    }
//  }

//  return ret;
//}

//function endReadable(stream) {
//  var state = stream._readableState;

//  // If we get here before consuming all the bytes, then that is a
//  // bug in node.  Should never happen.
//  if (state.length > 0)
//    throw new Error('endReadable called on non-empty stream');

//  if (!state.endEmitted && state.calledRead) {
//    state.ended = true;
//    process.nextTick(function() {
//      // Check that we didn't get one last unshift.
//      if (!state.endEmitted && state.length === 0) {
//        state.endEmitted = true;
//        stream.readable = false;
//        stream.emit('end');
//      }
//    });
//  }
//}

//function forEach (xs, f) {
//  for (var i = 0, l = xs.length; i < l; i++) {
//    f(xs[i], i);
//  }
//}

//function indexOf (xs, x) {
//  for (var i = 0, l = xs.length; i < l; i++) {
//    if (xs[i] === x) return i;
//  }
//  return -1;
//}

//}).call(this,require('_process'))
//},{"_process":22,"buffer":3,"core-util-is":29,"events":19,"inherits":20,"isarray":21,"stream":35,"string_decoder/":30}],27:[function(require,module,exports){
//// Copyright Joyent, Inc. and other Node contributors.
////
//// Permission is hereby granted, free of charge, to any person obtaining a
//// copy of this software and associated documentation files (the
//// "Software"), to deal in the Software without restriction, including
//// without limitation the rights to use, copy, modify, merge, publish,
//// distribute, sublicense, and/or sell copies of the Software, and to permit
//// persons to whom the Software is furnished to do so, subject to the
//// following conditions:
////
//// The above copyright notice and this permission notice shall be included
//// in all copies or substantial portions of the Software.
////
//// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
//// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
//// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
//// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
//// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
//// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
//// USE OR OTHER DEALINGS IN THE SOFTWARE.


//// a transform stream is a readable/writable stream where you do
//// something with the data.  Sometimes it's called a "filter",
//// but that's not a great name for it, since that implies a thing where
//// some bits pass through, and others are simply ignored.  (That would
//// be a valid example of a transform, of course.)
////
//// While the output is causally related to the input, it's not a
//// necessarily symmetric or synchronous transformation.  For example,
//// a zlib stream might take multiple plain-text writes(), and then
//// emit a single compressed chunk some time in the future.
////
//// Here's how this works:
////
//// The Transform stream has all the aspects of the readable and writable
//// stream classes.  When you write(chunk), that calls _write(chunk,cb)
//// internally, and returns false if there's a lot of pending writes
//// buffered up.  When you call read(), that calls _read(n) until
//// there's enough pending readable data buffered up.
////
//// In a transform stream, the written data is placed in a buffer.  When
//// _read(n) is called, it transforms the queued up data, calling the
//// buffered _write cb's as it consumes chunks.  If consuming a single
//// written chunk would result in multiple output chunks, then the first
//// outputted bit calls the readcb, and subsequent chunks just go into
//// the read buffer, and will cause it to emit 'readable' if necessary.
////
//// This way, back-pressure is actually determined by the reading side,
//// since _read has to be called to start processing a new chunk.  However,
//// a pathological inflate type of transform can cause excessive buffering
//// here.  For example, imagine a stream where every byte of input is
//// interpreted as an integer from 0-255, and then results in that many
//// bytes of output.  Writing the 4 bytes {ff,ff,ff,ff} would result in
//// 1kb of data being output.  In this case, you could write a very small
//// amount of input, and end up with a very large amount of output.  In
//// such a pathological inflating mechanism, there'd be no way to tell
//// the system to stop doing the transform.  A single 4MB write could
//// cause the system to run out of memory.
////
//// However, even in such a pathological case, only a single written chunk
//// would be consumed, and then the rest would wait (un-transformed) until
//// the results of the previous transformed chunk were consumed.

//module.exports = Transform;

//var Duplex = require('./_stream_duplex');

///*<replacement>*/
//var util = require('core-util-is');
//util.inherits = require('inherits');
///*</replacement>*/

//util.inherits(Transform, Duplex);


//function TransformState(options, stream) {
//  this.afterTransform = function(er, data) {
//    return afterTransform(stream, er, data);
//  };

//  this.needTransform = false;
//  this.transforming = false;
//  this.writecb = null;
//  this.writechunk = null;
//}

//function afterTransform(stream, er, data) {
//  var ts = stream._transformState;
//  ts.transforming = false;

//  var cb = ts.writecb;

//  if (!cb)
//    return stream.emit('error', new Error('no writecb in Transform class'));

//  ts.writechunk = null;
//  ts.writecb = null;

//  if (data !== null && data !== undefined)
//    stream.push(data);

//  if (cb)
//    cb(er);

//  var rs = stream._readableState;
//  rs.reading = false;
//  if (rs.needReadable || rs.length < rs.highWaterMark) {
//    stream._read(rs.highWaterMark);
//  }
//}


//function Transform(options) {
//  if (!(this instanceof Transform))
//    return new Transform(options);

//  Duplex.call(this, options);

//  var ts = this._transformState = new TransformState(options, this);

//  // when the writable side finishes, then flush out anything remaining.
//  var stream = this;

//  // start out asking for a readable event once data is transformed.
//  this._readableState.needReadable = true;

//  // we have implemented the _read method, and done the other things
//  // that Readable wants before the first _read call, so unset the
//  // sync guard flag.
//  this._readableState.sync = false;

//  this.once('finish', function() {
//    if ('function' === typeof this._flush)
//      this._flush(function(er) {
//        done(stream, er);
//      });
//    else
//      done(stream);
//  });
//}

//Transform.prototype.push = function(chunk, encoding) {
//  this._transformState.needTransform = false;
//  return Duplex.prototype.push.call(this, chunk, encoding);
//};

//// This is the part where you do stuff!
//// override this function in implementation classes.
//// 'chunk' is an input chunk.
////
//// Call `push(newChunk)` to pass along transformed output
//// to the readable side.  You may call 'push' zero or more times.
////
//// Call `cb(err)` when you are done with this chunk.  If you pass
//// an error, then that'll put the hurt on the whole operation.  If you
//// never call cb(), then you'll never get another chunk.
//Transform.prototype._transform = function(chunk, encoding, cb) {
//  throw new Error('not implemented');
//};

//Transform.prototype._write = function(chunk, encoding, cb) {
//  var ts = this._transformState;
//  ts.writecb = cb;
//  ts.writechunk = chunk;
//  ts.writeencoding = encoding;
//  if (!ts.transforming) {
//    var rs = this._readableState;
//    if (ts.needTransform ||
//        rs.needReadable ||
//        rs.length < rs.highWaterMark)
//      this._read(rs.highWaterMark);
//  }
//};

//// Doesn't matter what the args are here.
//// _transform does all the work.
//// That we got here means that the readable side wants more data.
//Transform.prototype._read = function(n) {
//  var ts = this._transformState;

//  if (ts.writechunk !== null && ts.writecb && !ts.transforming) {
//    ts.transforming = true;
//    this._transform(ts.writechunk, ts.writeencoding, ts.afterTransform);
//  } else {
//    // mark that we need a transform, so that any data that comes in
//    // will get processed, now that we've asked for it.
//    ts.needTransform = true;
//  }
//};


//function done(stream, er) {
//  if (er)
//    return stream.emit('error', er);

//  // if there's nothing in the write buffer, then that means
//  // that nothing more will ever be provided
//  var ws = stream._writableState;
//  var rs = stream._readableState;
//  var ts = stream._transformState;

//  if (ws.length)
//    throw new Error('calling transform done when ws.length != 0');

//  if (ts.transforming)
//    throw new Error('calling transform done when still transforming');

//  return stream.push(null);
//}

//},{"./_stream_duplex":24,"core-util-is":29,"inherits":20}],28:[function(require,module,exports){
//(function (process){
//// Copyright Joyent, Inc. and other Node contributors.
////
//// Permission is hereby granted, free of charge, to any person obtaining a
//// copy of this software and associated documentation files (the
//// "Software"), to deal in the Software without restriction, including
//// without limitation the rights to use, copy, modify, merge, publish,
//// distribute, sublicense, and/or sell copies of the Software, and to permit
//// persons to whom the Software is furnished to do so, subject to the
//// following conditions:
////
//// The above copyright notice and this permission notice shall be included
//// in all copies or substantial portions of the Software.
////
//// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
//// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
//// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
//// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
//// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
//// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
//// USE OR OTHER DEALINGS IN THE SOFTWARE.

//// A bit simpler than readable streams.
//// Implement an async ._write(chunk, cb), and it'll handle all
//// the drain event emission and buffering.

//module.exports = Writable;

///*<replacement>*/
//var Buffer = require('buffer').Buffer;
///*</replacement>*/

//Writable.WritableState = WritableState;


///*<replacement>*/
//var util = require('core-util-is');
//util.inherits = require('inherits');
///*</replacement>*/

//var Stream = require('stream');

//util.inherits(Writable, Stream);

//function WriteReq(chunk, encoding, cb) {
//  this.chunk = chunk;
//  this.encoding = encoding;
//  this.callback = cb;
//}

//function WritableState(options, stream) {
//  options = options || {};

//  // the point at which write() starts returning false
//  // Note: 0 is a valid value, means that we always return false if
//  // the entire buffer is not flushed immediately on write()
//  var hwm = options.highWaterMark;
//  this.highWaterMark = (hwm || hwm === 0) ? hwm : 16 * 1024;

//  // object stream flag to indicate whether or not this stream
//  // contains buffers or objects.
//  this.objectMode = !!options.objectMode;

//  // cast to ints.
//  this.highWaterMark = ~~this.highWaterMark;

//  this.needDrain = false;
//  // at the start of calling end()
//  this.ending = false;
//  // when end() has been called, and returned
//  this.ended = false;
//  // when 'finish' is emitted
//  this.finished = false;

//  // should we decode strings into buffers before passing to _write?
//  // this is here so that some node-core streams can optimize string
//  // handling at a lower level.
//  var noDecode = options.decodeStrings === false;
//  this.decodeStrings = !noDecode;

//  // Crypto is kind of old and crusty.  Historically, its default string
//  // encoding is 'binary' so we have to make this configurable.
//  // Everything else in the universe uses 'utf8', though.
//  this.defaultEncoding = options.defaultEncoding || 'utf8';

//  // not an actual buffer we keep track of, but a measurement
//  // of how much we're waiting to get pushed to some underlying
//  // socket or file.
//  this.length = 0;

//  // a flag to see when we're in the middle of a write.
//  this.writing = false;

//  // a flag to be able to tell if the onwrite cb is called immediately,
//  // or on a later tick.  We set this to true at first, becuase any
//  // actions that shouldn't happen until "later" should generally also
//  // not happen before the first write call.
//  this.sync = true;

//  // a flag to know if we're processing previously buffered items, which
//  // may call the _write() callback in the same tick, so that we don't
//  // end up in an overlapped onwrite situation.
//  this.bufferProcessing = false;

//  // the callback that's passed to _write(chunk,cb)
//  this.onwrite = function(er) {
//    onwrite(stream, er);
//  };

//  // the callback that the user supplies to write(chunk,encoding,cb)
//  this.writecb = null;

//  // the amount that is being written when _write is called.
//  this.writelen = 0;

//  this.buffer = [];

//  // True if the error was already emitted and should not be thrown again
//  this.errorEmitted = false;
//}

//function Writable(options) {
//  var Duplex = require('./_stream_duplex');

//  // Writable ctor is applied to Duplexes, though they're not
//  // instanceof Writable, they're instanceof Readable.
//  if (!(this instanceof Writable) && !(this instanceof Duplex))
//    return new Writable(options);

//  this._writableState = new WritableState(options, this);

//  // legacy.
//  this.writable = true;

//  Stream.call(this);
//}

//// Otherwise people can pipe Writable streams, which is just wrong.
//Writable.prototype.pipe = function() {
//  this.emit('error', new Error('Cannot pipe. Not readable.'));
//};


//function writeAfterEnd(stream, state, cb) {
//  var er = new Error('write after end');
//  // TODO: defer error events consistently everywhere, not just the cb
//  stream.emit('error', er);
//  process.nextTick(function() {
//    cb(er);
//  });
//}

//// If we get something that is not a buffer, string, null, or undefined,
//// and we're not in objectMode, then that's an error.
//// Otherwise stream chunks are all considered to be of length=1, and the
//// watermarks determine how many objects to keep in the buffer, rather than
//// how many bytes or characters.
//function validChunk(stream, state, chunk, cb) {
//  var valid = true;
//  if (!Buffer.isBuffer(chunk) &&
//      'string' !== typeof chunk &&
//      chunk !== null &&
//      chunk !== undefined &&
//      !state.objectMode) {
//    var er = new TypeError('Invalid non-string/buffer chunk');
//    stream.emit('error', er);
//    process.nextTick(function() {
//      cb(er);
//    });
//    valid = false;
//  }
//  return valid;
//}

//Writable.prototype.write = function(chunk, encoding, cb) {
//  var state = this._writableState;
//  var ret = false;

//  if (typeof encoding === 'function') {
//    cb = encoding;
//    encoding = null;
//  }

//  if (Buffer.isBuffer(chunk))
//    encoding = 'buffer';
//  else if (!encoding)
//    encoding = state.defaultEncoding;

//  if (typeof cb !== 'function')
//    cb = function() {};

//  if (state.ended)
//    writeAfterEnd(this, state, cb);
//  else if (validChunk(this, state, chunk, cb))
//    ret = writeOrBuffer(this, state, chunk, encoding, cb);

//  return ret;
//};

//function decodeChunk(state, chunk, encoding) {
//  if (!state.objectMode &&
//      state.decodeStrings !== false &&
//      typeof chunk === 'string') {
//    chunk = new Buffer(chunk, encoding);
//  }
//  return chunk;
//}

//// if we're already writing something, then just put this
//// in the queue, and wait our turn.  Otherwise, call _write
//// If we return false, then we need a drain event, so set that flag.
//function writeOrBuffer(stream, state, chunk, encoding, cb) {
//  chunk = decodeChunk(state, chunk, encoding);
//  if (Buffer.isBuffer(chunk))
//    encoding = 'buffer';
//  var len = state.objectMode ? 1 : chunk.length;

//  state.length += len;

//  var ret = state.length < state.highWaterMark;
//  // we must ensure that previous needDrain will not be reset to false.
//  if (!ret)
//    state.needDrain = true;

//  if (state.writing)
//    state.buffer.push(new WriteReq(chunk, encoding, cb));
//  else
//    doWrite(stream, state, len, chunk, encoding, cb);

//  return ret;
//}

//function doWrite(stream, state, len, chunk, encoding, cb) {
//  state.writelen = len;
//  state.writecb = cb;
//  state.writing = true;
//  state.sync = true;
//  stream._write(chunk, encoding, state.onwrite);
//  state.sync = false;
//}

//function onwriteError(stream, state, sync, er, cb) {
//  if (sync)
//    process.nextTick(function() {
//      cb(er);
//    });
//  else
//    cb(er);

//  stream._writableState.errorEmitted = true;
//  stream.emit('error', er);
//}

//function onwriteStateUpdate(state) {
//  state.writing = false;
//  state.writecb = null;
//  state.length -= state.writelen;
//  state.writelen = 0;
//}

//function onwrite(stream, er) {
//  var state = stream._writableState;
//  var sync = state.sync;
//  var cb = state.writecb;

//  onwriteStateUpdate(state);

//  if (er)
//    onwriteError(stream, state, sync, er, cb);
//  else {
//    // Check if we're actually ready to finish, but don't emit yet
//    var finished = needFinish(stream, state);

//    if (!finished && !state.bufferProcessing && state.buffer.length)
//      clearBuffer(stream, state);

//    if (sync) {
//      process.nextTick(function() {
//        afterWrite(stream, state, finished, cb);
//      });
//    } else {
//      afterWrite(stream, state, finished, cb);
//    }
//  }
//}

//function afterWrite(stream, state, finished, cb) {
//  if (!finished)
//    onwriteDrain(stream, state);
//  cb();
//  if (finished)
//    finishMaybe(stream, state);
//}

//// Must force callback to be called on nextTick, so that we don't
//// emit 'drain' before the write() consumer gets the 'false' return
//// value, and has a chance to attach a 'drain' listener.
//function onwriteDrain(stream, state) {
//  if (state.length === 0 && state.needDrain) {
//    state.needDrain = false;
//    stream.emit('drain');
//  }
//}


//// if there's something in the buffer waiting, then process it
//function clearBuffer(stream, state) {
//  state.bufferProcessing = true;

//  for (var c = 0; c < state.buffer.length; c++) {
//    var entry = state.buffer[c];
//    var chunk = entry.chunk;
//    var encoding = entry.encoding;
//    var cb = entry.callback;
//    var len = state.objectMode ? 1 : chunk.length;

//    doWrite(stream, state, len, chunk, encoding, cb);

//    // if we didn't call the onwrite immediately, then
//    // it means that we need to wait until it does.
//    // also, that means that the chunk and cb are currently
//    // being processed, so move the buffer counter past them.
//    if (state.writing) {
//      c++;
//      break;
//    }
//  }

//  state.bufferProcessing = false;
//  if (c < state.buffer.length)
//    state.buffer = state.buffer.slice(c);
//  else
//    state.buffer.length = 0;
//}

//Writable.prototype._write = function(chunk, encoding, cb) {
//  cb(new Error('not implemented'));
//};

//Writable.prototype.end = function(chunk, encoding, cb) {
//  var state = this._writableState;

//  if (typeof chunk === 'function') {
//    cb = chunk;
//    chunk = null;
//    encoding = null;
//  } else if (typeof encoding === 'function') {
//    cb = encoding;
//    encoding = null;
//  }

//  if (typeof chunk !== 'undefined' && chunk !== null)
//    this.write(chunk, encoding);

//  // ignore unnecessary end() calls.
//  if (!state.ending && !state.finished)
//    endWritable(this, state, cb);
//};


//function needFinish(stream, state) {
//  return (state.ending &&
//          state.length === 0 &&
//          !state.finished &&
//          !state.writing);
//}

//function finishMaybe(stream, state) {
//  var need = needFinish(stream, state);
//  if (need) {
//    state.finished = true;
//    stream.emit('finish');
//  }
//  return need;
//}

//function endWritable(stream, state, cb) {
//  state.ending = true;
//  finishMaybe(stream, state);
//  if (cb) {
//    if (state.finished)
//      process.nextTick(cb);
//    else
//      stream.once('finish', cb);
//  }
//  state.ended = true;
//}

//}).call(this,require('_process'))
//},{"./_stream_duplex":24,"_process":22,"buffer":3,"core-util-is":29,"inherits":20,"stream":35}],29:[function(require,module,exports){
//(function (Buffer){
//// Copyright Joyent, Inc. and other Node contributors.
////
//// Permission is hereby granted, free of charge, to any person obtaining a
//// copy of this software and associated documentation files (the
//// "Software"), to deal in the Software without restriction, including
//// without limitation the rights to use, copy, modify, merge, publish,
//// distribute, sublicense, and/or sell copies of the Software, and to permit
//// persons to whom the Software is furnished to do so, subject to the
//// following conditions:
////
//// The above copyright notice and this permission notice shall be included
//// in all copies or substantial portions of the Software.
////
//// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
//// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
//// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
//// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
//// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
//// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
//// USE OR OTHER DEALINGS IN THE SOFTWARE.

//// NOTE: These type checking functions intentionally don't use `instanceof`
//// because it is fragile and can be easily faked with `Object.create()`.
//function isArray(ar) {
//  return Array.isArray(ar);
//}
//exports.isArray = isArray;

//function isBoolean(arg) {
//  return typeof arg === 'boolean';
//}
//exports.isBoolean = isBoolean;

//function isNull(arg) {
//  return arg === null;
//}
//exports.isNull = isNull;

//function isNullOrUndefined(arg) {
//  return arg == null;
//}
//exports.isNullOrUndefined = isNullOrUndefined;

//function isNumber(arg) {
//  return typeof arg === 'number';
//}
//exports.isNumber = isNumber;

//function isString(arg) {
//  return typeof arg === 'string';
//}
//exports.isString = isString;

//function isSymbol(arg) {
//  return typeof arg === 'symbol';
//}
//exports.isSymbol = isSymbol;

//function isUndefined(arg) {
//  return arg === void 0;
//}
//exports.isUndefined = isUndefined;

//function isRegExp(re) {
//  return isObject(re) && objectToString(re) === '[object RegExp]';
//}
//exports.isRegExp = isRegExp;

//function isObject(arg) {
//  return typeof arg === 'object' && arg !== null;
//}
//exports.isObject = isObject;

//function isDate(d) {
//  return isObject(d) && objectToString(d) === '[object Date]';
//}
//exports.isDate = isDate;

//function isError(e) {
//  return isObject(e) &&
//      (objectToString(e) === '[object Error]' || e instanceof Error);
//}
//exports.isError = isError;

//function isFunction(arg) {
//  return typeof arg === 'function';
//}
//exports.isFunction = isFunction;

//function isPrimitive(arg) {
//  return arg === null ||
//         typeof arg === 'boolean' ||
//         typeof arg === 'number' ||
//         typeof arg === 'string' ||
//         typeof arg === 'symbol' ||  // ES6 symbol
//         typeof arg === 'undefined';
//}
//exports.isPrimitive = isPrimitive;

//function isBuffer(arg) {
//  return Buffer.isBuffer(arg);
//}
//exports.isBuffer = isBuffer;

//function objectToString(o) {
//  return Object.prototype.toString.call(o);
//}
//}).call(this,require("buffer").Buffer)
//},{"buffer":3}],30:[function(require,module,exports){
//// Copyright Joyent, Inc. and other Node contributors.
////
//// Permission is hereby granted, free of charge, to any person obtaining a
//// copy of this software and associated documentation files (the
//// "Software"), to deal in the Software without restriction, including
//// without limitation the rights to use, copy, modify, merge, publish,
//// distribute, sublicense, and/or sell copies of the Software, and to permit
//// persons to whom the Software is furnished to do so, subject to the
//// following conditions:
////
//// The above copyright notice and this permission notice shall be included
//// in all copies or substantial portions of the Software.
////
//// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
//// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
//// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
//// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
//// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
//// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
//// USE OR OTHER DEALINGS IN THE SOFTWARE.

//var Buffer = require('buffer').Buffer;

//var isBufferEncoding = Buffer.isEncoding
//  || function(encoding) {
//       switch (encoding && encoding.toLowerCase()) {
//         case 'hex': case 'utf8': case 'utf-8': case 'ascii': case 'binary': case 'base64': case 'ucs2': case 'ucs-2': case 'utf16le': case 'utf-16le': case 'raw': return true;
//         default: return false;
//       }
//     }


//function assertEncoding(encoding) {
//  if (encoding && !isBufferEncoding(encoding)) {
//    throw new Error('Unknown encoding: ' + encoding);
//  }
//}

//// StringDecoder provides an interface for efficiently splitting a series of
//// buffers into a series of JS strings without breaking apart multi-byte
//// characters. CESU-8 is handled as part of the UTF-8 encoding.
////
//// @TODO Handling all encodings inside a single object makes it very difficult
//// to reason about this code, so it should be split up in the future.
//// @TODO There should be a utf8-strict encoding that rejects invalid UTF-8 code
//// points as used by CESU-8.
//var StringDecoder = exports.StringDecoder = function(encoding) {
//  this.encoding = (encoding || 'utf8').toLowerCase().replace(/[-_]/, '');
//  assertEncoding(encoding);
//  switch (this.encoding) {
//    case 'utf8':
//      // CESU-8 represents each of Surrogate Pair by 3-bytes
//      this.surrogateSize = 3;
//      break;
//    case 'ucs2':
//    case 'utf16le':
//      // UTF-16 represents each of Surrogate Pair by 2-bytes
//      this.surrogateSize = 2;
//      this.detectIncompleteChar = utf16DetectIncompleteChar;
//      break;
//    case 'base64':
//      // Base-64 stores 3 bytes in 4 chars, and pads the remainder.
//      this.surrogateSize = 3;
//      this.detectIncompleteChar = base64DetectIncompleteChar;
//      break;
//    default:
//      this.write = passThroughWrite;
//      return;
//  }

//  // Enough space to store all bytes of a single character. UTF-8 needs 4
//  // bytes, but CESU-8 may require up to 6 (3 bytes per surrogate).
//  this.charBuffer = new Buffer(6);
//  // Number of bytes received for the current incomplete multi-byte character.
//  this.charReceived = 0;
//  // Number of bytes expected for the current incomplete multi-byte character.
//  this.charLength = 0;
//};


//// write decodes the given buffer and returns it as JS string that is
//// guaranteed to not contain any partial multi-byte characters. Any partial
//// character found at the end of the buffer is buffered up, and will be
//// returned when calling write again with the remaining bytes.
////
//// Note: Converting a Buffer containing an orphan surrogate to a String
//// currently works, but converting a String to a Buffer (via `new Buffer`, or
//// Buffer#write) will replace incomplete surrogates with the unicode
//// replacement character. See https://codereview.chromium.org/121173009/ .
//StringDecoder.prototype.write = function(buffer) {
//  var charStr = '';
//  // if our last write ended with an incomplete multibyte character
//  while (this.charLength) {
//    // determine how many remaining bytes this buffer has to offer for this char
//    var available = (buffer.length >= this.charLength - this.charReceived) ?
//        this.charLength - this.charReceived :
//        buffer.length;

//    // add the new bytes to the char buffer
//    buffer.copy(this.charBuffer, this.charReceived, 0, available);
//    this.charReceived += available;

//    if (this.charReceived < this.charLength) {
//      // still not enough chars in this buffer? wait for more ...
//      return '';
//    }

//    // remove bytes belonging to the current character from the buffer
//    buffer = buffer.slice(available, buffer.length);

//    // get the character that was split
//    charStr = this.charBuffer.slice(0, this.charLength).toString(this.encoding);

//    // CESU-8: lead surrogate (D800-DBFF) is also the incomplete character
//    var charCode = charStr.charCodeAt(charStr.length - 1);
//    if (charCode >= 0xD800 && charCode <= 0xDBFF) {
//      this.charLength += this.surrogateSize;
//      charStr = '';
//      continue;
//    }
//    this.charReceived = this.charLength = 0;

//    // if there are no more bytes in this buffer, just emit our char
//    if (buffer.length === 0) {
//      return charStr;
//    }
//    break;
//  }

//  // determine and set charLength / charReceived
//  this.detectIncompleteChar(buffer);

//  var end = buffer.length;
//  if (this.charLength) {
//    // buffer the incomplete character bytes we got
//    buffer.copy(this.charBuffer, 0, buffer.length - this.charReceived, end);
//    end -= this.charReceived;
//  }

//  charStr += buffer.toString(this.encoding, 0, end);

//  var end = charStr.length - 1;
//  var charCode = charStr.charCodeAt(end);
//  // CESU-8: lead surrogate (D800-DBFF) is also the incomplete character
//  if (charCode >= 0xD800 && charCode <= 0xDBFF) {
//    var size = this.surrogateSize;
//    this.charLength += size;
//    this.charReceived += size;
//    this.charBuffer.copy(this.charBuffer, size, 0, size);
//    buffer.copy(this.charBuffer, 0, 0, size);
//    return charStr.substring(0, end);
//  }

//  // or just emit the charStr
//  return charStr;
//};

//// detectIncompleteChar determines if there is an incomplete UTF-8 character at
//// the end of the given buffer. If so, it sets this.charLength to the byte
//// length that character, and sets this.charReceived to the number of bytes
//// that are available for this character.
//StringDecoder.prototype.detectIncompleteChar = function(buffer) {
//  // determine how many bytes we have to check at the end of this buffer
//  var i = (buffer.length >= 3) ? 3 : buffer.length;

//  // Figure out if one of the last i bytes of our buffer announces an
//  // incomplete char.
//  for (; i > 0; i--) {
//    var c = buffer[buffer.length - i];

//    // See http://en.wikipedia.org/wiki/UTF-8#Description

//    // 110XXXXX
//    if (i == 1 && c >> 5 == 0x06) {
//      this.charLength = 2;
//      break;
//    }

//    // 1110XXXX
//    if (i <= 2 && c >> 4 == 0x0E) {
//      this.charLength = 3;
//      break;
//    }

//    // 11110XXX
//    if (i <= 3 && c >> 3 == 0x1E) {
//      this.charLength = 4;
//      break;
//    }
//  }
//  this.charReceived = i;
//};

//StringDecoder.prototype.end = function(buffer) {
//  var res = '';
//  if (buffer && buffer.length)
//    res = this.write(buffer);

//  if (this.charReceived) {
//    var cr = this.charReceived;
//    var buf = this.charBuffer;
//    var enc = this.encoding;
//    res += buf.slice(0, cr).toString(enc);
//  }

//  return res;
//};

//function passThroughWrite(buffer) {
//  return buffer.toString(this.encoding);
//}

//function utf16DetectIncompleteChar(buffer) {
//  this.charReceived = buffer.length % 2;
//  this.charLength = this.charReceived ? 2 : 0;
//}

//function base64DetectIncompleteChar(buffer) {
//  this.charReceived = buffer.length % 3;
//  this.charLength = this.charReceived ? 3 : 0;
//}

//},{"buffer":3}],31:[function(require,module,exports){
//module.exports = require("./lib/_stream_passthrough.js")

//},{"./lib/_stream_passthrough.js":25}],32:[function(require,module,exports){
//exports = module.exports = require('./lib/_stream_readable.js');
//exports.Readable = exports;
//exports.Writable = require('./lib/_stream_writable.js');
//exports.Duplex = require('./lib/_stream_duplex.js');
//exports.Transform = require('./lib/_stream_transform.js');
//exports.PassThrough = require('./lib/_stream_passthrough.js');

//},{"./lib/_stream_duplex.js":24,"./lib/_stream_passthrough.js":25,"./lib/_stream_readable.js":26,"./lib/_stream_transform.js":27,"./lib/_stream_writable.js":28}],33:[function(require,module,exports){
//module.exports = require("./lib/_stream_transform.js")

//},{"./lib/_stream_transform.js":27}],34:[function(require,module,exports){
//module.exports = require("./lib/_stream_writable.js")

//},{"./lib/_stream_writable.js":28}],35:[function(require,module,exports){
//// Copyright Joyent, Inc. and other Node contributors.
////
//// Permission is hereby granted, free of charge, to any person obtaining a
//// copy of this software and associated documentation files (the
//// "Software"), to deal in the Software without restriction, including
//// without limitation the rights to use, copy, modify, merge, publish,
//// distribute, sublicense, and/or sell copies of the Software, and to permit
//// persons to whom the Software is furnished to do so, subject to the
//// following conditions:
////
//// The above copyright notice and this permission notice shall be included
//// in all copies or substantial portions of the Software.
////
//// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
//// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
//// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
//// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
//// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
//// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
//// USE OR OTHER DEALINGS IN THE SOFTWARE.

//module.exports = Stream;

//var EE = require('events').EventEmitter;
//var inherits = require('inherits');

//inherits(Stream, EE);
//Stream.Readable = require('readable-stream/readable.js');
//Stream.Writable = require('readable-stream/writable.js');
//Stream.Duplex = require('readable-stream/duplex.js');
//Stream.Transform = require('readable-stream/transform.js');
//Stream.PassThrough = require('readable-stream/passthrough.js');

//// Backwards-compat with node 0.4.x
//Stream.Stream = Stream;



//// old-style streams.  Note that the pipe method (the only relevant
//// part of this class) is overridden in the Readable class.

//function Stream() {
//  EE.call(this);
//}

//Stream.prototype.pipe = function(dest, options) {
//  var source = this;

//  function ondata(chunk) {
//    if (dest.writable) {
//      if (false === dest.write(chunk) && source.pause) {
//        source.pause();
//      }
//    }
//  }

//  source.on('data', ondata);

//  function ondrain() {
//    if (source.readable && source.resume) {
//      source.resume();
//    }
//  }

//  dest.on('drain', ondrain);

//  // If the 'end' option is not supplied, dest.end() will be called when
//  // source gets the 'end' or 'close' events.  Only dest.end() once.
//  if (!dest._isStdio && (!options || options.end !== false)) {
//    source.on('end', onend);
//    source.on('close', onclose);
//  }

//  var didOnEnd = false;
//  function onend() {
//    if (didOnEnd) return;
//    didOnEnd = true;

//    dest.end();
//  }


//  function onclose() {
//    if (didOnEnd) return;
//    didOnEnd = true;

//    if (typeof dest.destroy === 'function') dest.destroy();
//  }

//  // don't leave dangling pipes when there are errors.
//  function onerror(er) {
//    cleanup();
//    if (EE.listenerCount(this, 'error') === 0) {
//      throw er; // Unhandled stream error in pipe.
//    }
//  }

//  source.on('error', onerror);
//  dest.on('error', onerror);

//  // remove all the event listeners that were added.
//  function cleanup() {
//    source.removeListener('data', ondata);
//    dest.removeListener('drain', ondrain);

//    source.removeListener('end', onend);
//    source.removeListener('close', onclose);

//    source.removeListener('error', onerror);
//    dest.removeListener('error', onerror);

//    source.removeListener('end', cleanup);
//    source.removeListener('close', cleanup);

//    dest.removeListener('close', cleanup);
//  }

//  source.on('end', cleanup);
//  source.on('close', cleanup);

//  dest.on('close', cleanup);

//  dest.emit('pipe', source);

//  // Allow for unix-like usage: A.pipe(B).pipe(C)
//  return dest;
//};

//},{"events":19,"inherits":20,"readable-stream/duplex.js":23,"readable-stream/passthrough.js":31,"readable-stream/readable.js":32,"readable-stream/transform.js":33,"readable-stream/writable.js":34}],36:[function(require,module,exports){
//module.exports = function isBuffer(arg) {
//  return arg && typeof arg === 'object'
//    && typeof arg.copy === 'function'
//    && typeof arg.fill === 'function'
//    && typeof arg.readUInt8 === 'function';
//}
//},{}],37:[function(require,module,exports){
//(function (process,global){
//// Copyright Joyent, Inc. and other Node contributors.
////
//// Permission is hereby granted, free of charge, to any person obtaining a
//// copy of this software and associated documentation files (the
//// "Software"), to deal in the Software without restriction, including
//// without limitation the rights to use, copy, modify, merge, publish,
//// distribute, sublicense, and/or sell copies of the Software, and to permit
//// persons to whom the Software is furnished to do so, subject to the
//// following conditions:
////
//// The above copyright notice and this permission notice shall be included
//// in all copies or substantial portions of the Software.
////
//// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
//// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
//// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
//// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
//// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
//// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
//// USE OR OTHER DEALINGS IN THE SOFTWARE.

//var formatRegExp = /%[sdj%]/g;
//exports.format = function(f) {
//  if (!isString(f)) {
//    var objects = [];
//    for (var i = 0; i < arguments.length; i++) {
//      objects.push(inspect(arguments[i]));
//    }
//    return objects.join(' ');
//  }

//  var i = 1;
//  var args = arguments;
//  var len = args.length;
//  var str = String(f).replace(formatRegExp, function(x) {
//    if (x === '%%') return '%';
//    if (i >= len) return x;
//    switch (x) {
//      case '%s': return String(args[i++]);
//      case '%d': return Number(args[i++]);
//      case '%j':
//        try {
//          return JSON.stringify(args[i++]);
//        } catch (_) {
//          return '[Circular]';
//        }
//      default:
//        return x;
//    }
//  });
//  for (var x = args[i]; i < len; x = args[++i]) {
//    if (isNull(x) || !isObject(x)) {
//      str += ' ' + x;
//    } else {
//      str += ' ' + inspect(x);
//    }
//  }
//  return str;
//};


//// Mark that a method should not be used.
//// Returns a modified function which warns once by default.
//// If --no-deprecation is set, then it is a no-op.
//exports.deprecate = function(fn, msg) {
//  // Allow for deprecating things in the process of starting up.
//  if (isUndefined(global.process)) {
//    return function() {
//      return exports.deprecate(fn, msg).apply(this, arguments);
//    };
//  }

//  if (process.noDeprecation === true) {
//    return fn;
//  }

//  var warned = false;
//  function deprecated() {
//    if (!warned) {
//      if (process.throwDeprecation) {
//        throw new Error(msg);
//      } else if (process.traceDeprecation) {
//        console.trace(msg);
//      } else {
//        console.error(msg);
//      }
//      warned = true;
//    }
//    return fn.apply(this, arguments);
//  }

//  return deprecated;
//};


//var debugs = {};
//var debugEnviron;
//exports.debuglog = function(set) {
//  if (isUndefined(debugEnviron))
//    debugEnviron = process.env.NODE_DEBUG || '';
//  set = set.toUpperCase();
//  if (!debugs[set]) {
//    if (new RegExp('\\b' + set + '\\b', 'i').test(debugEnviron)) {
//      var pid = process.pid;
//      debugs[set] = function() {
//        var msg = exports.format.apply(exports, arguments);
//        console.error('%s %d: %s', set, pid, msg);
//      };
//    } else {
//      debugs[set] = function() {};
//    }
//  }
//  return debugs[set];
//};


///**
// * Echos the value of a value. Trys to print the value out
// * in the best way possible given the different types.
// *
// * @param {Object} obj The object to print out.
// * @param {Object} opts Optional options object that alters the output.
// */
///* legacy: obj, showHidden, depth, colors*/
//function inspect(obj, opts) {
//  // default options
//  var ctx = {
//    seen: [],
//    stylize: stylizeNoColor
//  };
//  // legacy...
//  if (arguments.length >= 3) ctx.depth = arguments[2];
//  if (arguments.length >= 4) ctx.colors = arguments[3];
//  if (isBoolean(opts)) {
//    // legacy...
//    ctx.showHidden = opts;
//  } else if (opts) {
//    // got an "options" object
//    exports._extend(ctx, opts);
//  }
//  // set default options
//  if (isUndefined(ctx.showHidden)) ctx.showHidden = false;
//  if (isUndefined(ctx.depth)) ctx.depth = 2;
//  if (isUndefined(ctx.colors)) ctx.colors = false;
//  if (isUndefined(ctx.customInspect)) ctx.customInspect = true;
//  if (ctx.colors) ctx.stylize = stylizeWithColor;
//  return formatValue(ctx, obj, ctx.depth);
//}
//exports.inspect = inspect;


//// http://en.wikipedia.org/wiki/ANSI_escape_code#graphics
//inspect.colors = {
//  'bold' : [1, 22],
//  'italic' : [3, 23],
//  'underline' : [4, 24],
//  'inverse' : [7, 27],
//  'white' : [37, 39],
//  'grey' : [90, 39],
//  'black' : [30, 39],
//  'blue' : [34, 39],
//  'cyan' : [36, 39],
//  'green' : [32, 39],
//  'magenta' : [35, 39],
//  'red' : [31, 39],
//  'yellow' : [33, 39]
//};

//// Don't use 'blue' not visible on cmd.exe
//inspect.styles = {
//  'special': 'cyan',
//  'number': 'yellow',
//  'boolean': 'yellow',
//  'undefined': 'grey',
//  'null': 'bold',
//  'string': 'green',
//  'date': 'magenta',
//  // "name": intentionally not styling
//  'regexp': 'red'
//};


//function stylizeWithColor(str, styleType) {
//  var style = inspect.styles[styleType];

//  if (style) {
//    return '\u001b[' + inspect.colors[style][0] + 'm' + str +
//           '\u001b[' + inspect.colors[style][1] + 'm';
//  } else {
//    return str;
//  }
//}


//function stylizeNoColor(str, styleType) {
//  return str;
//}


//function arrayToHash(array) {
//  var hash = {};

//  array.forEach(function(val, idx) {
//    hash[val] = true;
//  });

//  return hash;
//}


//function formatValue(ctx, value, recurseTimes) {
//  // Provide a hook for user-specified inspect functions.
//  // Check that value is an object with an inspect function on it
//  if (ctx.customInspect &&
//      value &&
//      isFunction(value.inspect) &&
//      // Filter out the util module, it's inspect function is special
//      value.inspect !== exports.inspect &&
//      // Also filter out any prototype objects using the circular check.
//      !(value.constructor && value.constructor.prototype === value)) {
//    var ret = value.inspect(recurseTimes, ctx);
//    if (!isString(ret)) {
//      ret = formatValue(ctx, ret, recurseTimes);
//    }
//    return ret;
//  }

//  // Primitive types cannot have properties
//  var primitive = formatPrimitive(ctx, value);
//  if (primitive) {
//    return primitive;
//  }

//  // Look up the keys of the object.
//  var keys = Object.keys(value);
//  var visibleKeys = arrayToHash(keys);

//  if (ctx.showHidden) {
//    keys = Object.getOwnPropertyNames(value);
//  }

//  // IE doesn't make error fields non-enumerable
//  // http://msdn.microsoft.com/en-us/library/ie/dww52sbt(v=vs.94).aspx
//  if (isError(value)
//      && (keys.indexOf('message') >= 0 || keys.indexOf('description') >= 0)) {
//    return formatError(value);
//  }

//  // Some type of object without properties can be shortcutted.
//  if (keys.length === 0) {
//    if (isFunction(value)) {
//      var name = value.name ? ': ' + value.name : '';
//      return ctx.stylize('[Function' + name + ']', 'special');
//    }
//    if (isRegExp(value)) {
//      return ctx.stylize(RegExp.prototype.toString.call(value), 'regexp');
//    }
//    if (isDate(value)) {
//      return ctx.stylize(Date.prototype.toString.call(value), 'date');
//    }
//    if (isError(value)) {
//      return formatError(value);
//    }
//  }

//  var base = '', array = false, braces = ['{', '}'];

//  // Make Array say that they are Array
//  if (isArray(value)) {
//    array = true;
//    braces = ['[', ']'];
//  }

//  // Make functions say that they are functions
//  if (isFunction(value)) {
//    var n = value.name ? ': ' + value.name : '';
//    base = ' [Function' + n + ']';
//  }

//  // Make RegExps say that they are RegExps
//  if (isRegExp(value)) {
//    base = ' ' + RegExp.prototype.toString.call(value);
//  }

//  // Make dates with properties first say the date
//  if (isDate(value)) {
//    base = ' ' + Date.prototype.toUTCString.call(value);
//  }

//  // Make error with message first say the error
//  if (isError(value)) {
//    base = ' ' + formatError(value);
//  }

//  if (keys.length === 0 && (!array || value.length == 0)) {
//    return braces[0] + base + braces[1];
//  }

//  if (recurseTimes < 0) {
//    if (isRegExp(value)) {
//      return ctx.stylize(RegExp.prototype.toString.call(value), 'regexp');
//    } else {
//      return ctx.stylize('[Object]', 'special');
//    }
//  }

//  ctx.seen.push(value);

//  var output;
//  if (array) {
//    output = formatArray(ctx, value, recurseTimes, visibleKeys, keys);
//  } else {
//    output = keys.map(function(key) {
//      return formatProperty(ctx, value, recurseTimes, visibleKeys, key, array);
//    });
//  }

//  ctx.seen.pop();

//  return reduceToSingleString(output, base, braces);
//}


//function formatPrimitive(ctx, value) {
//  if (isUndefined(value))
//    return ctx.stylize('undefined', 'undefined');
//  if (isString(value)) {
//    var simple = '\'' + JSON.stringify(value).replace(/^"|"$/g, '')
//                                             .replace(/'/g, "\\'")
//                                             .replace(/\\"/g, '"') + '\'';
//    return ctx.stylize(simple, 'string');
//  }
//  if (isNumber(value))
//    return ctx.stylize('' + value, 'number');
//  if (isBoolean(value))
//    return ctx.stylize('' + value, 'boolean');
//  // For some reason typeof null is "object", so special case here.
//  if (isNull(value))
//    return ctx.stylize('null', 'null');
//}


//function formatError(value) {
//  return '[' + Error.prototype.toString.call(value) + ']';
//}


//function formatArray(ctx, value, recurseTimes, visibleKeys, keys) {
//  var output = [];
//  for (var i = 0, l = value.length; i < l; ++i) {
//    if (hasOwnProperty(value, String(i))) {
//      output.push(formatProperty(ctx, value, recurseTimes, visibleKeys,
//          String(i), true));
//    } else {
//      output.push('');
//    }
//  }
//  keys.forEach(function(key) {
//    if (!key.match(/^\d+$/)) {
//      output.push(formatProperty(ctx, value, recurseTimes, visibleKeys,
//          key, true));
//    }
//  });
//  return output;
//}


//function formatProperty(ctx, value, recurseTimes, visibleKeys, key, array) {
//  var name, str, desc;
//  desc = Object.getOwnPropertyDescriptor(value, key) || { value: value[key] };
//  if (desc.get) {
//    if (desc.set) {
//      str = ctx.stylize('[Getter/Setter]', 'special');
//    } else {
//      str = ctx.stylize('[Getter]', 'special');
//    }
//  } else {
//    if (desc.set) {
//      str = ctx.stylize('[Setter]', 'special');
//    }
//  }
//  if (!hasOwnProperty(visibleKeys, key)) {
//    name = '[' + key + ']';
//  }
//  if (!str) {
//    if (ctx.seen.indexOf(desc.value) < 0) {
//      if (isNull(recurseTimes)) {
//        str = formatValue(ctx, desc.value, null);
//      } else {
//        str = formatValue(ctx, desc.value, recurseTimes - 1);
//      }
//      if (str.indexOf('\n') > -1) {
//        if (array) {
//          str = str.split('\n').map(function(line) {
//            return '  ' + line;
//          }).join('\n').substr(2);
//        } else {
//          str = '\n' + str.split('\n').map(function(line) {
//            return '   ' + line;
//          }).join('\n');
//        }
//      }
//    } else {
//      str = ctx.stylize('[Circular]', 'special');
//    }
//  }
//  if (isUndefined(name)) {
//    if (array && key.match(/^\d+$/)) {
//      return str;
//    }
//    name = JSON.stringify('' + key);
//    if (name.match(/^"([a-zA-Z_][a-zA-Z_0-9]*)"$/)) {
//      name = name.substr(1, name.length - 2);
//      name = ctx.stylize(name, 'name');
//    } else {
//      name = name.replace(/'/g, "\\'")
//                 .replace(/\\"/g, '"')
//                 .replace(/(^"|"$)/g, "'");
//      name = ctx.stylize(name, 'string');
//    }
//  }

//  return name + ': ' + str;
//}


//function reduceToSingleString(output, base, braces) {
//  var numLinesEst = 0;
//  var length = output.reduce(function(prev, cur) {
//    numLinesEst++;
//    if (cur.indexOf('\n') >= 0) numLinesEst++;
//    return prev + cur.replace(/\u001b\[\d\d?m/g, '').length + 1;
//  }, 0);

//  if (length > 60) {
//    return braces[0] +
//           (base === '' ? '' : base + '\n ') +
//           ' ' +
//           output.join(',\n  ') +
//           ' ' +
//           braces[1];
//  }

//  return braces[0] + base + ' ' + output.join(', ') + ' ' + braces[1];
//}


//// NOTE: These type checking functions intentionally don't use `instanceof`
//// because it is fragile and can be easily faked with `Object.create()`.
//function isArray(ar) {
//  return Array.isArray(ar);
//}
//exports.isArray = isArray;

//function isBoolean(arg) {
//  return typeof arg === 'boolean';
//}
//exports.isBoolean = isBoolean;

//function isNull(arg) {
//  return arg === null;
//}
//exports.isNull = isNull;

//function isNullOrUndefined(arg) {
//  return arg == null;
//}
//exports.isNullOrUndefined = isNullOrUndefined;

//function isNumber(arg) {
//  return typeof arg === 'number';
//}
//exports.isNumber = isNumber;

//function isString(arg) {
//  return typeof arg === 'string';
//}
//exports.isString = isString;

//function isSymbol(arg) {
//  return typeof arg === 'symbol';
//}
//exports.isSymbol = isSymbol;

//function isUndefined(arg) {
//  return arg === void 0;
//}
//exports.isUndefined = isUndefined;

//function isRegExp(re) {
//  return isObject(re) && objectToString(re) === '[object RegExp]';
//}
//exports.isRegExp = isRegExp;

//function isObject(arg) {
//  return typeof arg === 'object' && arg !== null;
//}
//exports.isObject = isObject;

//function isDate(d) {
//  return isObject(d) && objectToString(d) === '[object Date]';
//}
//exports.isDate = isDate;

//function isError(e) {
//  return isObject(e) &&
//      (objectToString(e) === '[object Error]' || e instanceof Error);
//}
//exports.isError = isError;

//function isFunction(arg) {
//  return typeof arg === 'function';
//}
//exports.isFunction = isFunction;

//function isPrimitive(arg) {
//  return arg === null ||
//         typeof arg === 'boolean' ||
//         typeof arg === 'number' ||
//         typeof arg === 'string' ||
//         typeof arg === 'symbol' ||  // ES6 symbol
//         typeof arg === 'undefined';
//}
//exports.isPrimitive = isPrimitive;

//exports.isBuffer = require('./support/isBuffer');

//function objectToString(o) {
//  return Object.prototype.toString.call(o);
//}


//function pad(n) {
//  return n < 10 ? '0' + n.toString(10) : n.toString(10);
//}


//var months = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep',
//              'Oct', 'Nov', 'Dec'];

//// 26 Feb 16:19:34
//function timestamp() {
//  var d = new Date();
//  var time = [pad(d.getHours()),
//              pad(d.getMinutes()),
//              pad(d.getSeconds())].join(':');
//  return [d.getDate(), months[d.getMonth()], time].join(' ');
//}


//// log is just a thin wrapper to console.log that prepends a timestamp
//exports.log = function() {
//  console.log('%s - %s', timestamp(), exports.format.apply(exports, arguments));
//};


///**
// * Inherit the prototype methods from one constructor into another.
// *
// * The Function.prototype.inherits from lang.js rewritten as a standalone
// * function (not on Function.prototype). NOTE: If this file is to be loaded
// * during bootstrapping this function needs to be rewritten using some native
// * functions as prototype setup using normal JavaScript does not work as
// * expected during bootstrapping (see mirror.js in r114903).
// *
// * @param {function} ctor Constructor function which needs to inherit the
// *     prototype.
// * @param {function} superCtor Constructor function to inherit prototype from.
// */
//exports.inherits = require('inherits');

//exports._extend = function(origin, add) {
//  // Don't do anything if add isn't an object
//  if (!add || !isObject(add)) return origin;

//  var keys = Object.keys(add);
//  var i = keys.length;
//  while (i--) {
//    origin[keys[i]] = add[keys[i]];
//  }
//  return origin;
//};

//function hasOwnProperty(obj, prop) {
//  return Object.prototype.hasOwnProperty.call(obj, prop);
//}

//}).call(this,require('_process'),typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})
//},{"./support/isBuffer":36,"_process":22,"inherits":20}],38:[function(require,module,exports){
//(function (Buffer){
//(function () {
//  "use strict";

//  function btoa(str) {
//    var buffer
//      ;

//    if (str instanceof Buffer) {
//      buffer = str;
//    } else {
//      buffer = new Buffer(str.toString(), 'binary');
//    }

//    return buffer.toString('base64');
//  }

//  module.exports = btoa;
//}());

//}).call(this,require("buffer").Buffer)
//},{"buffer":3}],39:[function(require,module,exports){
///*!
// * jQuery JavaScript Library v2.1.1
// * http://jquery.com/
// *
// * Includes Sizzle.js
// * http://sizzlejs.com/
// *
// * Copyright 2005, 2014 jQuery Foundation, Inc. and other contributors
// * Released under the MIT license
// * http://jquery.org/license
// *
// * Date: 2014-05-01T17:11Z
// */

//(function( global, factory ) {

//	if ( typeof module === "object" && typeof module.exports === "object" ) {
//		// For CommonJS and CommonJS-like environments where a proper window is present,
//		// execute the factory and get jQuery
//		// For environments that do not inherently posses a window with a document
//		// (such as Node.js), expose a jQuery-making factory as module.exports
//		// This accentuates the need for the creation of a real window
//		// e.g. var jQuery = require("jquery")(window);
//		// See ticket #14549 for more info
//		module.exports = global.document ?
//			factory( global, true ) :
//			function( w ) {
//				if ( !w.document ) {
//					throw new Error( "jQuery requires a window with a document" );
//				}
//				return factory( w );
//			};
//	} else {
//		factory( global );
//	}

//// Pass this if window is not defined yet
//}(typeof window !== "undefined" ? window : this, function( window, noGlobal ) {

//// Can't do this because several apps including ASP.NET trace
//// the stack via arguments.caller.callee and Firefox dies if
//// you try to trace through "use strict" call chains. (#13335)
//// Support: Firefox 18+
////

//var arr = [];

//var slice = arr.slice;

//var concat = arr.concat;

//var push = arr.push;

//var indexOf = arr.indexOf;

//var class2type = {};

//var toString = class2type.toString;

//var hasOwn = class2type.hasOwnProperty;

//var support = {};



//var
//	// Use the correct document accordingly with window argument (sandbox)
//	document = window.document,

//	version = "2.1.1",

//	// Define a local copy of jQuery
//	jQuery = function( selector, context ) {
//		// The jQuery object is actually just the init constructor 'enhanced'
//		// Need init if jQuery is called (just allow error to be thrown if not included)
//		return new jQuery.fn.init( selector, context );
//	},

//	// Support: Android<4.1
//	// Make sure we trim BOM and NBSP
//	rtrim = /^[\s\uFEFF\xA0]+|[\s\uFEFF\xA0]+$/g,

//	// Matches dashed string for camelizing
//	rmsPrefix = /^-ms-/,
//	rdashAlpha = /-([\da-z])/gi,

//	// Used by jQuery.camelCase as callback to replace()
//	fcamelCase = function( all, letter ) {
//		return letter.toUpperCase();
//	};

//jQuery.fn = jQuery.prototype = {
//	// The current version of jQuery being used
//	jquery: version,

//	constructor: jQuery,

//	// Start with an empty selector
//	selector: "",

//	// The default length of a jQuery object is 0
//	length: 0,

//	toArray: function() {
//		return slice.call( this );
//	},

//	// Get the Nth element in the matched element set OR
//	// Get the whole matched element set as a clean array
//	get: function( num ) {
//		return num != null ?

//			// Return just the one element from the set
//			( num < 0 ? this[ num + this.length ] : this[ num ] ) :

//			// Return all the elements in a clean array
//			slice.call( this );
//	},

//	// Take an array of elements and push it onto the stack
//	// (returning the new matched element set)
//	pushStack: function( elems ) {

//		// Build a new jQuery matched element set
//		var ret = jQuery.merge( this.constructor(), elems );

//		// Add the old object onto the stack (as a reference)
//		ret.prevObject = this;
//		ret.context = this.context;

//		// Return the newly-formed element set
//		return ret;
//	},

//	// Execute a callback for every element in the matched set.
//	// (You can seed the arguments with an array of args, but this is
//	// only used internally.)
//	each: function( callback, args ) {
//		return jQuery.each( this, callback, args );
//	},

//	map: function( callback ) {
//		return this.pushStack( jQuery.map(this, function( elem, i ) {
//			return callback.call( elem, i, elem );
//		}));
//	},

//	slice: function() {
//		return this.pushStack( slice.apply( this, arguments ) );
//	},

//	first: function() {
//		return this.eq( 0 );
//	},

//	last: function() {
//		return this.eq( -1 );
//	},

//	eq: function( i ) {
//		var len = this.length,
//			j = +i + ( i < 0 ? len : 0 );
//		return this.pushStack( j >= 0 && j < len ? [ this[j] ] : [] );
//	},

//	end: function() {
//		return this.prevObject || this.constructor(null);
//	},

//	// For internal use only.
//	// Behaves like an Array's method, not like a jQuery method.
//	push: push,
//	sort: arr.sort,
//	splice: arr.splice
//};

//jQuery.extend = jQuery.fn.extend = function() {
//	var options, name, src, copy, copyIsArray, clone,
//		target = arguments[0] || {},
//		i = 1,
//		length = arguments.length,
//		deep = false;

//	// Handle a deep copy situation
//	if ( typeof target === "boolean" ) {
//		deep = target;

//		// skip the boolean and the target
//		target = arguments[ i ] || {};
//		i++;
//	}

//	// Handle case when target is a string or something (possible in deep copy)
//	if ( typeof target !== "object" && !jQuery.isFunction(target) ) {
//		target = {};
//	}

//	// extend jQuery itself if only one argument is passed
//	if ( i === length ) {
//		target = this;
//		i--;
//	}

//	for ( ; i < length; i++ ) {
//		// Only deal with non-null/undefined values
//		if ( (options = arguments[ i ]) != null ) {
//			// Extend the base object
//			for ( name in options ) {
//				src = target[ name ];
//				copy = options[ name ];

//				// Prevent never-ending loop
//				if ( target === copy ) {
//					continue;
//				}

//				// Recurse if we're merging plain objects or arrays
//				if ( deep && copy && ( jQuery.isPlainObject(copy) || (copyIsArray = jQuery.isArray(copy)) ) ) {
//					if ( copyIsArray ) {
//						copyIsArray = false;
//						clone = src && jQuery.isArray(src) ? src : [];

//					} else {
//						clone = src && jQuery.isPlainObject(src) ? src : {};
//					}

//					// Never move original objects, clone them
//					target[ name ] = jQuery.extend( deep, clone, copy );

//				// Don't bring in undefined values
//				} else if ( copy !== undefined ) {
//					target[ name ] = copy;
//				}
//			}
//		}
//	}

//	// Return the modified object
//	return target;
//};

//jQuery.extend({
//	// Unique for each copy of jQuery on the page
//	expando: "jQuery" + ( version + Math.random() ).replace( /\D/g, "" ),

//	// Assume jQuery is ready without the ready module
//	isReady: true,

//	error: function( msg ) {
//		throw new Error( msg );
//	},

//	noop: function() {},

//	// See test/unit/core.js for details concerning isFunction.
//	// Since version 1.3, DOM methods and functions like alert
//	// aren't supported. They return false on IE (#2968).
//	isFunction: function( obj ) {
//		return jQuery.type(obj) === "function";
//	},

//	isArray: Array.isArray,

//	isWindow: function( obj ) {
//		return obj != null && obj === obj.window;
//	},

//	isNumeric: function( obj ) {
//		// parseFloat NaNs numeric-cast false positives (null|true|false|"")
//		// ...but misinterprets leading-number strings, particularly hex literals ("0x...")
//		// subtraction forces infinities to NaN
//		return !jQuery.isArray( obj ) && obj - parseFloat( obj ) >= 0;
//	},

//	isPlainObject: function( obj ) {
//		// Not plain objects:
//		// - Any object or value whose internal [[Class]] property is not "[object Object]"
//		// - DOM nodes
//		// - window
//		if ( jQuery.type( obj ) !== "object" || obj.nodeType || jQuery.isWindow( obj ) ) {
//			return false;
//		}

//		if ( obj.constructor &&
//				!hasOwn.call( obj.constructor.prototype, "isPrototypeOf" ) ) {
//			return false;
//		}

//		// If the function hasn't returned already, we're confident that
//		// |obj| is a plain object, created by {} or constructed with new Object
//		return true;
//	},

//	isEmptyObject: function( obj ) {
//		var name;
//		for ( name in obj ) {
//			return false;
//		}
//		return true;
//	},

//	type: function( obj ) {
//		if ( obj == null ) {
//			return obj + "";
//		}
//		// Support: Android < 4.0, iOS < 6 (functionish RegExp)
//		return typeof obj === "object" || typeof obj === "function" ?
//			class2type[ toString.call(obj) ] || "object" :
//			typeof obj;
//	},

//	// Evaluates a script in a global context
//	globalEval: function( code ) {
//		var script,
//			indirect = eval;

//		code = jQuery.trim( code );

//		if ( code ) {
//			// If the code includes a valid, prologue position
//			// strict mode pragma, execute code by injecting a
//			// script tag into the document.
//			if ( code.indexOf("use strict") === 1 ) {
//				script = document.createElement("script");
//				script.text = code;
//				document.head.appendChild( script ).parentNode.removeChild( script );
//			} else {
//			// Otherwise, avoid the DOM node creation, insertion
//			// and removal by using an indirect global eval
//				indirect( code );
//			}
//		}
//	},

//	// Convert dashed to camelCase; used by the css and data modules
//	// Microsoft forgot to hump their vendor prefix (#9572)
//	camelCase: function( string ) {
//		return string.replace( rmsPrefix, "ms-" ).replace( rdashAlpha, fcamelCase );
//	},

//	nodeName: function( elem, name ) {
//		return elem.nodeName && elem.nodeName.toLowerCase() === name.toLowerCase();
//	},

//	// args is for internal usage only
//	each: function( obj, callback, args ) {
//		var value,
//			i = 0,
//			length = obj.length,
//			isArray = isArraylike( obj );

//		if ( args ) {
//			if ( isArray ) {
//				for ( ; i < length; i++ ) {
//					value = callback.apply( obj[ i ], args );

//					if ( value === false ) {
//						break;
//					}
//				}
//			} else {
//				for ( i in obj ) {
//					value = callback.apply( obj[ i ], args );

//					if ( value === false ) {
//						break;
//					}
//				}
//			}

//		// A special, fast, case for the most common use of each
//		} else {
//			if ( isArray ) {
//				for ( ; i < length; i++ ) {
//					value = callback.call( obj[ i ], i, obj[ i ] );

//					if ( value === false ) {
//						break;
//					}
//				}
//			} else {
//				for ( i in obj ) {
//					value = callback.call( obj[ i ], i, obj[ i ] );

//					if ( value === false ) {
//						break;
//					}
//				}
//			}
//		}

//		return obj;
//	},

//	// Support: Android<4.1
//	trim: function( text ) {
//		return text == null ?
//			"" :
//			( text + "" ).replace( rtrim, "" );
//	},

//	// results is for internal usage only
//	makeArray: function( arr, results ) {
//		var ret = results || [];

//		if ( arr != null ) {
//			if ( isArraylike( Object(arr) ) ) {
//				jQuery.merge( ret,
//					typeof arr === "string" ?
//					[ arr ] : arr
//				);
//			} else {
//				push.call( ret, arr );
//			}
//		}

//		return ret;
//	},

//	inArray: function( elem, arr, i ) {
//		return arr == null ? -1 : indexOf.call( arr, elem, i );
//	},

//	merge: function( first, second ) {
//		var len = +second.length,
//			j = 0,
//			i = first.length;

//		for ( ; j < len; j++ ) {
//			first[ i++ ] = second[ j ];
//		}

//		first.length = i;

//		return first;
//	},

//	grep: function( elems, callback, invert ) {
//		var callbackInverse,
//			matches = [],
//			i = 0,
//			length = elems.length,
//			callbackExpect = !invert;

//		// Go through the array, only saving the items
//		// that pass the validator function
//		for ( ; i < length; i++ ) {
//			callbackInverse = !callback( elems[ i ], i );
//			if ( callbackInverse !== callbackExpect ) {
//				matches.push( elems[ i ] );
//			}
//		}

//		return matches;
//	},

//	// arg is for internal usage only
//	map: function( elems, callback, arg ) {
//		var value,
//			i = 0,
//			length = elems.length,
//			isArray = isArraylike( elems ),
//			ret = [];

//		// Go through the array, translating each of the items to their new values
//		if ( isArray ) {
//			for ( ; i < length; i++ ) {
//				value = callback( elems[ i ], i, arg );

//				if ( value != null ) {
//					ret.push( value );
//				}
//			}

//		// Go through every key on the object,
//		} else {
//			for ( i in elems ) {
//				value = callback( elems[ i ], i, arg );

//				if ( value != null ) {
//					ret.push( value );
//				}
//			}
//		}

//		// Flatten any nested arrays
//		return concat.apply( [], ret );
//	},

//	// A global GUID counter for objects
//	guid: 1,

//	// Bind a function to a context, optionally partially applying any
//	// arguments.
//	proxy: function( fn, context ) {
//		var tmp, args, proxy;

//		if ( typeof context === "string" ) {
//			tmp = fn[ context ];
//			context = fn;
//			fn = tmp;
//		}

//		// Quick check to determine if target is callable, in the spec
//		// this throws a TypeError, but we will just return undefined.
//		if ( !jQuery.isFunction( fn ) ) {
//			return undefined;
//		}

//		// Simulated bind
//		args = slice.call( arguments, 2 );
//		proxy = function() {
//			return fn.apply( context || this, args.concat( slice.call( arguments ) ) );
//		};

//		// Set the guid of unique handler to the same of original handler, so it can be removed
//		proxy.guid = fn.guid = fn.guid || jQuery.guid++;

//		return proxy;
//	},

//	now: Date.now,

//	// jQuery.support is not used in Core but other projects attach their
//	// properties to it so it needs to exist.
//	support: support
//});

//// Populate the class2type map
//jQuery.each("Boolean Number String Function Array Date RegExp Object Error".split(" "), function(i, name) {
//	class2type[ "[object " + name + "]" ] = name.toLowerCase();
//});

//function isArraylike( obj ) {
//	var length = obj.length,
//		type = jQuery.type( obj );

//	if ( type === "function" || jQuery.isWindow( obj ) ) {
//		return false;
//	}

//	if ( obj.nodeType === 1 && length ) {
//		return true;
//	}

//	return type === "array" || length === 0 ||
//		typeof length === "number" && length > 0 && ( length - 1 ) in obj;
//}
//var Sizzle =
///*!
// * Sizzle CSS Selector Engine v1.10.19
// * http://sizzlejs.com/
// *
// * Copyright 2013 jQuery Foundation, Inc. and other contributors
// * Released under the MIT license
// * http://jquery.org/license
// *
// * Date: 2014-04-18
// */
//(function( window ) {

//var i,
//	support,
//	Expr,
//	getText,
//	isXML,
//	tokenize,
//	compile,
//	select,
//	outermostContext,
//	sortInput,
//	hasDuplicate,

//	// Local document vars
//	setDocument,
//	document,
//	docElem,
//	documentIsHTML,
//	rbuggyQSA,
//	rbuggyMatches,
//	matches,
//	contains,

//	// Instance-specific data
//	expando = "sizzle" + -(new Date()),
//	preferredDoc = window.document,
//	dirruns = 0,
//	done = 0,
//	classCache = createCache(),
//	tokenCache = createCache(),
//	compilerCache = createCache(),
//	sortOrder = function( a, b ) {
//		if ( a === b ) {
//			hasDuplicate = true;
//		}
//		return 0;
//	},

//	// General-purpose constants
//	strundefined = typeof undefined,
//	MAX_NEGATIVE = 1 << 31,

//	// Instance methods
//	hasOwn = ({}).hasOwnProperty,
//	arr = [],
//	pop = arr.pop,
//	push_native = arr.push,
//	push = arr.push,
//	slice = arr.slice,
//	// Use a stripped-down indexOf if we can't use a native one
//	indexOf = arr.indexOf || function( elem ) {
//		var i = 0,
//			len = this.length;
//		for ( ; i < len; i++ ) {
//			if ( this[i] === elem ) {
//				return i;
//			}
//		}
//		return -1;
//	},

//	booleans = "checked|selected|async|autofocus|autoplay|controls|defer|disabled|hidden|ismap|loop|multiple|open|readonly|required|scoped",

//	// Regular expressions

//	// Whitespace characters http://www.w3.org/TR/css3-selectors/#whitespace
//	whitespace = "[\\x20\\t\\r\\n\\f]",
//	// http://www.w3.org/TR/css3-syntax/#characters
//	characterEncoding = "(?:\\\\.|[\\w-]|[^\\x00-\\xa0])+",

//	// Loosely modeled on CSS identifier characters
//	// An unquoted value should be a CSS identifier http://www.w3.org/TR/css3-selectors/#attribute-selectors
//	// Proper syntax: http://www.w3.org/TR/CSS21/syndata.html#value-def-identifier
//	identifier = characterEncoding.replace( "w", "w#" ),

//	// Attribute selectors: http://www.w3.org/TR/selectors/#attribute-selectors
//	attributes = "\\[" + whitespace + "*(" + characterEncoding + ")(?:" + whitespace +
//		// Operator (capture 2)
//		"*([*^$|!~]?=)" + whitespace +
//		// "Attribute values must be CSS identifiers [capture 5] or strings [capture 3 or capture 4]"
//		"*(?:'((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\"|(" + identifier + "))|)" + whitespace +
//		"*\\]",

//	pseudos = ":(" + characterEncoding + ")(?:\\((" +
//		// To reduce the number of selectors needing tokenize in the preFilter, prefer arguments:
//		// 1. quoted (capture 3; capture 4 or capture 5)
//		"('((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\")|" +
//		// 2. simple (capture 6)
//		"((?:\\\\.|[^\\\\()[\\]]|" + attributes + ")*)|" +
//		// 3. anything else (capture 2)
//		".*" +
//		")\\)|)",

//	// Leading and non-escaped trailing whitespace, capturing some non-whitespace characters preceding the latter
//	rtrim = new RegExp( "^" + whitespace + "+|((?:^|[^\\\\])(?:\\\\.)*)" + whitespace + "+$", "g" ),

//	rcomma = new RegExp( "^" + whitespace + "*," + whitespace + "*" ),
//	rcombinators = new RegExp( "^" + whitespace + "*([>+~]|" + whitespace + ")" + whitespace + "*" ),

//	rattributeQuotes = new RegExp( "=" + whitespace + "*([^\\]'\"]*?)" + whitespace + "*\\]", "g" ),

//	rpseudo = new RegExp( pseudos ),
//	ridentifier = new RegExp( "^" + identifier + "$" ),

//	matchExpr = {
//		"ID": new RegExp( "^#(" + characterEncoding + ")" ),
//		"CLASS": new RegExp( "^\\.(" + characterEncoding + ")" ),
//		"TAG": new RegExp( "^(" + characterEncoding.replace( "w", "w*" ) + ")" ),
//		"ATTR": new RegExp( "^" + attributes ),
//		"PSEUDO": new RegExp( "^" + pseudos ),
//		"CHILD": new RegExp( "^:(only|first|last|nth|nth-last)-(child|of-type)(?:\\(" + whitespace +
//			"*(even|odd|(([+-]|)(\\d*)n|)" + whitespace + "*(?:([+-]|)" + whitespace +
//			"*(\\d+)|))" + whitespace + "*\\)|)", "i" ),
//		"bool": new RegExp( "^(?:" + booleans + ")$", "i" ),
//		// For use in libraries implementing .is()
//		// We use this for POS matching in `select`
//		"needsContext": new RegExp( "^" + whitespace + "*[>+~]|:(even|odd|eq|gt|lt|nth|first|last)(?:\\(" +
//			whitespace + "*((?:-\\d)?\\d*)" + whitespace + "*\\)|)(?=[^-]|$)", "i" )
//	},

//	rinputs = /^(?:input|select|textarea|button)$/i,
//	rheader = /^h\d$/i,

//	rnative = /^[^{]+\{\s*\[native \w/,

//	// Easily-parseable/retrievable ID or TAG or CLASS selectors
//	rquickExpr = /^(?:#([\w-]+)|(\w+)|\.([\w-]+))$/,

//	rsibling = /[+~]/,
//	rescape = /'|\\/g,

//	// CSS escapes http://www.w3.org/TR/CSS21/syndata.html#escaped-characters
//	runescape = new RegExp( "\\\\([\\da-f]{1,6}" + whitespace + "?|(" + whitespace + ")|.)", "ig" ),
//	funescape = function( _, escaped, escapedWhitespace ) {
//		var high = "0x" + escaped - 0x10000;
//		// NaN means non-codepoint
//		// Support: Firefox<24
//		// Workaround erroneous numeric interpretation of +"0x"
//		return high !== high || escapedWhitespace ?
//			escaped :
//			high < 0 ?
//				// BMP codepoint
//				String.fromCharCode( high + 0x10000 ) :
//				// Supplemental Plane codepoint (surrogate pair)
//				String.fromCharCode( high >> 10 | 0xD800, high & 0x3FF | 0xDC00 );
//	};

//// Optimize for push.apply( _, NodeList )
//try {
//	push.apply(
//		(arr = slice.call( preferredDoc.childNodes )),
//		preferredDoc.childNodes
//	);
//	// Support: Android<4.0
//	// Detect silently failing push.apply
//	arr[ preferredDoc.childNodes.length ].nodeType;
//} catch ( e ) {
//	push = { apply: arr.length ?

//		// Leverage slice if possible
//		function( target, els ) {
//			push_native.apply( target, slice.call(els) );
//		} :

//		// Support: IE<9
//		// Otherwise append directly
//		function( target, els ) {
//			var j = target.length,
//				i = 0;
//			// Can't trust NodeList.length
//			while ( (target[j++] = els[i++]) ) {}
//			target.length = j - 1;
//		}
//	};
//}

//function Sizzle( selector, context, results, seed ) {
//	var match, elem, m, nodeType,
//		// QSA vars
//		i, groups, old, nid, newContext, newSelector;

//	if ( ( context ? context.ownerDocument || context : preferredDoc ) !== document ) {
//		setDocument( context );
//	}

//	context = context || document;
//	results = results || [];

//	if ( !selector || typeof selector !== "string" ) {
//		return results;
//	}

//	if ( (nodeType = context.nodeType) !== 1 && nodeType !== 9 ) {
//		return [];
//	}

//	if ( documentIsHTML && !seed ) {

//		// Shortcuts
//		if ( (match = rquickExpr.exec( selector )) ) {
//			// Speed-up: Sizzle("#ID")
//			if ( (m = match[1]) ) {
//				if ( nodeType === 9 ) {
//					elem = context.getElementById( m );
//					// Check parentNode to catch when Blackberry 4.6 returns
//					// nodes that are no longer in the document (jQuery #6963)
//					if ( elem && elem.parentNode ) {
//						// Handle the case where IE, Opera, and Webkit return items
//						// by name instead of ID
//						if ( elem.id === m ) {
//							results.push( elem );
//							return results;
//						}
//					} else {
//						return results;
//					}
//				} else {
//					// Context is not a document
//					if ( context.ownerDocument && (elem = context.ownerDocument.getElementById( m )) &&
//						contains( context, elem ) && elem.id === m ) {
//						results.push( elem );
//						return results;
//					}
//				}

//			// Speed-up: Sizzle("TAG")
//			} else if ( match[2] ) {
//				push.apply( results, context.getElementsByTagName( selector ) );
//				return results;

//			// Speed-up: Sizzle(".CLASS")
//			} else if ( (m = match[3]) && support.getElementsByClassName && context.getElementsByClassName ) {
//				push.apply( results, context.getElementsByClassName( m ) );
//				return results;
//			}
//		}

//		// QSA path
//		if ( support.qsa && (!rbuggyQSA || !rbuggyQSA.test( selector )) ) {
//			nid = old = expando;
//			newContext = context;
//			newSelector = nodeType === 9 && selector;

//			// qSA works strangely on Element-rooted queries
//			// We can work around this by specifying an extra ID on the root
//			// and working up from there (Thanks to Andrew Dupont for the technique)
//			// IE 8 doesn't work on object elements
//			if ( nodeType === 1 && context.nodeName.toLowerCase() !== "object" ) {
//				groups = tokenize( selector );

//				if ( (old = context.getAttribute("id")) ) {
//					nid = old.replace( rescape, "\\$&" );
//				} else {
//					context.setAttribute( "id", nid );
//				}
//				nid = "[id='" + nid + "'] ";

//				i = groups.length;
//				while ( i-- ) {
//					groups[i] = nid + toSelector( groups[i] );
//				}
//				newContext = rsibling.test( selector ) && testContext( context.parentNode ) || context;
//				newSelector = groups.join(",");
//			}

//			if ( newSelector ) {
//				try {
//					push.apply( results,
//						newContext.querySelectorAll( newSelector )
//					);
//					return results;
//				} catch(qsaError) {
//				} finally {
//					if ( !old ) {
//						context.removeAttribute("id");
//					}
//				}
//			}
//		}
//	}

//	// All others
//	return select( selector.replace( rtrim, "$1" ), context, results, seed );
//}

///**
// * Create key-value caches of limited size
// * @returns {Function(string, Object)} Returns the Object data after storing it on itself with
// *	property name the (space-suffixed) string and (if the cache is larger than Expr.cacheLength)
// *	deleting the oldest entry
// */
//function createCache() {
//	var keys = [];

//	function cache( key, value ) {
//		// Use (key + " ") to avoid collision with native prototype properties (see Issue #157)
//		if ( keys.push( key + " " ) > Expr.cacheLength ) {
//			// Only keep the most recent entries
//			delete cache[ keys.shift() ];
//		}
//		return (cache[ key + " " ] = value);
//	}
//	return cache;
//}

///**
// * Mark a function for special use by Sizzle
// * @param {Function} fn The function to mark
// */
//function markFunction( fn ) {
//	fn[ expando ] = true;
//	return fn;
//}

///**
// * Support testing using an element
// * @param {Function} fn Passed the created div and expects a boolean result
// */
//function assert( fn ) {
//	var div = document.createElement("div");

//	try {
//		return !!fn( div );
//	} catch (e) {
//		return false;
//	} finally {
//		// Remove from its parent by default
//		if ( div.parentNode ) {
//			div.parentNode.removeChild( div );
//		}
//		// release memory in IE
//		div = null;
//	}
//}

///**
// * Adds the same handler for all of the specified attrs
// * @param {String} attrs Pipe-separated list of attributes
// * @param {Function} handler The method that will be applied
// */
//function addHandle( attrs, handler ) {
//	var arr = attrs.split("|"),
//		i = attrs.length;

//	while ( i-- ) {
//		Expr.attrHandle[ arr[i] ] = handler;
//	}
//}

///**
// * Checks document order of two siblings
// * @param {Element} a
// * @param {Element} b
// * @returns {Number} Returns less than 0 if a precedes b, greater than 0 if a follows b
// */
//function siblingCheck( a, b ) {
//	var cur = b && a,
//		diff = cur && a.nodeType === 1 && b.nodeType === 1 &&
//			( ~b.sourceIndex || MAX_NEGATIVE ) -
//			( ~a.sourceIndex || MAX_NEGATIVE );

//	// Use IE sourceIndex if available on both nodes
//	if ( diff ) {
//		return diff;
//	}

//	// Check if b follows a
//	if ( cur ) {
//		while ( (cur = cur.nextSibling) ) {
//			if ( cur === b ) {
//				return -1;
//			}
//		}
//	}

//	return a ? 1 : -1;
//}

///**
// * Returns a function to use in pseudos for input types
// * @param {String} type
// */
//function createInputPseudo( type ) {
//	return function( elem ) {
//		var name = elem.nodeName.toLowerCase();
//		return name === "input" && elem.type === type;
//	};
//}

///**
// * Returns a function to use in pseudos for buttons
// * @param {String} type
// */
//function createButtonPseudo( type ) {
//	return function( elem ) {
//		var name = elem.nodeName.toLowerCase();
//		return (name === "input" || name === "button") && elem.type === type;
//	};
//}

///**
// * Returns a function to use in pseudos for positionals
// * @param {Function} fn
// */
//function createPositionalPseudo( fn ) {
//	return markFunction(function( argument ) {
//		argument = +argument;
//		return markFunction(function( seed, matches ) {
//			var j,
//				matchIndexes = fn( [], seed.length, argument ),
//				i = matchIndexes.length;

//			// Match elements found at the specified indexes
//			while ( i-- ) {
//				if ( seed[ (j = matchIndexes[i]) ] ) {
//					seed[j] = !(matches[j] = seed[j]);
//				}
//			}
//		});
//	});
//}

///**
// * Checks a node for validity as a Sizzle context
// * @param {Element|Object=} context
// * @returns {Element|Object|Boolean} The input node if acceptable, otherwise a falsy value
// */
//function testContext( context ) {
//	return context && typeof context.getElementsByTagName !== strundefined && context;
//}

//// Expose support vars for convenience
//support = Sizzle.support = {};

///**
// * Detects XML nodes
// * @param {Element|Object} elem An element or a document
// * @returns {Boolean} True iff elem is a non-HTML XML node
// */
//isXML = Sizzle.isXML = function( elem ) {
//	// documentElement is verified for cases where it doesn't yet exist
//	// (such as loading iframes in IE - #4833)
//	var documentElement = elem && (elem.ownerDocument || elem).documentElement;
//	return documentElement ? documentElement.nodeName !== "HTML" : false;
//};

///**
// * Sets document-related variables once based on the current document
// * @param {Element|Object} [doc] An element or document object to use to set the document
// * @returns {Object} Returns the current document
// */
//setDocument = Sizzle.setDocument = function( node ) {
//	var hasCompare,
//		doc = node ? node.ownerDocument || node : preferredDoc,
//		parent = doc.defaultView;

//	// If no document and documentElement is available, return
//	if ( doc === document || doc.nodeType !== 9 || !doc.documentElement ) {
//		return document;
//	}

//	// Set our document
//	document = doc;
//	docElem = doc.documentElement;

//	// Support tests
//	documentIsHTML = !isXML( doc );

//	// Support: IE>8
//	// If iframe document is assigned to "document" variable and if iframe has been reloaded,
//	// IE will throw "permission denied" error when accessing "document" variable, see jQuery #13936
//	// IE6-8 do not support the defaultView property so parent will be undefined
//	if ( parent && parent !== parent.top ) {
//		// IE11 does not have attachEvent, so all must suffer
//		if ( parent.addEventListener ) {
//			parent.addEventListener( "unload", function() {
//				setDocument();
//			}, false );
//		} else if ( parent.attachEvent ) {
//			parent.attachEvent( "onunload", function() {
//				setDocument();
//			});
//		}
//	}

//	/* Attributes
//	---------------------------------------------------------------------- */

//	// Support: IE<8
//	// Verify that getAttribute really returns attributes and not properties (excepting IE8 booleans)
//	support.attributes = assert(function( div ) {
//		div.className = "i";
//		return !div.getAttribute("className");
//	});

//	/* getElement(s)By*
//	---------------------------------------------------------------------- */

//	// Check if getElementsByTagName("*") returns only elements
//	support.getElementsByTagName = assert(function( div ) {
//		div.appendChild( doc.createComment("") );
//		return !div.getElementsByTagName("*").length;
//	});

//	// Check if getElementsByClassName can be trusted
//	support.getElementsByClassName = rnative.test( doc.getElementsByClassName ) && assert(function( div ) {
//		div.innerHTML = "<div class='a'></div><div class='a i'></div>";

//		// Support: Safari<4
//		// Catch class over-caching
//		div.firstChild.className = "i";
//		// Support: Opera<10
//		// Catch gEBCN failure to find non-leading classes
//		return div.getElementsByClassName("i").length === 2;
//	});

//	// Support: IE<10
//	// Check if getElementById returns elements by name
//	// The broken getElementById methods don't pick up programatically-set names,
//	// so use a roundabout getElementsByName test
//	support.getById = assert(function( div ) {
//		docElem.appendChild( div ).id = expando;
//		return !doc.getElementsByName || !doc.getElementsByName( expando ).length;
//	});

//	// ID find and filter
//	if ( support.getById ) {
//		Expr.find["ID"] = function( id, context ) {
//			if ( typeof context.getElementById !== strundefined && documentIsHTML ) {
//				var m = context.getElementById( id );
//				// Check parentNode to catch when Blackberry 4.6 returns
//				// nodes that are no longer in the document #6963
//				return m && m.parentNode ? [ m ] : [];
//			}
//		};
//		Expr.filter["ID"] = function( id ) {
//			var attrId = id.replace( runescape, funescape );
//			return function( elem ) {
//				return elem.getAttribute("id") === attrId;
//			};
//		};
//	} else {
//		// Support: IE6/7
//		// getElementById is not reliable as a find shortcut
//		delete Expr.find["ID"];

//		Expr.filter["ID"] =  function( id ) {
//			var attrId = id.replace( runescape, funescape );
//			return function( elem ) {
//				var node = typeof elem.getAttributeNode !== strundefined && elem.getAttributeNode("id");
//				return node && node.value === attrId;
//			};
//		};
//	}

//	// Tag
//	Expr.find["TAG"] = support.getElementsByTagName ?
//		function( tag, context ) {
//			if ( typeof context.getElementsByTagName !== strundefined ) {
//				return context.getElementsByTagName( tag );
//			}
//		} :
//		function( tag, context ) {
//			var elem,
//				tmp = [],
//				i = 0,
//				results = context.getElementsByTagName( tag );

//			// Filter out possible comments
//			if ( tag === "*" ) {
//				while ( (elem = results[i++]) ) {
//					if ( elem.nodeType === 1 ) {
//						tmp.push( elem );
//					}
//				}

//				return tmp;
//			}
//			return results;
//		};

//	// Class
//	Expr.find["CLASS"] = support.getElementsByClassName && function( className, context ) {
//		if ( typeof context.getElementsByClassName !== strundefined && documentIsHTML ) {
//			return context.getElementsByClassName( className );
//		}
//	};

//	/* QSA/matchesSelector
//	---------------------------------------------------------------------- */

//	// QSA and matchesSelector support

//	// matchesSelector(:active) reports false when true (IE9/Opera 11.5)
//	rbuggyMatches = [];

//	// qSa(:focus) reports false when true (Chrome 21)
//	// We allow this because of a bug in IE8/9 that throws an error
//	// whenever `document.activeElement` is accessed on an iframe
//	// So, we allow :focus to pass through QSA all the time to avoid the IE error
//	// See http://bugs.jquery.com/ticket/13378
//	rbuggyQSA = [];

//	if ( (support.qsa = rnative.test( doc.querySelectorAll )) ) {
//		// Build QSA regex
//		// Regex strategy adopted from Diego Perini
//		assert(function( div ) {
//			// Select is set to empty string on purpose
//			// This is to test IE's treatment of not explicitly
//			// setting a boolean content attribute,
//			// since its presence should be enough
//			// http://bugs.jquery.com/ticket/12359
//			div.innerHTML = "<select msallowclip=''><option selected=''></option></select>";

//			// Support: IE8, Opera 11-12.16
//			// Nothing should be selected when empty strings follow ^= or $= or *=
//			// The test attribute must be unknown in Opera but "safe" for WinRT
//			// http://msdn.microsoft.com/en-us/library/ie/hh465388.aspx#attribute_section
//			if ( div.querySelectorAll("[msallowclip^='']").length ) {
//				rbuggyQSA.push( "[*^$]=" + whitespace + "*(?:''|\"\")" );
//			}

//			// Support: IE8
//			// Boolean attributes and "value" are not treated correctly
//			if ( !div.querySelectorAll("[selected]").length ) {
//				rbuggyQSA.push( "\\[" + whitespace + "*(?:value|" + booleans + ")" );
//			}

//			// Webkit/Opera - :checked should return selected option elements
//			// http://www.w3.org/TR/2011/REC-css3-selectors-20110929/#checked
//			// IE8 throws error here and will not see later tests
//			if ( !div.querySelectorAll(":checked").length ) {
//				rbuggyQSA.push(":checked");
//			}
//		});

//		assert(function( div ) {
//			// Support: Windows 8 Native Apps
//			// The type and name attributes are restricted during .innerHTML assignment
//			var input = doc.createElement("input");
//			input.setAttribute( "type", "hidden" );
//			div.appendChild( input ).setAttribute( "name", "D" );

//			// Support: IE8
//			// Enforce case-sensitivity of name attribute
//			if ( div.querySelectorAll("[name=d]").length ) {
//				rbuggyQSA.push( "name" + whitespace + "*[*^$|!~]?=" );
//			}

//			// FF 3.5 - :enabled/:disabled and hidden elements (hidden elements are still enabled)
//			// IE8 throws error here and will not see later tests
//			if ( !div.querySelectorAll(":enabled").length ) {
//				rbuggyQSA.push( ":enabled", ":disabled" );
//			}

//			// Opera 10-11 does not throw on post-comma invalid pseudos
//			div.querySelectorAll("*,:x");
//			rbuggyQSA.push(",.*:");
//		});
//	}

//	if ( (support.matchesSelector = rnative.test( (matches = docElem.matches ||
//		docElem.webkitMatchesSelector ||
//		docElem.mozMatchesSelector ||
//		docElem.oMatchesSelector ||
//		docElem.msMatchesSelector) )) ) {

//		assert(function( div ) {
//			// Check to see if it's possible to do matchesSelector
//			// on a disconnected node (IE 9)
//			support.disconnectedMatch = matches.call( div, "div" );

//			// This should fail with an exception
//			// Gecko does not error, returns false instead
//			matches.call( div, "[s!='']:x" );
//			rbuggyMatches.push( "!=", pseudos );
//		});
//	}

//	rbuggyQSA = rbuggyQSA.length && new RegExp( rbuggyQSA.join("|") );
//	rbuggyMatches = rbuggyMatches.length && new RegExp( rbuggyMatches.join("|") );

//	/* Contains
//	---------------------------------------------------------------------- */
//	hasCompare = rnative.test( docElem.compareDocumentPosition );

//	// Element contains another
//	// Purposefully does not implement inclusive descendent
//	// As in, an element does not contain itself
//	contains = hasCompare || rnative.test( docElem.contains ) ?
//		function( a, b ) {
//			var adown = a.nodeType === 9 ? a.documentElement : a,
//				bup = b && b.parentNode;
//			return a === bup || !!( bup && bup.nodeType === 1 && (
//				adown.contains ?
//					adown.contains( bup ) :
//					a.compareDocumentPosition && a.compareDocumentPosition( bup ) & 16
//			));
//		} :
//		function( a, b ) {
//			if ( b ) {
//				while ( (b = b.parentNode) ) {
//					if ( b === a ) {
//						return true;
//					}
//				}
//			}
//			return false;
//		};

//	/* Sorting
//	---------------------------------------------------------------------- */

//	// Document order sorting
//	sortOrder = hasCompare ?
//	function( a, b ) {

//		// Flag for duplicate removal
//		if ( a === b ) {
//			hasDuplicate = true;
//			return 0;
//		}

//		// Sort on method existence if only one input has compareDocumentPosition
//		var compare = !a.compareDocumentPosition - !b.compareDocumentPosition;
//		if ( compare ) {
//			return compare;
//		}

//		// Calculate position if both inputs belong to the same document
//		compare = ( a.ownerDocument || a ) === ( b.ownerDocument || b ) ?
//			a.compareDocumentPosition( b ) :

//			// Otherwise we know they are disconnected
//			1;

//		// Disconnected nodes
//		if ( compare & 1 ||
//			(!support.sortDetached && b.compareDocumentPosition( a ) === compare) ) {

//			// Choose the first element that is related to our preferred document
//			if ( a === doc || a.ownerDocument === preferredDoc && contains(preferredDoc, a) ) {
//				return -1;
//			}
//			if ( b === doc || b.ownerDocument === preferredDoc && contains(preferredDoc, b) ) {
//				return 1;
//			}

//			// Maintain original order
//			return sortInput ?
//				( indexOf.call( sortInput, a ) - indexOf.call( sortInput, b ) ) :
//				0;
//		}

//		return compare & 4 ? -1 : 1;
//	} :
//	function( a, b ) {
//		// Exit early if the nodes are identical
//		if ( a === b ) {
//			hasDuplicate = true;
//			return 0;
//		}

//		var cur,
//			i = 0,
//			aup = a.parentNode,
//			bup = b.parentNode,
//			ap = [ a ],
//			bp = [ b ];

//		// Parentless nodes are either documents or disconnected
//		if ( !aup || !bup ) {
//			return a === doc ? -1 :
//				b === doc ? 1 :
//				aup ? -1 :
//				bup ? 1 :
//				sortInput ?
//				( indexOf.call( sortInput, a ) - indexOf.call( sortInput, b ) ) :
//				0;

//		// If the nodes are siblings, we can do a quick check
//		} else if ( aup === bup ) {
//			return siblingCheck( a, b );
//		}

//		// Otherwise we need full lists of their ancestors for comparison
//		cur = a;
//		while ( (cur = cur.parentNode) ) {
//			ap.unshift( cur );
//		}
//		cur = b;
//		while ( (cur = cur.parentNode) ) {
//			bp.unshift( cur );
//		}

//		// Walk down the tree looking for a discrepancy
//		while ( ap[i] === bp[i] ) {
//			i++;
//		}

//		return i ?
//			// Do a sibling check if the nodes have a common ancestor
//			siblingCheck( ap[i], bp[i] ) :

//			// Otherwise nodes in our document sort first
//			ap[i] === preferredDoc ? -1 :
//			bp[i] === preferredDoc ? 1 :
//			0;
//	};

//	return doc;
//};

//Sizzle.matches = function( expr, elements ) {
//	return Sizzle( expr, null, null, elements );
//};

//Sizzle.matchesSelector = function( elem, expr ) {
//	// Set document vars if needed
//	if ( ( elem.ownerDocument || elem ) !== document ) {
//		setDocument( elem );
//	}

//	// Make sure that attribute selectors are quoted
//	expr = expr.replace( rattributeQuotes, "='$1']" );

//	if ( support.matchesSelector && documentIsHTML &&
//		( !rbuggyMatches || !rbuggyMatches.test( expr ) ) &&
//		( !rbuggyQSA     || !rbuggyQSA.test( expr ) ) ) {

//		try {
//			var ret = matches.call( elem, expr );

//			// IE 9's matchesSelector returns false on disconnected nodes
//			if ( ret || support.disconnectedMatch ||
//					// As well, disconnected nodes are said to be in a document
//					// fragment in IE 9
//					elem.document && elem.document.nodeType !== 11 ) {
//				return ret;
//			}
//		} catch(e) {}
//	}

//	return Sizzle( expr, document, null, [ elem ] ).length > 0;
//};

//Sizzle.contains = function( context, elem ) {
//	// Set document vars if needed
//	if ( ( context.ownerDocument || context ) !== document ) {
//		setDocument( context );
//	}
//	return contains( context, elem );
//};

//Sizzle.attr = function( elem, name ) {
//	// Set document vars if needed
//	if ( ( elem.ownerDocument || elem ) !== document ) {
//		setDocument( elem );
//	}

//	var fn = Expr.attrHandle[ name.toLowerCase() ],
//		// Don't get fooled by Object.prototype properties (jQuery #13807)
//		val = fn && hasOwn.call( Expr.attrHandle, name.toLowerCase() ) ?
//			fn( elem, name, !documentIsHTML ) :
//			undefined;

//	return val !== undefined ?
//		val :
//		support.attributes || !documentIsHTML ?
//			elem.getAttribute( name ) :
//			(val = elem.getAttributeNode(name)) && val.specified ?
//				val.value :
//				null;
//};

//Sizzle.error = function( msg ) {
//	throw new Error( "Syntax error, unrecognized expression: " + msg );
//};

///**
// * Document sorting and removing duplicates
// * @param {ArrayLike} results
// */
//Sizzle.uniqueSort = function( results ) {
//	var elem,
//		duplicates = [],
//		j = 0,
//		i = 0;

//	// Unless we *know* we can detect duplicates, assume their presence
//	hasDuplicate = !support.detectDuplicates;
//	sortInput = !support.sortStable && results.slice( 0 );
//	results.sort( sortOrder );

//	if ( hasDuplicate ) {
//		while ( (elem = results[i++]) ) {
//			if ( elem === results[ i ] ) {
//				j = duplicates.push( i );
//			}
//		}
//		while ( j-- ) {
//			results.splice( duplicates[ j ], 1 );
//		}
//	}

//	// Clear input after sorting to release objects
//	// See https://github.com/jquery/sizzle/pull/225
//	sortInput = null;

//	return results;
//};

///**
// * Utility function for retrieving the text value of an array of DOM nodes
// * @param {Array|Element} elem
// */
//getText = Sizzle.getText = function( elem ) {
//	var node,
//		ret = "",
//		i = 0,
//		nodeType = elem.nodeType;

//	if ( !nodeType ) {
//		// If no nodeType, this is expected to be an array
//		while ( (node = elem[i++]) ) {
//			// Do not traverse comment nodes
//			ret += getText( node );
//		}
//	} else if ( nodeType === 1 || nodeType === 9 || nodeType === 11 ) {
//		// Use textContent for elements
//		// innerText usage removed for consistency of new lines (jQuery #11153)
//		if ( typeof elem.textContent === "string" ) {
//			return elem.textContent;
//		} else {
//			// Traverse its children
//			for ( elem = elem.firstChild; elem; elem = elem.nextSibling ) {
//				ret += getText( elem );
//			}
//		}
//	} else if ( nodeType === 3 || nodeType === 4 ) {
//		return elem.nodeValue;
//	}
//	// Do not include comment or processing instruction nodes

//	return ret;
//};

//Expr = Sizzle.selectors = {

//	// Can be adjusted by the user
//	cacheLength: 50,

//	createPseudo: markFunction,

//	match: matchExpr,

//	attrHandle: {},

//	find: {},

//	relative: {
//		">": { dir: "parentNode", first: true },
//		" ": { dir: "parentNode" },
//		"+": { dir: "previousSibling", first: true },
//		"~": { dir: "previousSibling" }
//	},

//	preFilter: {
//		"ATTR": function( match ) {
//			match[1] = match[1].replace( runescape, funescape );

//			// Move the given value to match[3] whether quoted or unquoted
//			match[3] = ( match[3] || match[4] || match[5] || "" ).replace( runescape, funescape );

//			if ( match[2] === "~=" ) {
//				match[3] = " " + match[3] + " ";
//			}

//			return match.slice( 0, 4 );
//		},

//		"CHILD": function( match ) {
//			/* matches from matchExpr["CHILD"]
//				1 type (only|nth|...)
//				2 what (child|of-type)
//				3 argument (even|odd|\d*|\d*n([+-]\d+)?|...)
//				4 xn-component of xn+y argument ([+-]?\d*n|)
//				5 sign of xn-component
//				6 x of xn-component
//				7 sign of y-component
//				8 y of y-component
//			*/
//			match[1] = match[1].toLowerCase();

//			if ( match[1].slice( 0, 3 ) === "nth" ) {
//				// nth-* requires argument
//				if ( !match[3] ) {
//					Sizzle.error( match[0] );
//				}

//				// numeric x and y parameters for Expr.filter.CHILD
//				// remember that false/true cast respectively to 0/1
//				match[4] = +( match[4] ? match[5] + (match[6] || 1) : 2 * ( match[3] === "even" || match[3] === "odd" ) );
//				match[5] = +( ( match[7] + match[8] ) || match[3] === "odd" );

//			// other types prohibit arguments
//			} else if ( match[3] ) {
//				Sizzle.error( match[0] );
//			}

//			return match;
//		},

//		"PSEUDO": function( match ) {
//			var excess,
//				unquoted = !match[6] && match[2];

//			if ( matchExpr["CHILD"].test( match[0] ) ) {
//				return null;
//			}

//			// Accept quoted arguments as-is
//			if ( match[3] ) {
//				match[2] = match[4] || match[5] || "";

//			// Strip excess characters from unquoted arguments
//			} else if ( unquoted && rpseudo.test( unquoted ) &&
//				// Get excess from tokenize (recursively)
//				(excess = tokenize( unquoted, true )) &&
//				// advance to the next closing parenthesis
//				(excess = unquoted.indexOf( ")", unquoted.length - excess ) - unquoted.length) ) {

//				// excess is a negative index
//				match[0] = match[0].slice( 0, excess );
//				match[2] = unquoted.slice( 0, excess );
//			}

//			// Return only captures needed by the pseudo filter method (type and argument)
//			return match.slice( 0, 3 );
//		}
//	},

//	filter: {

//		"TAG": function( nodeNameSelector ) {
//			var nodeName = nodeNameSelector.replace( runescape, funescape ).toLowerCase();
//			return nodeNameSelector === "*" ?
//				function() { return true; } :
//				function( elem ) {
//					return elem.nodeName && elem.nodeName.toLowerCase() === nodeName;
//				};
//		},

//		"CLASS": function( className ) {
//			var pattern = classCache[ className + " " ];

//			return pattern ||
//				(pattern = new RegExp( "(^|" + whitespace + ")" + className + "(" + whitespace + "|$)" )) &&
//				classCache( className, function( elem ) {
//					return pattern.test( typeof elem.className === "string" && elem.className || typeof elem.getAttribute !== strundefined && elem.getAttribute("class") || "" );
//				});
//		},

//		"ATTR": function( name, operator, check ) {
//			return function( elem ) {
//				var result = Sizzle.attr( elem, name );

//				if ( result == null ) {
//					return operator === "!=";
//				}
//				if ( !operator ) {
//					return true;
//				}

//				result += "";

//				return operator === "=" ? result === check :
//					operator === "!=" ? result !== check :
//					operator === "^=" ? check && result.indexOf( check ) === 0 :
//					operator === "*=" ? check && result.indexOf( check ) > -1 :
//					operator === "$=" ? check && result.slice( -check.length ) === check :
//					operator === "~=" ? ( " " + result + " " ).indexOf( check ) > -1 :
//					operator === "|=" ? result === check || result.slice( 0, check.length + 1 ) === check + "-" :
//					false;
//			};
//		},

//		"CHILD": function( type, what, argument, first, last ) {
//			var simple = type.slice( 0, 3 ) !== "nth",
//				forward = type.slice( -4 ) !== "last",
//				ofType = what === "of-type";

//			return first === 1 && last === 0 ?

//				// Shortcut for :nth-*(n)
//				function( elem ) {
//					return !!elem.parentNode;
//				} :

//				function( elem, context, xml ) {
//					var cache, outerCache, node, diff, nodeIndex, start,
//						dir = simple !== forward ? "nextSibling" : "previousSibling",
//						parent = elem.parentNode,
//						name = ofType && elem.nodeName.toLowerCase(),
//						useCache = !xml && !ofType;

//					if ( parent ) {

//						// :(first|last|only)-(child|of-type)
//						if ( simple ) {
//							while ( dir ) {
//								node = elem;
//								while ( (node = node[ dir ]) ) {
//									if ( ofType ? node.nodeName.toLowerCase() === name : node.nodeType === 1 ) {
//										return false;
//									}
//								}
//								// Reverse direction for :only-* (if we haven't yet done so)
//								start = dir = type === "only" && !start && "nextSibling";
//							}
//							return true;
//						}

//						start = [ forward ? parent.firstChild : parent.lastChild ];

//						// non-xml :nth-child(...) stores cache data on `parent`
//						if ( forward && useCache ) {
//							// Seek `elem` from a previously-cached index
//							outerCache = parent[ expando ] || (parent[ expando ] = {});
//							cache = outerCache[ type ] || [];
//							nodeIndex = cache[0] === dirruns && cache[1];
//							diff = cache[0] === dirruns && cache[2];
//							node = nodeIndex && parent.childNodes[ nodeIndex ];

//							while ( (node = ++nodeIndex && node && node[ dir ] ||

//								// Fallback to seeking `elem` from the start
//								(diff = nodeIndex = 0) || start.pop()) ) {

//								// When found, cache indexes on `parent` and break
//								if ( node.nodeType === 1 && ++diff && node === elem ) {
//									outerCache[ type ] = [ dirruns, nodeIndex, diff ];
//									break;
//								}
//							}

//						// Use previously-cached element index if available
//						} else if ( useCache && (cache = (elem[ expando ] || (elem[ expando ] = {}))[ type ]) && cache[0] === dirruns ) {
//							diff = cache[1];

//						// xml :nth-child(...) or :nth-last-child(...) or :nth(-last)?-of-type(...)
//						} else {
//							// Use the same loop as above to seek `elem` from the start
//							while ( (node = ++nodeIndex && node && node[ dir ] ||
//								(diff = nodeIndex = 0) || start.pop()) ) {

//								if ( ( ofType ? node.nodeName.toLowerCase() === name : node.nodeType === 1 ) && ++diff ) {
//									// Cache the index of each encountered element
//									if ( useCache ) {
//										(node[ expando ] || (node[ expando ] = {}))[ type ] = [ dirruns, diff ];
//									}

//									if ( node === elem ) {
//										break;
//									}
//								}
//							}
//						}

//						// Incorporate the offset, then check against cycle size
//						diff -= last;
//						return diff === first || ( diff % first === 0 && diff / first >= 0 );
//					}
//				};
//		},

//		"PSEUDO": function( pseudo, argument ) {
//			// pseudo-class names are case-insensitive
//			// http://www.w3.org/TR/selectors/#pseudo-classes
//			// Prioritize by case sensitivity in case custom pseudos are added with uppercase letters
//			// Remember that setFilters inherits from pseudos
//			var args,
//				fn = Expr.pseudos[ pseudo ] || Expr.setFilters[ pseudo.toLowerCase() ] ||
//					Sizzle.error( "unsupported pseudo: " + pseudo );

//			// The user may use createPseudo to indicate that
//			// arguments are needed to create the filter function
//			// just as Sizzle does
//			if ( fn[ expando ] ) {
//				return fn( argument );
//			}

//			// But maintain support for old signatures
//			if ( fn.length > 1 ) {
//				args = [ pseudo, pseudo, "", argument ];
//				return Expr.setFilters.hasOwnProperty( pseudo.toLowerCase() ) ?
//					markFunction(function( seed, matches ) {
//						var idx,
//							matched = fn( seed, argument ),
//							i = matched.length;
//						while ( i-- ) {
//							idx = indexOf.call( seed, matched[i] );
//							seed[ idx ] = !( matches[ idx ] = matched[i] );
//						}
//					}) :
//					function( elem ) {
//						return fn( elem, 0, args );
//					};
//			}

//			return fn;
//		}
//	},

//	pseudos: {
//		// Potentially complex pseudos
//		"not": markFunction(function( selector ) {
//			// Trim the selector passed to compile
//			// to avoid treating leading and trailing
//			// spaces as combinators
//			var input = [],
//				results = [],
//				matcher = compile( selector.replace( rtrim, "$1" ) );

//			return matcher[ expando ] ?
//				markFunction(function( seed, matches, context, xml ) {
//					var elem,
//						unmatched = matcher( seed, null, xml, [] ),
//						i = seed.length;

//					// Match elements unmatched by `matcher`
//					while ( i-- ) {
//						if ( (elem = unmatched[i]) ) {
//							seed[i] = !(matches[i] = elem);
//						}
//					}
//				}) :
//				function( elem, context, xml ) {
//					input[0] = elem;
//					matcher( input, null, xml, results );
//					return !results.pop();
//				};
//		}),

//		"has": markFunction(function( selector ) {
//			return function( elem ) {
//				return Sizzle( selector, elem ).length > 0;
//			};
//		}),

//		"contains": markFunction(function( text ) {
//			return function( elem ) {
//				return ( elem.textContent || elem.innerText || getText( elem ) ).indexOf( text ) > -1;
//			};
//		}),

//		// "Whether an element is represented by a :lang() selector
//		// is based solely on the element's language value
//		// being equal to the identifier C,
//		// or beginning with the identifier C immediately followed by "-".
//		// The matching of C against the element's language value is performed case-insensitively.
//		// The identifier C does not have to be a valid language name."
//		// http://www.w3.org/TR/selectors/#lang-pseudo
//		"lang": markFunction( function( lang ) {
//			// lang value must be a valid identifier
//			if ( !ridentifier.test(lang || "") ) {
//				Sizzle.error( "unsupported lang: " + lang );
//			}
//			lang = lang.replace( runescape, funescape ).toLowerCase();
//			return function( elem ) {
//				var elemLang;
//				do {
//					if ( (elemLang = documentIsHTML ?
//						elem.lang :
//						elem.getAttribute("xml:lang") || elem.getAttribute("lang")) ) {

//						elemLang = elemLang.toLowerCase();
//						return elemLang === lang || elemLang.indexOf( lang + "-" ) === 0;
//					}
//				} while ( (elem = elem.parentNode) && elem.nodeType === 1 );
//				return false;
//			};
//		}),

//		// Miscellaneous
//		"target": function( elem ) {
//			var hash = window.location && window.location.hash;
//			return hash && hash.slice( 1 ) === elem.id;
//		},

//		"root": function( elem ) {
//			return elem === docElem;
//		},

//		"focus": function( elem ) {
//			return elem === document.activeElement && (!document.hasFocus || document.hasFocus()) && !!(elem.type || elem.href || ~elem.tabIndex);
//		},

//		// Boolean properties
//		"enabled": function( elem ) {
//			return elem.disabled === false;
//		},

//		"disabled": function( elem ) {
//			return elem.disabled === true;
//		},

//		"checked": function( elem ) {
//			// In CSS3, :checked should return both checked and selected elements
//			// http://www.w3.org/TR/2011/REC-css3-selectors-20110929/#checked
//			var nodeName = elem.nodeName.toLowerCase();
//			return (nodeName === "input" && !!elem.checked) || (nodeName === "option" && !!elem.selected);
//		},

//		"selected": function( elem ) {
//			// Accessing this property makes selected-by-default
//			// options in Safari work properly
//			if ( elem.parentNode ) {
//				elem.parentNode.selectedIndex;
//			}

//			return elem.selected === true;
//		},

//		// Contents
//		"empty": function( elem ) {
//			// http://www.w3.org/TR/selectors/#empty-pseudo
//			// :empty is negated by element (1) or content nodes (text: 3; cdata: 4; entity ref: 5),
//			//   but not by others (comment: 8; processing instruction: 7; etc.)
//			// nodeType < 6 works because attributes (2) do not appear as children
//			for ( elem = elem.firstChild; elem; elem = elem.nextSibling ) {
//				if ( elem.nodeType < 6 ) {
//					return false;
//				}
//			}
//			return true;
//		},

//		"parent": function( elem ) {
//			return !Expr.pseudos["empty"]( elem );
//		},

//		// Element/input types
//		"header": function( elem ) {
//			return rheader.test( elem.nodeName );
//		},

//		"input": function( elem ) {
//			return rinputs.test( elem.nodeName );
//		},

//		"button": function( elem ) {
//			var name = elem.nodeName.toLowerCase();
//			return name === "input" && elem.type === "button" || name === "button";
//		},

//		"text": function( elem ) {
//			var attr;
//			return elem.nodeName.toLowerCase() === "input" &&
//				elem.type === "text" &&

//				// Support: IE<8
//				// New HTML5 attribute values (e.g., "search") appear with elem.type === "text"
//				( (attr = elem.getAttribute("type")) == null || attr.toLowerCase() === "text" );
//		},

//		// Position-in-collection
//		"first": createPositionalPseudo(function() {
//			return [ 0 ];
//		}),

//		"last": createPositionalPseudo(function( matchIndexes, length ) {
//			return [ length - 1 ];
//		}),

//		"eq": createPositionalPseudo(function( matchIndexes, length, argument ) {
//			return [ argument < 0 ? argument + length : argument ];
//		}),

//		"even": createPositionalPseudo(function( matchIndexes, length ) {
//			var i = 0;
//			for ( ; i < length; i += 2 ) {
//				matchIndexes.push( i );
//			}
//			return matchIndexes;
//		}),

//		"odd": createPositionalPseudo(function( matchIndexes, length ) {
//			var i = 1;
//			for ( ; i < length; i += 2 ) {
//				matchIndexes.push( i );
//			}
//			return matchIndexes;
//		}),

//		"lt": createPositionalPseudo(function( matchIndexes, length, argument ) {
//			var i = argument < 0 ? argument + length : argument;
//			for ( ; --i >= 0; ) {
//				matchIndexes.push( i );
//			}
//			return matchIndexes;
//		}),

//		"gt": createPositionalPseudo(function( matchIndexes, length, argument ) {
//			var i = argument < 0 ? argument + length : argument;
//			for ( ; ++i < length; ) {
//				matchIndexes.push( i );
//			}
//			return matchIndexes;
//		})
//	}
//};

//Expr.pseudos["nth"] = Expr.pseudos["eq"];

//// Add button/input type pseudos
//for ( i in { radio: true, checkbox: true, file: true, password: true, image: true } ) {
//	Expr.pseudos[ i ] = createInputPseudo( i );
//}
//for ( i in { submit: true, reset: true } ) {
//	Expr.pseudos[ i ] = createButtonPseudo( i );
//}

//// Easy API for creating new setFilters
//function setFilters() {}
//setFilters.prototype = Expr.filters = Expr.pseudos;
//Expr.setFilters = new setFilters();

//tokenize = Sizzle.tokenize = function( selector, parseOnly ) {
//	var matched, match, tokens, type,
//		soFar, groups, preFilters,
//		cached = tokenCache[ selector + " " ];

//	if ( cached ) {
//		return parseOnly ? 0 : cached.slice( 0 );
//	}

//	soFar = selector;
//	groups = [];
//	preFilters = Expr.preFilter;

//	while ( soFar ) {

//		// Comma and first run
//		if ( !matched || (match = rcomma.exec( soFar )) ) {
//			if ( match ) {
//				// Don't consume trailing commas as valid
//				soFar = soFar.slice( match[0].length ) || soFar;
//			}
//			groups.push( (tokens = []) );
//		}

//		matched = false;

//		// Combinators
//		if ( (match = rcombinators.exec( soFar )) ) {
//			matched = match.shift();
//			tokens.push({
//				value: matched,
//				// Cast descendant combinators to space
//				type: match[0].replace( rtrim, " " )
//			});
//			soFar = soFar.slice( matched.length );
//		}

//		// Filters
//		for ( type in Expr.filter ) {
//			if ( (match = matchExpr[ type ].exec( soFar )) && (!preFilters[ type ] ||
//				(match = preFilters[ type ]( match ))) ) {
//				matched = match.shift();
//				tokens.push({
//					value: matched,
//					type: type,
//					matches: match
//				});
//				soFar = soFar.slice( matched.length );
//			}
//		}

//		if ( !matched ) {
//			break;
//		}
//	}

//	// Return the length of the invalid excess
//	// if we're just parsing
//	// Otherwise, throw an error or return tokens
//	return parseOnly ?
//		soFar.length :
//		soFar ?
//			Sizzle.error( selector ) :
//			// Cache the tokens
//			tokenCache( selector, groups ).slice( 0 );
//};

//function toSelector( tokens ) {
//	var i = 0,
//		len = tokens.length,
//		selector = "";
//	for ( ; i < len; i++ ) {
//		selector += tokens[i].value;
//	}
//	return selector;
//}

//function addCombinator( matcher, combinator, base ) {
//	var dir = combinator.dir,
//		checkNonElements = base && dir === "parentNode",
//		doneName = done++;

//	return combinator.first ?
//		// Check against closest ancestor/preceding element
//		function( elem, context, xml ) {
//			while ( (elem = elem[ dir ]) ) {
//				if ( elem.nodeType === 1 || checkNonElements ) {
//					return matcher( elem, context, xml );
//				}
//			}
//		} :

//		// Check against all ancestor/preceding elements
//		function( elem, context, xml ) {
//			var oldCache, outerCache,
//				newCache = [ dirruns, doneName ];

//			// We can't set arbitrary data on XML nodes, so they don't benefit from dir caching
//			if ( xml ) {
//				while ( (elem = elem[ dir ]) ) {
//					if ( elem.nodeType === 1 || checkNonElements ) {
//						if ( matcher( elem, context, xml ) ) {
//							return true;
//						}
//					}
//				}
//			} else {
//				while ( (elem = elem[ dir ]) ) {
//					if ( elem.nodeType === 1 || checkNonElements ) {
//						outerCache = elem[ expando ] || (elem[ expando ] = {});
//						if ( (oldCache = outerCache[ dir ]) &&
//							oldCache[ 0 ] === dirruns && oldCache[ 1 ] === doneName ) {

//							// Assign to newCache so results back-propagate to previous elements
//							return (newCache[ 2 ] = oldCache[ 2 ]);
//						} else {
//							// Reuse newcache so results back-propagate to previous elements
//							outerCache[ dir ] = newCache;

//							// A match means we're done; a fail means we have to keep checking
//							if ( (newCache[ 2 ] = matcher( elem, context, xml )) ) {
//								return true;
//							}
//						}
//					}
//				}
//			}
//		};
//}

//function elementMatcher( matchers ) {
//	return matchers.length > 1 ?
//		function( elem, context, xml ) {
//			var i = matchers.length;
//			while ( i-- ) {
//				if ( !matchers[i]( elem, context, xml ) ) {
//					return false;
//				}
//			}
//			return true;
//		} :
//		matchers[0];
//}

//function multipleContexts( selector, contexts, results ) {
//	var i = 0,
//		len = contexts.length;
//	for ( ; i < len; i++ ) {
//		Sizzle( selector, contexts[i], results );
//	}
//	return results;
//}

//function condense( unmatched, map, filter, context, xml ) {
//	var elem,
//		newUnmatched = [],
//		i = 0,
//		len = unmatched.length,
//		mapped = map != null;

//	for ( ; i < len; i++ ) {
//		if ( (elem = unmatched[i]) ) {
//			if ( !filter || filter( elem, context, xml ) ) {
//				newUnmatched.push( elem );
//				if ( mapped ) {
//					map.push( i );
//				}
//			}
//		}
//	}

//	return newUnmatched;
//}

//function setMatcher( preFilter, selector, matcher, postFilter, postFinder, postSelector ) {
//	if ( postFilter && !postFilter[ expando ] ) {
//		postFilter = setMatcher( postFilter );
//	}
//	if ( postFinder && !postFinder[ expando ] ) {
//		postFinder = setMatcher( postFinder, postSelector );
//	}
//	return markFunction(function( seed, results, context, xml ) {
//		var temp, i, elem,
//			preMap = [],
//			postMap = [],
//			preexisting = results.length,

//			// Get initial elements from seed or context
//			elems = seed || multipleContexts( selector || "*", context.nodeType ? [ context ] : context, [] ),

//			// Prefilter to get matcher input, preserving a map for seed-results synchronization
//			matcherIn = preFilter && ( seed || !selector ) ?
//				condense( elems, preMap, preFilter, context, xml ) :
//				elems,

//			matcherOut = matcher ?
//				// If we have a postFinder, or filtered seed, or non-seed postFilter or preexisting results,
//				postFinder || ( seed ? preFilter : preexisting || postFilter ) ?

//					// ...intermediate processing is necessary
//					[] :

//					// ...otherwise use results directly
//					results :
//				matcherIn;

//		// Find primary matches
//		if ( matcher ) {
//			matcher( matcherIn, matcherOut, context, xml );
//		}

//		// Apply postFilter
//		if ( postFilter ) {
//			temp = condense( matcherOut, postMap );
//			postFilter( temp, [], context, xml );

//			// Un-match failing elements by moving them back to matcherIn
//			i = temp.length;
//			while ( i-- ) {
//				if ( (elem = temp[i]) ) {
//					matcherOut[ postMap[i] ] = !(matcherIn[ postMap[i] ] = elem);
//				}
//			}
//		}

//		if ( seed ) {
//			if ( postFinder || preFilter ) {
//				if ( postFinder ) {
//					// Get the final matcherOut by condensing this intermediate into postFinder contexts
//					temp = [];
//					i = matcherOut.length;
//					while ( i-- ) {
//						if ( (elem = matcherOut[i]) ) {
//							// Restore matcherIn since elem is not yet a final match
//							temp.push( (matcherIn[i] = elem) );
//						}
//					}
//					postFinder( null, (matcherOut = []), temp, xml );
//				}

//				// Move matched elements from seed to results to keep them synchronized
//				i = matcherOut.length;
//				while ( i-- ) {
//					if ( (elem = matcherOut[i]) &&
//						(temp = postFinder ? indexOf.call( seed, elem ) : preMap[i]) > -1 ) {

//						seed[temp] = !(results[temp] = elem);
//					}
//				}
//			}

//		// Add elements to results, through postFinder if defined
//		} else {
//			matcherOut = condense(
//				matcherOut === results ?
//					matcherOut.splice( preexisting, matcherOut.length ) :
//					matcherOut
//			);
//			if ( postFinder ) {
//				postFinder( null, results, matcherOut, xml );
//			} else {
//				push.apply( results, matcherOut );
//			}
//		}
//	});
//}

//function matcherFromTokens( tokens ) {
//	var checkContext, matcher, j,
//		len = tokens.length,
//		leadingRelative = Expr.relative[ tokens[0].type ],
//		implicitRelative = leadingRelative || Expr.relative[" "],
//		i = leadingRelative ? 1 : 0,

//		// The foundational matcher ensures that elements are reachable from top-level context(s)
//		matchContext = addCombinator( function( elem ) {
//			return elem === checkContext;
//		}, implicitRelative, true ),
//		matchAnyContext = addCombinator( function( elem ) {
//			return indexOf.call( checkContext, elem ) > -1;
//		}, implicitRelative, true ),
//		matchers = [ function( elem, context, xml ) {
//			return ( !leadingRelative && ( xml || context !== outermostContext ) ) || (
//				(checkContext = context).nodeType ?
//					matchContext( elem, context, xml ) :
//					matchAnyContext( elem, context, xml ) );
//		} ];

//	for ( ; i < len; i++ ) {
//		if ( (matcher = Expr.relative[ tokens[i].type ]) ) {
//			matchers = [ addCombinator(elementMatcher( matchers ), matcher) ];
//		} else {
//			matcher = Expr.filter[ tokens[i].type ].apply( null, tokens[i].matches );

//			// Return special upon seeing a positional matcher
//			if ( matcher[ expando ] ) {
//				// Find the next relative operator (if any) for proper handling
//				j = ++i;
//				for ( ; j < len; j++ ) {
//					if ( Expr.relative[ tokens[j].type ] ) {
//						break;
//					}
//				}
//				return setMatcher(
//					i > 1 && elementMatcher( matchers ),
//					i > 1 && toSelector(
//						// If the preceding token was a descendant combinator, insert an implicit any-element `*`
//						tokens.slice( 0, i - 1 ).concat({ value: tokens[ i - 2 ].type === " " ? "*" : "" })
//					).replace( rtrim, "$1" ),
//					matcher,
//					i < j && matcherFromTokens( tokens.slice( i, j ) ),
//					j < len && matcherFromTokens( (tokens = tokens.slice( j )) ),
//					j < len && toSelector( tokens )
//				);
//			}
//			matchers.push( matcher );
//		}
//	}

//	return elementMatcher( matchers );
//}

//function matcherFromGroupMatchers( elementMatchers, setMatchers ) {
//	var bySet = setMatchers.length > 0,
//		byElement = elementMatchers.length > 0,
//		superMatcher = function( seed, context, xml, results, outermost ) {
//			var elem, j, matcher,
//				matchedCount = 0,
//				i = "0",
//				unmatched = seed && [],
//				setMatched = [],
//				contextBackup = outermostContext,
//				// We must always have either seed elements or outermost context
//				elems = seed || byElement && Expr.find["TAG"]( "*", outermost ),
//				// Use integer dirruns iff this is the outermost matcher
//				dirrunsUnique = (dirruns += contextBackup == null ? 1 : Math.random() || 0.1),
//				len = elems.length;

//			if ( outermost ) {
//				outermostContext = context !== document && context;
//			}

//			// Add elements passing elementMatchers directly to results
//			// Keep `i` a string if there are no elements so `matchedCount` will be "00" below
//			// Support: IE<9, Safari
//			// Tolerate NodeList properties (IE: "length"; Safari: <number>) matching elements by id
//			for ( ; i !== len && (elem = elems[i]) != null; i++ ) {
//				if ( byElement && elem ) {
//					j = 0;
//					while ( (matcher = elementMatchers[j++]) ) {
//						if ( matcher( elem, context, xml ) ) {
//							results.push( elem );
//							break;
//						}
//					}
//					if ( outermost ) {
//						dirruns = dirrunsUnique;
//					}
//				}

//				// Track unmatched elements for set filters
//				if ( bySet ) {
//					// They will have gone through all possible matchers
//					if ( (elem = !matcher && elem) ) {
//						matchedCount--;
//					}

//					// Lengthen the array for every element, matched or not
//					if ( seed ) {
//						unmatched.push( elem );
//					}
//				}
//			}

//			// Apply set filters to unmatched elements
//			matchedCount += i;
//			if ( bySet && i !== matchedCount ) {
//				j = 0;
//				while ( (matcher = setMatchers[j++]) ) {
//					matcher( unmatched, setMatched, context, xml );
//				}

//				if ( seed ) {
//					// Reintegrate element matches to eliminate the need for sorting
//					if ( matchedCount > 0 ) {
//						while ( i-- ) {
//							if ( !(unmatched[i] || setMatched[i]) ) {
//								setMatched[i] = pop.call( results );
//							}
//						}
//					}

//					// Discard index placeholder values to get only actual matches
//					setMatched = condense( setMatched );
//				}

//				// Add matches to results
//				push.apply( results, setMatched );

//				// Seedless set matches succeeding multiple successful matchers stipulate sorting
//				if ( outermost && !seed && setMatched.length > 0 &&
//					( matchedCount + setMatchers.length ) > 1 ) {

//					Sizzle.uniqueSort( results );
//				}
//			}

//			// Override manipulation of globals by nested matchers
//			if ( outermost ) {
//				dirruns = dirrunsUnique;
//				outermostContext = contextBackup;
//			}

//			return unmatched;
//		};

//	return bySet ?
//		markFunction( superMatcher ) :
//		superMatcher;
//}

//compile = Sizzle.compile = function( selector, match /* Internal Use Only */ ) {
//	var i,
//		setMatchers = [],
//		elementMatchers = [],
//		cached = compilerCache[ selector + " " ];

//	if ( !cached ) {
//		// Generate a function of recursive functions that can be used to check each element
//		if ( !match ) {
//			match = tokenize( selector );
//		}
//		i = match.length;
//		while ( i-- ) {
//			cached = matcherFromTokens( match[i] );
//			if ( cached[ expando ] ) {
//				setMatchers.push( cached );
//			} else {
//				elementMatchers.push( cached );
//			}
//		}

//		// Cache the compiled function
//		cached = compilerCache( selector, matcherFromGroupMatchers( elementMatchers, setMatchers ) );

//		// Save selector and tokenization
//		cached.selector = selector;
//	}
//	return cached;
//};

///**
// * A low-level selection function that works with Sizzle's compiled
// *  selector functions
// * @param {String|Function} selector A selector or a pre-compiled
// *  selector function built with Sizzle.compile
// * @param {Element} context
// * @param {Array} [results]
// * @param {Array} [seed] A set of elements to match against
// */
//select = Sizzle.select = function( selector, context, results, seed ) {
//	var i, tokens, token, type, find,
//		compiled = typeof selector === "function" && selector,
//		match = !seed && tokenize( (selector = compiled.selector || selector) );

//	results = results || [];

//	// Try to minimize operations if there is no seed and only one group
//	if ( match.length === 1 ) {

//		// Take a shortcut and set the context if the root selector is an ID
//		tokens = match[0] = match[0].slice( 0 );
//		if ( tokens.length > 2 && (token = tokens[0]).type === "ID" &&
//				support.getById && context.nodeType === 9 && documentIsHTML &&
//				Expr.relative[ tokens[1].type ] ) {

//			context = ( Expr.find["ID"]( token.matches[0].replace(runescape, funescape), context ) || [] )[0];
//			if ( !context ) {
//				return results;

//			// Precompiled matchers will still verify ancestry, so step up a level
//			} else if ( compiled ) {
//				context = context.parentNode;
//			}

//			selector = selector.slice( tokens.shift().value.length );
//		}

//		// Fetch a seed set for right-to-left matching
//		i = matchExpr["needsContext"].test( selector ) ? 0 : tokens.length;
//		while ( i-- ) {
//			token = tokens[i];

//			// Abort if we hit a combinator
//			if ( Expr.relative[ (type = token.type) ] ) {
//				break;
//			}
//			if ( (find = Expr.find[ type ]) ) {
//				// Search, expanding context for leading sibling combinators
//				if ( (seed = find(
//					token.matches[0].replace( runescape, funescape ),
//					rsibling.test( tokens[0].type ) && testContext( context.parentNode ) || context
//				)) ) {

//					// If seed is empty or no tokens remain, we can return early
//					tokens.splice( i, 1 );
//					selector = seed.length && toSelector( tokens );
//					if ( !selector ) {
//						push.apply( results, seed );
//						return results;
//					}

//					break;
//				}
//			}
//		}
//	}

//	// Compile and execute a filtering function if one is not provided
//	// Provide `match` to avoid retokenization if we modified the selector above
//	( compiled || compile( selector, match ) )(
//		seed,
//		context,
//		!documentIsHTML,
//		results,
//		rsibling.test( selector ) && testContext( context.parentNode ) || context
//	);
//	return results;
//};

//// One-time assignments

//// Sort stability
//support.sortStable = expando.split("").sort( sortOrder ).join("") === expando;

//// Support: Chrome<14
//// Always assume duplicates if they aren't passed to the comparison function
//support.detectDuplicates = !!hasDuplicate;

//// Initialize against the default document
//setDocument();

//// Support: Webkit<537.32 - Safari 6.0.3/Chrome 25 (fixed in Chrome 27)
//// Detached nodes confoundingly follow *each other*
//support.sortDetached = assert(function( div1 ) {
//	// Should return 1, but returns 4 (following)
//	return div1.compareDocumentPosition( document.createElement("div") ) & 1;
//});

//// Support: IE<8
//// Prevent attribute/property "interpolation"
//// http://msdn.microsoft.com/en-us/library/ms536429%28VS.85%29.aspx
//if ( !assert(function( div ) {
//	div.innerHTML = "<a href='#'></a>";
//	return div.firstChild.getAttribute("href") === "#" ;
//}) ) {
//	addHandle( "type|href|height|width", function( elem, name, isXML ) {
//		if ( !isXML ) {
//			return elem.getAttribute( name, name.toLowerCase() === "type" ? 1 : 2 );
//		}
//	});
//}

//// Support: IE<9
//// Use defaultValue in place of getAttribute("value")
//if ( !support.attributes || !assert(function( div ) {
//	div.innerHTML = "<input/>";
//	div.firstChild.setAttribute( "value", "" );
//	return div.firstChild.getAttribute( "value" ) === "";
//}) ) {
//	addHandle( "value", function( elem, name, isXML ) {
//		if ( !isXML && elem.nodeName.toLowerCase() === "input" ) {
//			return elem.defaultValue;
//		}
//	});
//}

//// Support: IE<9
//// Use getAttributeNode to fetch booleans when getAttribute lies
//if ( !assert(function( div ) {
//	return div.getAttribute("disabled") == null;
//}) ) {
//	addHandle( booleans, function( elem, name, isXML ) {
//		var val;
//		if ( !isXML ) {
//			return elem[ name ] === true ? name.toLowerCase() :
//					(val = elem.getAttributeNode( name )) && val.specified ?
//					val.value :
//				null;
//		}
//	});
//}

//return Sizzle;

//})( window );



//jQuery.find = Sizzle;
//jQuery.expr = Sizzle.selectors;
//jQuery.expr[":"] = jQuery.expr.pseudos;
//jQuery.unique = Sizzle.uniqueSort;
//jQuery.text = Sizzle.getText;
//jQuery.isXMLDoc = Sizzle.isXML;
//jQuery.contains = Sizzle.contains;



//var rneedsContext = jQuery.expr.match.needsContext;

//var rsingleTag = (/^<(\w+)\s*\/?>(?:<\/\1>|)$/);



//var risSimple = /^.[^:#\[\.,]*$/;

//// Implement the identical functionality for filter and not
//function winnow( elements, qualifier, not ) {
//	if ( jQuery.isFunction( qualifier ) ) {
//		return jQuery.grep( elements, function( elem, i ) {
//			/* jshint -W018 */
//			return !!qualifier.call( elem, i, elem ) !== not;
//		});

//	}

//	if ( qualifier.nodeType ) {
//		return jQuery.grep( elements, function( elem ) {
//			return ( elem === qualifier ) !== not;
//		});

//	}

//	if ( typeof qualifier === "string" ) {
//		if ( risSimple.test( qualifier ) ) {
//			return jQuery.filter( qualifier, elements, not );
//		}

//		qualifier = jQuery.filter( qualifier, elements );
//	}

//	return jQuery.grep( elements, function( elem ) {
//		return ( indexOf.call( qualifier, elem ) >= 0 ) !== not;
//	});
//}

//jQuery.filter = function( expr, elems, not ) {
//	var elem = elems[ 0 ];

//	if ( not ) {
//		expr = ":not(" + expr + ")";
//	}

//	return elems.length === 1 && elem.nodeType === 1 ?
//		jQuery.find.matchesSelector( elem, expr ) ? [ elem ] : [] :
//		jQuery.find.matches( expr, jQuery.grep( elems, function( elem ) {
//			return elem.nodeType === 1;
//		}));
//};

//jQuery.fn.extend({
//	find: function( selector ) {
//		var i,
//			len = this.length,
//			ret = [],
//			self = this;

//		if ( typeof selector !== "string" ) {
//			return this.pushStack( jQuery( selector ).filter(function() {
//				for ( i = 0; i < len; i++ ) {
//					if ( jQuery.contains( self[ i ], this ) ) {
//						return true;
//					}
//				}
//			}) );
//		}

//		for ( i = 0; i < len; i++ ) {
//			jQuery.find( selector, self[ i ], ret );
//		}

//		// Needed because $( selector, context ) becomes $( context ).find( selector )
//		ret = this.pushStack( len > 1 ? jQuery.unique( ret ) : ret );
//		ret.selector = this.selector ? this.selector + " " + selector : selector;
//		return ret;
//	},
//	filter: function( selector ) {
//		return this.pushStack( winnow(this, selector || [], false) );
//	},
//	not: function( selector ) {
//		return this.pushStack( winnow(this, selector || [], true) );
//	},
//	is: function( selector ) {
//		return !!winnow(
//			this,

//			// If this is a positional/relative selector, check membership in the returned set
//			// so $("p:first").is("p:last") won't return true for a doc with two "p".
//			typeof selector === "string" && rneedsContext.test( selector ) ?
//				jQuery( selector ) :
//				selector || [],
//			false
//		).length;
//	}
//});


//// Initialize a jQuery object


//// A central reference to the root jQuery(document)
//var rootjQuery,

//	// A simple way to check for HTML strings
//	// Prioritize #id over <tag> to avoid XSS via location.hash (#9521)
//	// Strict HTML recognition (#11290: must start with <)
//	rquickExpr = /^(?:\s*(<[\w\W]+>)[^>]*|#([\w-]*))$/,

//	init = jQuery.fn.init = function( selector, context ) {
//		var match, elem;

//		// HANDLE: $(""), $(null), $(undefined), $(false)
//		if ( !selector ) {
//			return this;
//		}

//		// Handle HTML strings
//		if ( typeof selector === "string" ) {
//			if ( selector[0] === "<" && selector[ selector.length - 1 ] === ">" && selector.length >= 3 ) {
//				// Assume that strings that start and end with <> are HTML and skip the regex check
//				match = [ null, selector, null ];

//			} else {
//				match = rquickExpr.exec( selector );
//			}

//			// Match html or make sure no context is specified for #id
//			if ( match && (match[1] || !context) ) {

//				// HANDLE: $(html) -> $(array)
//				if ( match[1] ) {
//					context = context instanceof jQuery ? context[0] : context;

//					// scripts is true for back-compat
//					// Intentionally let the error be thrown if parseHTML is not present
//					jQuery.merge( this, jQuery.parseHTML(
//						match[1],
//						context && context.nodeType ? context.ownerDocument || context : document,
//						true
//					) );

//					// HANDLE: $(html, props)
//					if ( rsingleTag.test( match[1] ) && jQuery.isPlainObject( context ) ) {
//						for ( match in context ) {
//							// Properties of context are called as methods if possible
//							if ( jQuery.isFunction( this[ match ] ) ) {
//								this[ match ]( context[ match ] );

//							// ...and otherwise set as attributes
//							} else {
//								this.attr( match, context[ match ] );
//							}
//						}
//					}

//					return this;

//				// HANDLE: $(#id)
//				} else {
//					elem = document.getElementById( match[2] );

//					// Check parentNode to catch when Blackberry 4.6 returns
//					// nodes that are no longer in the document #6963
//					if ( elem && elem.parentNode ) {
//						// Inject the element directly into the jQuery object
//						this.length = 1;
//						this[0] = elem;
//					}

//					this.context = document;
//					this.selector = selector;
//					return this;
//				}

//			// HANDLE: $(expr, $(...))
//			} else if ( !context || context.jquery ) {
//				return ( context || rootjQuery ).find( selector );

//			// HANDLE: $(expr, context)
//			// (which is just equivalent to: $(context).find(expr)
//			} else {
//				return this.constructor( context ).find( selector );
//			}

//		// HANDLE: $(DOMElement)
//		} else if ( selector.nodeType ) {
//			this.context = this[0] = selector;
//			this.length = 1;
//			return this;

//		// HANDLE: $(function)
//		// Shortcut for document ready
//		} else if ( jQuery.isFunction( selector ) ) {
//			return typeof rootjQuery.ready !== "undefined" ?
//				rootjQuery.ready( selector ) :
//				// Execute immediately if ready is not present
//				selector( jQuery );
//		}

//		if ( selector.selector !== undefined ) {
//			this.selector = selector.selector;
//			this.context = selector.context;
//		}

//		return jQuery.makeArray( selector, this );
//	};

//// Give the init function the jQuery prototype for later instantiation
//init.prototype = jQuery.fn;

//// Initialize central reference
//rootjQuery = jQuery( document );


//var rparentsprev = /^(?:parents|prev(?:Until|All))/,
//	// methods guaranteed to produce a unique set when starting from a unique set
//	guaranteedUnique = {
//		children: true,
//		contents: true,
//		next: true,
//		prev: true
//	};

//jQuery.extend({
//	dir: function( elem, dir, until ) {
//		var matched = [],
//			truncate = until !== undefined;

//		while ( (elem = elem[ dir ]) && elem.nodeType !== 9 ) {
//			if ( elem.nodeType === 1 ) {
//				if ( truncate && jQuery( elem ).is( until ) ) {
//					break;
//				}
//				matched.push( elem );
//			}
//		}
//		return matched;
//	},

//	sibling: function( n, elem ) {
//		var matched = [];

//		for ( ; n; n = n.nextSibling ) {
//			if ( n.nodeType === 1 && n !== elem ) {
//				matched.push( n );
//			}
//		}

//		return matched;
//	}
//});

//jQuery.fn.extend({
//	has: function( target ) {
//		var targets = jQuery( target, this ),
//			l = targets.length;

//		return this.filter(function() {
//			var i = 0;
//			for ( ; i < l; i++ ) {
//				if ( jQuery.contains( this, targets[i] ) ) {
//					return true;
//				}
//			}
//		});
//	},

//	closest: function( selectors, context ) {
//		var cur,
//			i = 0,
//			l = this.length,
//			matched = [],
//			pos = rneedsContext.test( selectors ) || typeof selectors !== "string" ?
//				jQuery( selectors, context || this.context ) :
//				0;

//		for ( ; i < l; i++ ) {
//			for ( cur = this[i]; cur && cur !== context; cur = cur.parentNode ) {
//				// Always skip document fragments
//				if ( cur.nodeType < 11 && (pos ?
//					pos.index(cur) > -1 :

//					// Don't pass non-elements to Sizzle
//					cur.nodeType === 1 &&
//						jQuery.find.matchesSelector(cur, selectors)) ) {

//					matched.push( cur );
//					break;
//				}
//			}
//		}

//		return this.pushStack( matched.length > 1 ? jQuery.unique( matched ) : matched );
//	},

//	// Determine the position of an element within
//	// the matched set of elements
//	index: function( elem ) {

//		// No argument, return index in parent
//		if ( !elem ) {
//			return ( this[ 0 ] && this[ 0 ].parentNode ) ? this.first().prevAll().length : -1;
//		}

//		// index in selector
//		if ( typeof elem === "string" ) {
//			return indexOf.call( jQuery( elem ), this[ 0 ] );
//		}

//		// Locate the position of the desired element
//		return indexOf.call( this,

//			// If it receives a jQuery object, the first element is used
//			elem.jquery ? elem[ 0 ] : elem
//		);
//	},

//	add: function( selector, context ) {
//		return this.pushStack(
//			jQuery.unique(
//				jQuery.merge( this.get(), jQuery( selector, context ) )
//			)
//		);
//	},

//	addBack: function( selector ) {
//		return this.add( selector == null ?
//			this.prevObject : this.prevObject.filter(selector)
//		);
//	}
//});

//function sibling( cur, dir ) {
//	while ( (cur = cur[dir]) && cur.nodeType !== 1 ) {}
//	return cur;
//}

//jQuery.each({
//	parent: function( elem ) {
//		var parent = elem.parentNode;
//		return parent && parent.nodeType !== 11 ? parent : null;
//	},
//	parents: function( elem ) {
//		return jQuery.dir( elem, "parentNode" );
//	},
//	parentsUntil: function( elem, i, until ) {
//		return jQuery.dir( elem, "parentNode", until );
//	},
//	next: function( elem ) {
//		return sibling( elem, "nextSibling" );
//	},
//	prev: function( elem ) {
//		return sibling( elem, "previousSibling" );
//	},
//	nextAll: function( elem ) {
//		return jQuery.dir( elem, "nextSibling" );
//	},
//	prevAll: function( elem ) {
//		return jQuery.dir( elem, "previousSibling" );
//	},
//	nextUntil: function( elem, i, until ) {
//		return jQuery.dir( elem, "nextSibling", until );
//	},
//	prevUntil: function( elem, i, until ) {
//		return jQuery.dir( elem, "previousSibling", until );
//	},
//	siblings: function( elem ) {
//		return jQuery.sibling( ( elem.parentNode || {} ).firstChild, elem );
//	},
//	children: function( elem ) {
//		return jQuery.sibling( elem.firstChild );
//	},
//	contents: function( elem ) {
//		return elem.contentDocument || jQuery.merge( [], elem.childNodes );
//	}
//}, function( name, fn ) {
//	jQuery.fn[ name ] = function( until, selector ) {
//		var matched = jQuery.map( this, fn, until );

//		if ( name.slice( -5 ) !== "Until" ) {
//			selector = until;
//		}

//		if ( selector && typeof selector === "string" ) {
//			matched = jQuery.filter( selector, matched );
//		}

//		if ( this.length > 1 ) {
//			// Remove duplicates
//			if ( !guaranteedUnique[ name ] ) {
//				jQuery.unique( matched );
//			}

//			// Reverse order for parents* and prev-derivatives
//			if ( rparentsprev.test( name ) ) {
//				matched.reverse();
//			}
//		}

//		return this.pushStack( matched );
//	};
//});
//var rnotwhite = (/\S+/g);



//// String to Object options format cache
//var optionsCache = {};

//// Convert String-formatted options into Object-formatted ones and store in cache
//function createOptions( options ) {
//	var object = optionsCache[ options ] = {};
//	jQuery.each( options.match( rnotwhite ) || [], function( _, flag ) {
//		object[ flag ] = true;
//	});
//	return object;
//}

///*
// * Create a callback list using the following parameters:
// *
// *	options: an optional list of space-separated options that will change how
// *			the callback list behaves or a more traditional option object
// *
// * By default a callback list will act like an event callback list and can be
// * "fired" multiple times.
// *
// * Possible options:
// *
// *	once:			will ensure the callback list can only be fired once (like a Deferred)
// *
// *	memory:			will keep track of previous values and will call any callback added
// *					after the list has been fired right away with the latest "memorized"
// *					values (like a Deferred)
// *
// *	unique:			will ensure a callback can only be added once (no duplicate in the list)
// *
// *	stopOnFalse:	interrupt callings when a callback returns false
// *
// */
//jQuery.Callbacks = function( options ) {

//	// Convert options from String-formatted to Object-formatted if needed
//	// (we check in cache first)
//	options = typeof options === "string" ?
//		( optionsCache[ options ] || createOptions( options ) ) :
//		jQuery.extend( {}, options );

//	var // Last fire value (for non-forgettable lists)
//		memory,
//		// Flag to know if list was already fired
//		fired,
//		// Flag to know if list is currently firing
//		firing,
//		// First callback to fire (used internally by add and fireWith)
//		firingStart,
//		// End of the loop when firing
//		firingLength,
//		// Index of currently firing callback (modified by remove if needed)
//		firingIndex,
//		// Actual callback list
//		list = [],
//		// Stack of fire calls for repeatable lists
//		stack = !options.once && [],
//		// Fire callbacks
//		fire = function( data ) {
//			memory = options.memory && data;
//			fired = true;
//			firingIndex = firingStart || 0;
//			firingStart = 0;
//			firingLength = list.length;
//			firing = true;
//			for ( ; list && firingIndex < firingLength; firingIndex++ ) {
//				if ( list[ firingIndex ].apply( data[ 0 ], data[ 1 ] ) === false && options.stopOnFalse ) {
//					memory = false; // To prevent further calls using add
//					break;
//				}
//			}
//			firing = false;
//			if ( list ) {
//				if ( stack ) {
//					if ( stack.length ) {
//						fire( stack.shift() );
//					}
//				} else if ( memory ) {
//					list = [];
//				} else {
//					self.disable();
//				}
//			}
//		},
//		// Actual Callbacks object
//		self = {
//			// Add a callback or a collection of callbacks to the list
//			add: function() {
//				if ( list ) {
//					// First, we save the current length
//					var start = list.length;
//					(function add( args ) {
//						jQuery.each( args, function( _, arg ) {
//							var type = jQuery.type( arg );
//							if ( type === "function" ) {
//								if ( !options.unique || !self.has( arg ) ) {
//									list.push( arg );
//								}
//							} else if ( arg && arg.length && type !== "string" ) {
//								// Inspect recursively
//								add( arg );
//							}
//						});
//					})( arguments );
//					// Do we need to add the callbacks to the
//					// current firing batch?
//					if ( firing ) {
//						firingLength = list.length;
//					// With memory, if we're not firing then
//					// we should call right away
//					} else if ( memory ) {
//						firingStart = start;
//						fire( memory );
//					}
//				}
//				return this;
//			},
//			// Remove a callback from the list
//			remove: function() {
//				if ( list ) {
//					jQuery.each( arguments, function( _, arg ) {
//						var index;
//						while ( ( index = jQuery.inArray( arg, list, index ) ) > -1 ) {
//							list.splice( index, 1 );
//							// Handle firing indexes
//							if ( firing ) {
//								if ( index <= firingLength ) {
//									firingLength--;
//								}
//								if ( index <= firingIndex ) {
//									firingIndex--;
//								}
//							}
//						}
//					});
//				}
//				return this;
//			},
//			// Check if a given callback is in the list.
//			// If no argument is given, return whether or not list has callbacks attached.
//			has: function( fn ) {
//				return fn ? jQuery.inArray( fn, list ) > -1 : !!( list && list.length );
//			},
//			// Remove all callbacks from the list
//			empty: function() {
//				list = [];
//				firingLength = 0;
//				return this;
//			},
//			// Have the list do nothing anymore
//			disable: function() {
//				list = stack = memory = undefined;
//				return this;
//			},
//			// Is it disabled?
//			disabled: function() {
//				return !list;
//			},
//			// Lock the list in its current state
//			lock: function() {
//				stack = undefined;
//				if ( !memory ) {
//					self.disable();
//				}
//				return this;
//			},
//			// Is it locked?
//			locked: function() {
//				return !stack;
//			},
//			// Call all callbacks with the given context and arguments
//			fireWith: function( context, args ) {
//				if ( list && ( !fired || stack ) ) {
//					args = args || [];
//					args = [ context, args.slice ? args.slice() : args ];
//					if ( firing ) {
//						stack.push( args );
//					} else {
//						fire( args );
//					}
//				}
//				return this;
//			},
//			// Call all the callbacks with the given arguments
//			fire: function() {
//				self.fireWith( this, arguments );
//				return this;
//			},
//			// To know if the callbacks have already been called at least once
//			fired: function() {
//				return !!fired;
//			}
//		};

//	return self;
//};


//jQuery.extend({

//	Deferred: function( func ) {
//		var tuples = [
//				// action, add listener, listener list, final state
//				[ "resolve", "done", jQuery.Callbacks("once memory"), "resolved" ],
//				[ "reject", "fail", jQuery.Callbacks("once memory"), "rejected" ],
//				[ "notify", "progress", jQuery.Callbacks("memory") ]
//			],
//			state = "pending",
//			promise = {
//				state: function() {
//					return state;
//				},
//				always: function() {
//					deferred.done( arguments ).fail( arguments );
//					return this;
//				},
//				then: function( /* fnDone, fnFail, fnProgress */ ) {
//					var fns = arguments;
//					return jQuery.Deferred(function( newDefer ) {
//						jQuery.each( tuples, function( i, tuple ) {
//							var fn = jQuery.isFunction( fns[ i ] ) && fns[ i ];
//							// deferred[ done | fail | progress ] for forwarding actions to newDefer
//							deferred[ tuple[1] ](function() {
//								var returned = fn && fn.apply( this, arguments );
//								if ( returned && jQuery.isFunction( returned.promise ) ) {
//									returned.promise()
//										.done( newDefer.resolve )
//										.fail( newDefer.reject )
//										.progress( newDefer.notify );
//								} else {
//									newDefer[ tuple[ 0 ] + "With" ]( this === promise ? newDefer.promise() : this, fn ? [ returned ] : arguments );
//								}
//							});
//						});
//						fns = null;
//					}).promise();
//				},
//				// Get a promise for this deferred
//				// If obj is provided, the promise aspect is added to the object
//				promise: function( obj ) {
//					return obj != null ? jQuery.extend( obj, promise ) : promise;
//				}
//			},
//			deferred = {};

//		// Keep pipe for back-compat
//		promise.pipe = promise.then;

//		// Add list-specific methods
//		jQuery.each( tuples, function( i, tuple ) {
//			var list = tuple[ 2 ],
//				stateString = tuple[ 3 ];

//			// promise[ done | fail | progress ] = list.add
//			promise[ tuple[1] ] = list.add;

//			// Handle state
//			if ( stateString ) {
//				list.add(function() {
//					// state = [ resolved | rejected ]
//					state = stateString;

//				// [ reject_list | resolve_list ].disable; progress_list.lock
//				}, tuples[ i ^ 1 ][ 2 ].disable, tuples[ 2 ][ 2 ].lock );
//			}

//			// deferred[ resolve | reject | notify ]
//			deferred[ tuple[0] ] = function() {
//				deferred[ tuple[0] + "With" ]( this === deferred ? promise : this, arguments );
//				return this;
//			};
//			deferred[ tuple[0] + "With" ] = list.fireWith;
//		});

//		// Make the deferred a promise
//		promise.promise( deferred );

//		// Call given func if any
//		if ( func ) {
//			func.call( deferred, deferred );
//		}

//		// All done!
//		return deferred;
//	},

//	// Deferred helper
//	when: function( subordinate /* , ..., subordinateN */ ) {
//		var i = 0,
//			resolveValues = slice.call( arguments ),
//			length = resolveValues.length,

//			// the count of uncompleted subordinates
//			remaining = length !== 1 || ( subordinate && jQuery.isFunction( subordinate.promise ) ) ? length : 0,

//			// the master Deferred. If resolveValues consist of only a single Deferred, just use that.
//			deferred = remaining === 1 ? subordinate : jQuery.Deferred(),

//			// Update function for both resolve and progress values
//			updateFunc = function( i, contexts, values ) {
//				return function( value ) {
//					contexts[ i ] = this;
//					values[ i ] = arguments.length > 1 ? slice.call( arguments ) : value;
//					if ( values === progressValues ) {
//						deferred.notifyWith( contexts, values );
//					} else if ( !( --remaining ) ) {
//						deferred.resolveWith( contexts, values );
//					}
//				};
//			},

//			progressValues, progressContexts, resolveContexts;

//		// add listeners to Deferred subordinates; treat others as resolved
//		if ( length > 1 ) {
//			progressValues = new Array( length );
//			progressContexts = new Array( length );
//			resolveContexts = new Array( length );
//			for ( ; i < length; i++ ) {
//				if ( resolveValues[ i ] && jQuery.isFunction( resolveValues[ i ].promise ) ) {
//					resolveValues[ i ].promise()
//						.done( updateFunc( i, resolveContexts, resolveValues ) )
//						.fail( deferred.reject )
//						.progress( updateFunc( i, progressContexts, progressValues ) );
//				} else {
//					--remaining;
//				}
//			}
//		}

//		// if we're not waiting on anything, resolve the master
//		if ( !remaining ) {
//			deferred.resolveWith( resolveContexts, resolveValues );
//		}

//		return deferred.promise();
//	}
//});


//// The deferred used on DOM ready
//var readyList;

//jQuery.fn.ready = function( fn ) {
//	// Add the callback
//	jQuery.ready.promise().done( fn );

//	return this;
//};

//jQuery.extend({
//	// Is the DOM ready to be used? Set to true once it occurs.
//	isReady: false,

//	// A counter to track how many items to wait for before
//	// the ready event fires. See #6781
//	readyWait: 1,

//	// Hold (or release) the ready event
//	holdReady: function( hold ) {
//		if ( hold ) {
//			jQuery.readyWait++;
//		} else {
//			jQuery.ready( true );
//		}
//	},

//	// Handle when the DOM is ready
//	ready: function( wait ) {

//		// Abort if there are pending holds or we're already ready
//		if ( wait === true ? --jQuery.readyWait : jQuery.isReady ) {
//			return;
//		}

//		// Remember that the DOM is ready
//		jQuery.isReady = true;

//		// If a normal DOM Ready event fired, decrement, and wait if need be
//		if ( wait !== true && --jQuery.readyWait > 0 ) {
//			return;
//		}

//		// If there are functions bound, to execute
//		readyList.resolveWith( document, [ jQuery ] );

//		// Trigger any bound ready events
//		if ( jQuery.fn.triggerHandler ) {
//			jQuery( document ).triggerHandler( "ready" );
//			jQuery( document ).off( "ready" );
//		}
//	}
//});

///**
// * The ready event handler and self cleanup method
// */
//function completed() {
//	document.removeEventListener( "DOMContentLoaded", completed, false );
//	window.removeEventListener( "load", completed, false );
//	jQuery.ready();
//}

//jQuery.ready.promise = function( obj ) {
//	if ( !readyList ) {

//		readyList = jQuery.Deferred();

//		// Catch cases where $(document).ready() is called after the browser event has already occurred.
//		// we once tried to use readyState "interactive" here, but it caused issues like the one
//		// discovered by ChrisS here: http://bugs.jquery.com/ticket/12282#comment:15
//		if ( document.readyState === "complete" ) {
//			// Handle it asynchronously to allow scripts the opportunity to delay ready
//			setTimeout( jQuery.ready );

//		} else {

//			// Use the handy event callback
//			document.addEventListener( "DOMContentLoaded", completed, false );

//			// A fallback to window.onload, that will always work
//			window.addEventListener( "load", completed, false );
//		}
//	}
//	return readyList.promise( obj );
//};

//// Kick off the DOM ready check even if the user does not
//jQuery.ready.promise();




//// Multifunctional method to get and set values of a collection
//// The value/s can optionally be executed if it's a function
//var access = jQuery.access = function( elems, fn, key, value, chainable, emptyGet, raw ) {
//	var i = 0,
//		len = elems.length,
//		bulk = key == null;

//	// Sets many values
//	if ( jQuery.type( key ) === "object" ) {
//		chainable = true;
//		for ( i in key ) {
//			jQuery.access( elems, fn, i, key[i], true, emptyGet, raw );
//		}

//	// Sets one value
//	} else if ( value !== undefined ) {
//		chainable = true;

//		if ( !jQuery.isFunction( value ) ) {
//			raw = true;
//		}

//		if ( bulk ) {
//			// Bulk operations run against the entire set
//			if ( raw ) {
//				fn.call( elems, value );
//				fn = null;

//			// ...except when executing function values
//			} else {
//				bulk = fn;
//				fn = function( elem, key, value ) {
//					return bulk.call( jQuery( elem ), value );
//				};
//			}
//		}

//		if ( fn ) {
//			for ( ; i < len; i++ ) {
//				fn( elems[i], key, raw ? value : value.call( elems[i], i, fn( elems[i], key ) ) );
//			}
//		}
//	}

//	return chainable ?
//		elems :

//		// Gets
//		bulk ?
//			fn.call( elems ) :
//			len ? fn( elems[0], key ) : emptyGet;
//};


///**
// * Determines whether an object can have data
// */
//jQuery.acceptData = function( owner ) {
//	// Accepts only:
//	//  - Node
//	//    - Node.ELEMENT_NODE
//	//    - Node.DOCUMENT_NODE
//	//  - Object
//	//    - Any
//	/* jshint -W018 */
//	return owner.nodeType === 1 || owner.nodeType === 9 || !( +owner.nodeType );
//};


//function Data() {
//	// Support: Android < 4,
//	// Old WebKit does not have Object.preventExtensions/freeze method,
//	// return new empty object instead with no [[set]] accessor
//	Object.defineProperty( this.cache = {}, 0, {
//		get: function() {
//			return {};
//		}
//	});

//	this.expando = jQuery.expando + Math.random();
//}

//Data.uid = 1;
//Data.accepts = jQuery.acceptData;

//Data.prototype = {
//	key: function( owner ) {
//		// We can accept data for non-element nodes in modern browsers,
//		// but we should not, see #8335.
//		// Always return the key for a frozen object.
//		if ( !Data.accepts( owner ) ) {
//			return 0;
//		}

//		var descriptor = {},
//			// Check if the owner object already has a cache key
//			unlock = owner[ this.expando ];

//		// If not, create one
//		if ( !unlock ) {
//			unlock = Data.uid++;

//			// Secure it in a non-enumerable, non-writable property
//			try {
//				descriptor[ this.expando ] = { value: unlock };
//				Object.defineProperties( owner, descriptor );

//			// Support: Android < 4
//			// Fallback to a less secure definition
//			} catch ( e ) {
//				descriptor[ this.expando ] = unlock;
//				jQuery.extend( owner, descriptor );
//			}
//		}

//		// Ensure the cache object
//		if ( !this.cache[ unlock ] ) {
//			this.cache[ unlock ] = {};
//		}

//		return unlock;
//	},
//	set: function( owner, data, value ) {
//		var prop,
//			// There may be an unlock assigned to this node,
//			// if there is no entry for this "owner", create one inline
//			// and set the unlock as though an owner entry had always existed
//			unlock = this.key( owner ),
//			cache = this.cache[ unlock ];

//		// Handle: [ owner, key, value ] args
//		if ( typeof data === "string" ) {
//			cache[ data ] = value;

//		// Handle: [ owner, { properties } ] args
//		} else {
//			// Fresh assignments by object are shallow copied
//			if ( jQuery.isEmptyObject( cache ) ) {
//				jQuery.extend( this.cache[ unlock ], data );
//			// Otherwise, copy the properties one-by-one to the cache object
//			} else {
//				for ( prop in data ) {
//					cache[ prop ] = data[ prop ];
//				}
//			}
//		}
//		return cache;
//	},
//	get: function( owner, key ) {
//		// Either a valid cache is found, or will be created.
//		// New caches will be created and the unlock returned,
//		// allowing direct access to the newly created
//		// empty data object. A valid owner object must be provided.
//		var cache = this.cache[ this.key( owner ) ];

//		return key === undefined ?
//			cache : cache[ key ];
//	},
//	access: function( owner, key, value ) {
//		var stored;
//		// In cases where either:
//		//
//		//   1. No key was specified
//		//   2. A string key was specified, but no value provided
//		//
//		// Take the "read" path and allow the get method to determine
//		// which value to return, respectively either:
//		//
//		//   1. The entire cache object
//		//   2. The data stored at the key
//		//
//		if ( key === undefined ||
//				((key && typeof key === "string") && value === undefined) ) {

//			stored = this.get( owner, key );

//			return stored !== undefined ?
//				stored : this.get( owner, jQuery.camelCase(key) );
//		}

//		// [*]When the key is not a string, or both a key and value
//		// are specified, set or extend (existing objects) with either:
//		//
//		//   1. An object of properties
//		//   2. A key and value
//		//
//		this.set( owner, key, value );

//		// Since the "set" path can have two possible entry points
//		// return the expected data based on which path was taken[*]
//		return value !== undefined ? value : key;
//	},
//	remove: function( owner, key ) {
//		var i, name, camel,
//			unlock = this.key( owner ),
//			cache = this.cache[ unlock ];

//		if ( key === undefined ) {
//			this.cache[ unlock ] = {};

//		} else {
//			// Support array or space separated string of keys
//			if ( jQuery.isArray( key ) ) {
//				// If "name" is an array of keys...
//				// When data is initially created, via ("key", "val") signature,
//				// keys will be converted to camelCase.
//				// Since there is no way to tell _how_ a key was added, remove
//				// both plain key and camelCase key. #12786
//				// This will only penalize the array argument path.
//				name = key.concat( key.map( jQuery.camelCase ) );
//			} else {
//				camel = jQuery.camelCase( key );
//				// Try the string as a key before any manipulation
//				if ( key in cache ) {
//					name = [ key, camel ];
//				} else {
//					// If a key with the spaces exists, use it.
//					// Otherwise, create an array by matching non-whitespace
//					name = camel;
//					name = name in cache ?
//						[ name ] : ( name.match( rnotwhite ) || [] );
//				}
//			}

//			i = name.length;
//			while ( i-- ) {
//				delete cache[ name[ i ] ];
//			}
//		}
//	},
//	hasData: function( owner ) {
//		return !jQuery.isEmptyObject(
//			this.cache[ owner[ this.expando ] ] || {}
//		);
//	},
//	discard: function( owner ) {
//		if ( owner[ this.expando ] ) {
//			delete this.cache[ owner[ this.expando ] ];
//		}
//	}
//};
//var data_priv = new Data();

//var data_user = new Data();



///*
//	Implementation Summary

//	1. Enforce API surface and semantic compatibility with 1.9.x branch
//	2. Improve the module's maintainability by reducing the storage
//		paths to a single mechanism.
//	3. Use the same single mechanism to support "private" and "user" data.
//	4. _Never_ expose "private" data to user code (TODO: Drop _data, _removeData)
//	5. Avoid exposing implementation details on user objects (eg. expando properties)
//	6. Provide a clear path for implementation upgrade to WeakMap in 2014
//*/
//var rbrace = /^(?:\{[\w\W]*\}|\[[\w\W]*\])$/,
//	rmultiDash = /([A-Z])/g;

//function dataAttr( elem, key, data ) {
//	var name;

//	// If nothing was found internally, try to fetch any
//	// data from the HTML5 data-* attribute
//	if ( data === undefined && elem.nodeType === 1 ) {
//		name = "data-" + key.replace( rmultiDash, "-$1" ).toLowerCase();
//		data = elem.getAttribute( name );

//		if ( typeof data === "string" ) {
//			try {
//				data = data === "true" ? true :
//					data === "false" ? false :
//					data === "null" ? null :
//					// Only convert to a number if it doesn't change the string
//					+data + "" === data ? +data :
//					rbrace.test( data ) ? jQuery.parseJSON( data ) :
//					data;
//			} catch( e ) {}

//			// Make sure we set the data so it isn't changed later
//			data_user.set( elem, key, data );
//		} else {
//			data = undefined;
//		}
//	}
//	return data;
//}

//jQuery.extend({
//	hasData: function( elem ) {
//		return data_user.hasData( elem ) || data_priv.hasData( elem );
//	},

//	data: function( elem, name, data ) {
//		return data_user.access( elem, name, data );
//	},

//	removeData: function( elem, name ) {
//		data_user.remove( elem, name );
//	},

//	// TODO: Now that all calls to _data and _removeData have been replaced
//	// with direct calls to data_priv methods, these can be deprecated.
//	_data: function( elem, name, data ) {
//		return data_priv.access( elem, name, data );
//	},

//	_removeData: function( elem, name ) {
//		data_priv.remove( elem, name );
//	}
//});

//jQuery.fn.extend({
//	data: function( key, value ) {
//		var i, name, data,
//			elem = this[ 0 ],
//			attrs = elem && elem.attributes;

//		// Gets all values
//		if ( key === undefined ) {
//			if ( this.length ) {
//				data = data_user.get( elem );

//				if ( elem.nodeType === 1 && !data_priv.get( elem, "hasDataAttrs" ) ) {
//					i = attrs.length;
//					while ( i-- ) {

//						// Support: IE11+
//						// The attrs elements can be null (#14894)
//						if ( attrs[ i ] ) {
//							name = attrs[ i ].name;
//							if ( name.indexOf( "data-" ) === 0 ) {
//								name = jQuery.camelCase( name.slice(5) );
//								dataAttr( elem, name, data[ name ] );
//							}
//						}
//					}
//					data_priv.set( elem, "hasDataAttrs", true );
//				}
//			}

//			return data;
//		}

//		// Sets multiple values
//		if ( typeof key === "object" ) {
//			return this.each(function() {
//				data_user.set( this, key );
//			});
//		}

//		return access( this, function( value ) {
//			var data,
//				camelKey = jQuery.camelCase( key );

//			// The calling jQuery object (element matches) is not empty
//			// (and therefore has an element appears at this[ 0 ]) and the
//			// `value` parameter was not undefined. An empty jQuery object
//			// will result in `undefined` for elem = this[ 0 ] which will
//			// throw an exception if an attempt to read a data cache is made.
//			if ( elem && value === undefined ) {
//				// Attempt to get data from the cache
//				// with the key as-is
//				data = data_user.get( elem, key );
//				if ( data !== undefined ) {
//					return data;
//				}

//				// Attempt to get data from the cache
//				// with the key camelized
//				data = data_user.get( elem, camelKey );
//				if ( data !== undefined ) {
//					return data;
//				}

//				// Attempt to "discover" the data in
//				// HTML5 custom data-* attrs
//				data = dataAttr( elem, camelKey, undefined );
//				if ( data !== undefined ) {
//					return data;
//				}

//				// We tried really hard, but the data doesn't exist.
//				return;
//			}

//			// Set the data...
//			this.each(function() {
//				// First, attempt to store a copy or reference of any
//				// data that might've been store with a camelCased key.
//				var data = data_user.get( this, camelKey );

//				// For HTML5 data-* attribute interop, we have to
//				// store property names with dashes in a camelCase form.
//				// This might not apply to all properties...*
//				data_user.set( this, camelKey, value );

//				// *... In the case of properties that might _actually_
//				// have dashes, we need to also store a copy of that
//				// unchanged property.
//				if ( key.indexOf("-") !== -1 && data !== undefined ) {
//					data_user.set( this, key, value );
//				}
//			});
//		}, null, value, arguments.length > 1, null, true );
//	},

//	removeData: function( key ) {
//		return this.each(function() {
//			data_user.remove( this, key );
//		});
//	}
//});


//jQuery.extend({
//	queue: function( elem, type, data ) {
//		var queue;

//		if ( elem ) {
//			type = ( type || "fx" ) + "queue";
//			queue = data_priv.get( elem, type );

//			// Speed up dequeue by getting out quickly if this is just a lookup
//			if ( data ) {
//				if ( !queue || jQuery.isArray( data ) ) {
//					queue = data_priv.access( elem, type, jQuery.makeArray(data) );
//				} else {
//					queue.push( data );
//				}
//			}
//			return queue || [];
//		}
//	},

//	dequeue: function( elem, type ) {
//		type = type || "fx";

//		var queue = jQuery.queue( elem, type ),
//			startLength = queue.length,
//			fn = queue.shift(),
//			hooks = jQuery._queueHooks( elem, type ),
//			next = function() {
//				jQuery.dequeue( elem, type );
//			};

//		// If the fx queue is dequeued, always remove the progress sentinel
//		if ( fn === "inprogress" ) {
//			fn = queue.shift();
//			startLength--;
//		}

//		if ( fn ) {

//			// Add a progress sentinel to prevent the fx queue from being
//			// automatically dequeued
//			if ( type === "fx" ) {
//				queue.unshift( "inprogress" );
//			}

//			// clear up the last queue stop function
//			delete hooks.stop;
//			fn.call( elem, next, hooks );
//		}

//		if ( !startLength && hooks ) {
//			hooks.empty.fire();
//		}
//	},

//	// not intended for public consumption - generates a queueHooks object, or returns the current one
//	_queueHooks: function( elem, type ) {
//		var key = type + "queueHooks";
//		return data_priv.get( elem, key ) || data_priv.access( elem, key, {
//			empty: jQuery.Callbacks("once memory").add(function() {
//				data_priv.remove( elem, [ type + "queue", key ] );
//			})
//		});
//	}
//});

//jQuery.fn.extend({
//	queue: function( type, data ) {
//		var setter = 2;

//		if ( typeof type !== "string" ) {
//			data = type;
//			type = "fx";
//			setter--;
//		}

//		if ( arguments.length < setter ) {
//			return jQuery.queue( this[0], type );
//		}

//		return data === undefined ?
//			this :
//			this.each(function() {
//				var queue = jQuery.queue( this, type, data );

//				// ensure a hooks for this queue
//				jQuery._queueHooks( this, type );

//				if ( type === "fx" && queue[0] !== "inprogress" ) {
//					jQuery.dequeue( this, type );
//				}
//			});
//	},
//	dequeue: function( type ) {
//		return this.each(function() {
//			jQuery.dequeue( this, type );
//		});
//	},
//	clearQueue: function( type ) {
//		return this.queue( type || "fx", [] );
//	},
//	// Get a promise resolved when queues of a certain type
//	// are emptied (fx is the type by default)
//	promise: function( type, obj ) {
//		var tmp,
//			count = 1,
//			defer = jQuery.Deferred(),
//			elements = this,
//			i = this.length,
//			resolve = function() {
//				if ( !( --count ) ) {
//					defer.resolveWith( elements, [ elements ] );
//				}
//			};

//		if ( typeof type !== "string" ) {
//			obj = type;
//			type = undefined;
//		}
//		type = type || "fx";

//		while ( i-- ) {
//			tmp = data_priv.get( elements[ i ], type + "queueHooks" );
//			if ( tmp && tmp.empty ) {
//				count++;
//				tmp.empty.add( resolve );
//			}
//		}
//		resolve();
//		return defer.promise( obj );
//	}
//});
//var pnum = (/[+-]?(?:\d*\.|)\d+(?:[eE][+-]?\d+|)/).source;

//var cssExpand = [ "Top", "Right", "Bottom", "Left" ];

//var isHidden = function( elem, el ) {
//		// isHidden might be called from jQuery#filter function;
//		// in that case, element will be second argument
//		elem = el || elem;
//		return jQuery.css( elem, "display" ) === "none" || !jQuery.contains( elem.ownerDocument, elem );
//	};

//var rcheckableType = (/^(?:checkbox|radio)$/i);



//(function() {
//	var fragment = document.createDocumentFragment(),
//		div = fragment.appendChild( document.createElement( "div" ) ),
//		input = document.createElement( "input" );

//	// #11217 - WebKit loses check when the name is after the checked attribute
//	// Support: Windows Web Apps (WWA)
//	// `name` and `type` need .setAttribute for WWA
//	input.setAttribute( "type", "radio" );
//	input.setAttribute( "checked", "checked" );
//	input.setAttribute( "name", "t" );

//	div.appendChild( input );

//	// Support: Safari 5.1, iOS 5.1, Android 4.x, Android 2.3
//	// old WebKit doesn't clone checked state correctly in fragments
//	support.checkClone = div.cloneNode( true ).cloneNode( true ).lastChild.checked;

//	// Make sure textarea (and checkbox) defaultValue is properly cloned
//	// Support: IE9-IE11+
//	div.innerHTML = "<textarea>x</textarea>";
//	support.noCloneChecked = !!div.cloneNode( true ).lastChild.defaultValue;
//})();
//var strundefined = typeof undefined;



//support.focusinBubbles = "onfocusin" in window;


//var
//	rkeyEvent = /^key/,
//	rmouseEvent = /^(?:mouse|pointer|contextmenu)|click/,
//	rfocusMorph = /^(?:focusinfocus|focusoutblur)$/,
//	rtypenamespace = /^([^.]*)(?:\.(.+)|)$/;

//function returnTrue() {
//	return true;
//}

//function returnFalse() {
//	return false;
//}

//function safeActiveElement() {
//	try {
//		return document.activeElement;
//	} catch ( err ) { }
//}

///*
// * Helper functions for managing events -- not part of the public interface.
// * Props to Dean Edwards' addEvent library for many of the ideas.
// */
//jQuery.event = {

//	global: {},

//	add: function( elem, types, handler, data, selector ) {

//		var handleObjIn, eventHandle, tmp,
//			events, t, handleObj,
//			special, handlers, type, namespaces, origType,
//			elemData = data_priv.get( elem );

//		// Don't attach events to noData or text/comment nodes (but allow plain objects)
//		if ( !elemData ) {
//			return;
//		}

//		// Caller can pass in an object of custom data in lieu of the handler
//		if ( handler.handler ) {
//			handleObjIn = handler;
//			handler = handleObjIn.handler;
//			selector = handleObjIn.selector;
//		}

//		// Make sure that the handler has a unique ID, used to find/remove it later
//		if ( !handler.guid ) {
//			handler.guid = jQuery.guid++;
//		}

//		// Init the element's event structure and main handler, if this is the first
//		if ( !(events = elemData.events) ) {
//			events = elemData.events = {};
//		}
//		if ( !(eventHandle = elemData.handle) ) {
//			eventHandle = elemData.handle = function( e ) {
//				// Discard the second event of a jQuery.event.trigger() and
//				// when an event is called after a page has unloaded
//				return typeof jQuery !== strundefined && jQuery.event.triggered !== e.type ?
//					jQuery.event.dispatch.apply( elem, arguments ) : undefined;
//			};
//		}

//		// Handle multiple events separated by a space
//		types = ( types || "" ).match( rnotwhite ) || [ "" ];
//		t = types.length;
//		while ( t-- ) {
//			tmp = rtypenamespace.exec( types[t] ) || [];
//			type = origType = tmp[1];
//			namespaces = ( tmp[2] || "" ).split( "." ).sort();

//			// There *must* be a type, no attaching namespace-only handlers
//			if ( !type ) {
//				continue;
//			}

//			// If event changes its type, use the special event handlers for the changed type
//			special = jQuery.event.special[ type ] || {};

//			// If selector defined, determine special event api type, otherwise given type
//			type = ( selector ? special.delegateType : special.bindType ) || type;

//			// Update special based on newly reset type
//			special = jQuery.event.special[ type ] || {};

//			// handleObj is passed to all event handlers
//			handleObj = jQuery.extend({
//				type: type,
//				origType: origType,
//				data: data,
//				handler: handler,
//				guid: handler.guid,
//				selector: selector,
//				needsContext: selector && jQuery.expr.match.needsContext.test( selector ),
//				namespace: namespaces.join(".")
//			}, handleObjIn );

//			// Init the event handler queue if we're the first
//			if ( !(handlers = events[ type ]) ) {
//				handlers = events[ type ] = [];
//				handlers.delegateCount = 0;

//				// Only use addEventListener if the special events handler returns false
//				if ( !special.setup || special.setup.call( elem, data, namespaces, eventHandle ) === false ) {
//					if ( elem.addEventListener ) {
//						elem.addEventListener( type, eventHandle, false );
//					}
//				}
//			}

//			if ( special.add ) {
//				special.add.call( elem, handleObj );

//				if ( !handleObj.handler.guid ) {
//					handleObj.handler.guid = handler.guid;
//				}
//			}

//			// Add to the element's handler list, delegates in front
//			if ( selector ) {
//				handlers.splice( handlers.delegateCount++, 0, handleObj );
//			} else {
//				handlers.push( handleObj );
//			}

//			// Keep track of which events have ever been used, for event optimization
//			jQuery.event.global[ type ] = true;
//		}

//	},

//	// Detach an event or set of events from an element
//	remove: function( elem, types, handler, selector, mappedTypes ) {

//		var j, origCount, tmp,
//			events, t, handleObj,
//			special, handlers, type, namespaces, origType,
//			elemData = data_priv.hasData( elem ) && data_priv.get( elem );

//		if ( !elemData || !(events = elemData.events) ) {
//			return;
//		}

//		// Once for each type.namespace in types; type may be omitted
//		types = ( types || "" ).match( rnotwhite ) || [ "" ];
//		t = types.length;
//		while ( t-- ) {
//			tmp = rtypenamespace.exec( types[t] ) || [];
//			type = origType = tmp[1];
//			namespaces = ( tmp[2] || "" ).split( "." ).sort();

//			// Unbind all events (on this namespace, if provided) for the element
//			if ( !type ) {
//				for ( type in events ) {
//					jQuery.event.remove( elem, type + types[ t ], handler, selector, true );
//				}
//				continue;
//			}

//			special = jQuery.event.special[ type ] || {};
//			type = ( selector ? special.delegateType : special.bindType ) || type;
//			handlers = events[ type ] || [];
//			tmp = tmp[2] && new RegExp( "(^|\\.)" + namespaces.join("\\.(?:.*\\.|)") + "(\\.|$)" );

//			// Remove matching events
//			origCount = j = handlers.length;
//			while ( j-- ) {
//				handleObj = handlers[ j ];

//				if ( ( mappedTypes || origType === handleObj.origType ) &&
//					( !handler || handler.guid === handleObj.guid ) &&
//					( !tmp || tmp.test( handleObj.namespace ) ) &&
//					( !selector || selector === handleObj.selector || selector === "**" && handleObj.selector ) ) {
//					handlers.splice( j, 1 );

//					if ( handleObj.selector ) {
//						handlers.delegateCount--;
//					}
//					if ( special.remove ) {
//						special.remove.call( elem, handleObj );
//					}
//				}
//			}

//			// Remove generic event handler if we removed something and no more handlers exist
//			// (avoids potential for endless recursion during removal of special event handlers)
//			if ( origCount && !handlers.length ) {
//				if ( !special.teardown || special.teardown.call( elem, namespaces, elemData.handle ) === false ) {
//					jQuery.removeEvent( elem, type, elemData.handle );
//				}

//				delete events[ type ];
//			}
//		}

//		// Remove the expando if it's no longer used
//		if ( jQuery.isEmptyObject( events ) ) {
//			delete elemData.handle;
//			data_priv.remove( elem, "events" );
//		}
//	},

//	trigger: function( event, data, elem, onlyHandlers ) {

//		var i, cur, tmp, bubbleType, ontype, handle, special,
//			eventPath = [ elem || document ],
//			type = hasOwn.call( event, "type" ) ? event.type : event,
//			namespaces = hasOwn.call( event, "namespace" ) ? event.namespace.split(".") : [];

//		cur = tmp = elem = elem || document;

//		// Don't do events on text and comment nodes
//		if ( elem.nodeType === 3 || elem.nodeType === 8 ) {
//			return;
//		}

//		// focus/blur morphs to focusin/out; ensure we're not firing them right now
//		if ( rfocusMorph.test( type + jQuery.event.triggered ) ) {
//			return;
//		}

//		if ( type.indexOf(".") >= 0 ) {
//			// Namespaced trigger; create a regexp to match event type in handle()
//			namespaces = type.split(".");
//			type = namespaces.shift();
//			namespaces.sort();
//		}
//		ontype = type.indexOf(":") < 0 && "on" + type;

//		// Caller can pass in a jQuery.Event object, Object, or just an event type string
//		event = event[ jQuery.expando ] ?
//			event :
//			new jQuery.Event( type, typeof event === "object" && event );

//		// Trigger bitmask: & 1 for native handlers; & 2 for jQuery (always true)
//		event.isTrigger = onlyHandlers ? 2 : 3;
//		event.namespace = namespaces.join(".");
//		event.namespace_re = event.namespace ?
//			new RegExp( "(^|\\.)" + namespaces.join("\\.(?:.*\\.|)") + "(\\.|$)" ) :
//			null;

//		// Clean up the event in case it is being reused
//		event.result = undefined;
//		if ( !event.target ) {
//			event.target = elem;
//		}

//		// Clone any incoming data and prepend the event, creating the handler arg list
//		data = data == null ?
//			[ event ] :
//			jQuery.makeArray( data, [ event ] );

//		// Allow special events to draw outside the lines
//		special = jQuery.event.special[ type ] || {};
//		if ( !onlyHandlers && special.trigger && special.trigger.apply( elem, data ) === false ) {
//			return;
//		}

//		// Determine event propagation path in advance, per W3C events spec (#9951)
//		// Bubble up to document, then to window; watch for a global ownerDocument var (#9724)
//		if ( !onlyHandlers && !special.noBubble && !jQuery.isWindow( elem ) ) {

//			bubbleType = special.delegateType || type;
//			if ( !rfocusMorph.test( bubbleType + type ) ) {
//				cur = cur.parentNode;
//			}
//			for ( ; cur; cur = cur.parentNode ) {
//				eventPath.push( cur );
//				tmp = cur;
//			}

//			// Only add window if we got to document (e.g., not plain obj or detached DOM)
//			if ( tmp === (elem.ownerDocument || document) ) {
//				eventPath.push( tmp.defaultView || tmp.parentWindow || window );
//			}
//		}

//		// Fire handlers on the event path
//		i = 0;
//		while ( (cur = eventPath[i++]) && !event.isPropagationStopped() ) {

//			event.type = i > 1 ?
//				bubbleType :
//				special.bindType || type;

//			// jQuery handler
//			handle = ( data_priv.get( cur, "events" ) || {} )[ event.type ] && data_priv.get( cur, "handle" );
//			if ( handle ) {
//				handle.apply( cur, data );
//			}

//			// Native handler
//			handle = ontype && cur[ ontype ];
//			if ( handle && handle.apply && jQuery.acceptData( cur ) ) {
//				event.result = handle.apply( cur, data );
//				if ( event.result === false ) {
//					event.preventDefault();
//				}
//			}
//		}
//		event.type = type;

//		// If nobody prevented the default action, do it now
//		if ( !onlyHandlers && !event.isDefaultPrevented() ) {

//			if ( (!special._default || special._default.apply( eventPath.pop(), data ) === false) &&
//				jQuery.acceptData( elem ) ) {

//				// Call a native DOM method on the target with the same name name as the event.
//				// Don't do default actions on window, that's where global variables be (#6170)
//				if ( ontype && jQuery.isFunction( elem[ type ] ) && !jQuery.isWindow( elem ) ) {

//					// Don't re-trigger an onFOO event when we call its FOO() method
//					tmp = elem[ ontype ];

//					if ( tmp ) {
//						elem[ ontype ] = null;
//					}

//					// Prevent re-triggering of the same event, since we already bubbled it above
//					jQuery.event.triggered = type;
//					elem[ type ]();
//					jQuery.event.triggered = undefined;

//					if ( tmp ) {
//						elem[ ontype ] = tmp;
//					}
//				}
//			}
//		}

//		return event.result;
//	},

//	dispatch: function( event ) {

//		// Make a writable jQuery.Event from the native event object
//		event = jQuery.event.fix( event );

//		var i, j, ret, matched, handleObj,
//			handlerQueue = [],
//			args = slice.call( arguments ),
//			handlers = ( data_priv.get( this, "events" ) || {} )[ event.type ] || [],
//			special = jQuery.event.special[ event.type ] || {};

//		// Use the fix-ed jQuery.Event rather than the (read-only) native event
//		args[0] = event;
//		event.delegateTarget = this;

//		// Call the preDispatch hook for the mapped type, and let it bail if desired
//		if ( special.preDispatch && special.preDispatch.call( this, event ) === false ) {
//			return;
//		}

//		// Determine handlers
//		handlerQueue = jQuery.event.handlers.call( this, event, handlers );

//		// Run delegates first; they may want to stop propagation beneath us
//		i = 0;
//		while ( (matched = handlerQueue[ i++ ]) && !event.isPropagationStopped() ) {
//			event.currentTarget = matched.elem;

//			j = 0;
//			while ( (handleObj = matched.handlers[ j++ ]) && !event.isImmediatePropagationStopped() ) {

//				// Triggered event must either 1) have no namespace, or
//				// 2) have namespace(s) a subset or equal to those in the bound event (both can have no namespace).
//				if ( !event.namespace_re || event.namespace_re.test( handleObj.namespace ) ) {

//					event.handleObj = handleObj;
//					event.data = handleObj.data;

//					ret = ( (jQuery.event.special[ handleObj.origType ] || {}).handle || handleObj.handler )
//							.apply( matched.elem, args );

//					if ( ret !== undefined ) {
//						if ( (event.result = ret) === false ) {
//							event.preventDefault();
//							event.stopPropagation();
//						}
//					}
//				}
//			}
//		}

//		// Call the postDispatch hook for the mapped type
//		if ( special.postDispatch ) {
//			special.postDispatch.call( this, event );
//		}

//		return event.result;
//	},

//	handlers: function( event, handlers ) {
//		var i, matches, sel, handleObj,
//			handlerQueue = [],
//			delegateCount = handlers.delegateCount,
//			cur = event.target;

//		// Find delegate handlers
//		// Black-hole SVG <use> instance trees (#13180)
//		// Avoid non-left-click bubbling in Firefox (#3861)
//		if ( delegateCount && cur.nodeType && (!event.button || event.type !== "click") ) {

//			for ( ; cur !== this; cur = cur.parentNode || this ) {

//				// Don't process clicks on disabled elements (#6911, #8165, #11382, #11764)
//				if ( cur.disabled !== true || event.type !== "click" ) {
//					matches = [];
//					for ( i = 0; i < delegateCount; i++ ) {
//						handleObj = handlers[ i ];

//						// Don't conflict with Object.prototype properties (#13203)
//						sel = handleObj.selector + " ";

//						if ( matches[ sel ] === undefined ) {
//							matches[ sel ] = handleObj.needsContext ?
//								jQuery( sel, this ).index( cur ) >= 0 :
//								jQuery.find( sel, this, null, [ cur ] ).length;
//						}
//						if ( matches[ sel ] ) {
//							matches.push( handleObj );
//						}
//					}
//					if ( matches.length ) {
//						handlerQueue.push({ elem: cur, handlers: matches });
//					}
//				}
//			}
//		}

//		// Add the remaining (directly-bound) handlers
//		if ( delegateCount < handlers.length ) {
//			handlerQueue.push({ elem: this, handlers: handlers.slice( delegateCount ) });
//		}

//		return handlerQueue;
//	},

//	// Includes some event props shared by KeyEvent and MouseEvent
//	props: "altKey bubbles cancelable ctrlKey currentTarget eventPhase metaKey relatedTarget shiftKey target timeStamp view which".split(" "),

//	fixHooks: {},

//	keyHooks: {
//		props: "char charCode key keyCode".split(" "),
//		filter: function( event, original ) {

//			// Add which for key events
//			if ( event.which == null ) {
//				event.which = original.charCode != null ? original.charCode : original.keyCode;
//			}

//			return event;
//		}
//	},

//	mouseHooks: {
//		props: "button buttons clientX clientY offsetX offsetY pageX pageY screenX screenY toElement".split(" "),
//		filter: function( event, original ) {
//			var eventDoc, doc, body,
//				button = original.button;

//			// Calculate pageX/Y if missing and clientX/Y available
//			if ( event.pageX == null && original.clientX != null ) {
//				eventDoc = event.target.ownerDocument || document;
//				doc = eventDoc.documentElement;
//				body = eventDoc.body;

//				event.pageX = original.clientX + ( doc && doc.scrollLeft || body && body.scrollLeft || 0 ) - ( doc && doc.clientLeft || body && body.clientLeft || 0 );
//				event.pageY = original.clientY + ( doc && doc.scrollTop  || body && body.scrollTop  || 0 ) - ( doc && doc.clientTop  || body && body.clientTop  || 0 );
//			}

//			// Add which for click: 1 === left; 2 === middle; 3 === right
//			// Note: button is not normalized, so don't use it
//			if ( !event.which && button !== undefined ) {
//				event.which = ( button & 1 ? 1 : ( button & 2 ? 3 : ( button & 4 ? 2 : 0 ) ) );
//			}

//			return event;
//		}
//	},

//	fix: function( event ) {
//		if ( event[ jQuery.expando ] ) {
//			return event;
//		}

//		// Create a writable copy of the event object and normalize some properties
//		var i, prop, copy,
//			type = event.type,
//			originalEvent = event,
//			fixHook = this.fixHooks[ type ];

//		if ( !fixHook ) {
//			this.fixHooks[ type ] = fixHook =
//				rmouseEvent.test( type ) ? this.mouseHooks :
//				rkeyEvent.test( type ) ? this.keyHooks :
//				{};
//		}
//		copy = fixHook.props ? this.props.concat( fixHook.props ) : this.props;

//		event = new jQuery.Event( originalEvent );

//		i = copy.length;
//		while ( i-- ) {
//			prop = copy[ i ];
//			event[ prop ] = originalEvent[ prop ];
//		}

//		// Support: Cordova 2.5 (WebKit) (#13255)
//		// All events should have a target; Cordova deviceready doesn't
//		if ( !event.target ) {
//			event.target = document;
//		}

//		// Support: Safari 6.0+, Chrome < 28
//		// Target should not be a text node (#504, #13143)
//		if ( event.target.nodeType === 3 ) {
//			event.target = event.target.parentNode;
//		}

//		return fixHook.filter ? fixHook.filter( event, originalEvent ) : event;
//	},

//	special: {
//		load: {
//			// Prevent triggered image.load events from bubbling to window.load
//			noBubble: true
//		},
//		focus: {
//			// Fire native event if possible so blur/focus sequence is correct
//			trigger: function() {
//				if ( this !== safeActiveElement() && this.focus ) {
//					this.focus();
//					return false;
//				}
//			},
//			delegateType: "focusin"
//		},
//		blur: {
//			trigger: function() {
//				if ( this === safeActiveElement() && this.blur ) {
//					this.blur();
//					return false;
//				}
//			},
//			delegateType: "focusout"
//		},
//		click: {
//			// For checkbox, fire native event so checked state will be right
//			trigger: function() {
//				if ( this.type === "checkbox" && this.click && jQuery.nodeName( this, "input" ) ) {
//					this.click();
//					return false;
//				}
//			},

//			// For cross-browser consistency, don't fire native .click() on links
//			_default: function( event ) {
//				return jQuery.nodeName( event.target, "a" );
//			}
//		},

//		beforeunload: {
//			postDispatch: function( event ) {

//				// Support: Firefox 20+
//				// Firefox doesn't alert if the returnValue field is not set.
//				if ( event.result !== undefined && event.originalEvent ) {
//					event.originalEvent.returnValue = event.result;
//				}
//			}
//		}
//	},

//	simulate: function( type, elem, event, bubble ) {
//		// Piggyback on a donor event to simulate a different one.
//		// Fake originalEvent to avoid donor's stopPropagation, but if the
//		// simulated event prevents default then we do the same on the donor.
//		var e = jQuery.extend(
//			new jQuery.Event(),
//			event,
//			{
//				type: type,
//				isSimulated: true,
//				originalEvent: {}
//			}
//		);
//		if ( bubble ) {
//			jQuery.event.trigger( e, null, elem );
//		} else {
//			jQuery.event.dispatch.call( elem, e );
//		}
//		if ( e.isDefaultPrevented() ) {
//			event.preventDefault();
//		}
//	}
//};

//jQuery.removeEvent = function( elem, type, handle ) {
//	if ( elem.removeEventListener ) {
//		elem.removeEventListener( type, handle, false );
//	}
//};

//jQuery.Event = function( src, props ) {
//	// Allow instantiation without the 'new' keyword
//	if ( !(this instanceof jQuery.Event) ) {
//		return new jQuery.Event( src, props );
//	}

//	// Event object
//	if ( src && src.type ) {
//		this.originalEvent = src;
//		this.type = src.type;

//		// Events bubbling up the document may have been marked as prevented
//		// by a handler lower down the tree; reflect the correct value.
//		this.isDefaultPrevented = src.defaultPrevented ||
//				src.defaultPrevented === undefined &&
//				// Support: Android < 4.0
//				src.returnValue === false ?
//			returnTrue :
//			returnFalse;

//	// Event type
//	} else {
//		this.type = src;
//	}

//	// Put explicitly provided properties onto the event object
//	if ( props ) {
//		jQuery.extend( this, props );
//	}

//	// Create a timestamp if incoming event doesn't have one
//	this.timeStamp = src && src.timeStamp || jQuery.now();

//	// Mark it as fixed
//	this[ jQuery.expando ] = true;
//};

//// jQuery.Event is based on DOM3 Events as specified by the ECMAScript Language Binding
//// http://www.w3.org/TR/2003/WD-DOM-Level-3-Events-20030331/ecma-script-binding.html
//jQuery.Event.prototype = {
//	isDefaultPrevented: returnFalse,
//	isPropagationStopped: returnFalse,
//	isImmediatePropagationStopped: returnFalse,

//	preventDefault: function() {
//		var e = this.originalEvent;

//		this.isDefaultPrevented = returnTrue;

//		if ( e && e.preventDefault ) {
//			e.preventDefault();
//		}
//	},
//	stopPropagation: function() {
//		var e = this.originalEvent;

//		this.isPropagationStopped = returnTrue;

//		if ( e && e.stopPropagation ) {
//			e.stopPropagation();
//		}
//	},
//	stopImmediatePropagation: function() {
//		var e = this.originalEvent;

//		this.isImmediatePropagationStopped = returnTrue;

//		if ( e && e.stopImmediatePropagation ) {
//			e.stopImmediatePropagation();
//		}

//		this.stopPropagation();
//	}
//};

//// Create mouseenter/leave events using mouseover/out and event-time checks
//// Support: Chrome 15+
//jQuery.each({
//	mouseenter: "mouseover",
//	mouseleave: "mouseout",
//	pointerenter: "pointerover",
//	pointerleave: "pointerout"
//}, function( orig, fix ) {
//	jQuery.event.special[ orig ] = {
//		delegateType: fix,
//		bindType: fix,

//		handle: function( event ) {
//			var ret,
//				target = this,
//				related = event.relatedTarget,
//				handleObj = event.handleObj;

//			// For mousenter/leave call the handler if related is outside the target.
//			// NB: No relatedTarget if the mouse left/entered the browser window
//			if ( !related || (related !== target && !jQuery.contains( target, related )) ) {
//				event.type = handleObj.origType;
//				ret = handleObj.handler.apply( this, arguments );
//				event.type = fix;
//			}
//			return ret;
//		}
//	};
//});

//// Create "bubbling" focus and blur events
//// Support: Firefox, Chrome, Safari
//if ( !support.focusinBubbles ) {
//	jQuery.each({ focus: "focusin", blur: "focusout" }, function( orig, fix ) {

//		// Attach a single capturing handler on the document while someone wants focusin/focusout
//		var handler = function( event ) {
//				jQuery.event.simulate( fix, event.target, jQuery.event.fix( event ), true );
//			};

//		jQuery.event.special[ fix ] = {
//			setup: function() {
//				var doc = this.ownerDocument || this,
//					attaches = data_priv.access( doc, fix );

//				if ( !attaches ) {
//					doc.addEventListener( orig, handler, true );
//				}
//				data_priv.access( doc, fix, ( attaches || 0 ) + 1 );
//			},
//			teardown: function() {
//				var doc = this.ownerDocument || this,
//					attaches = data_priv.access( doc, fix ) - 1;

//				if ( !attaches ) {
//					doc.removeEventListener( orig, handler, true );
//					data_priv.remove( doc, fix );

//				} else {
//					data_priv.access( doc, fix, attaches );
//				}
//			}
//		};
//	});
//}

//jQuery.fn.extend({

//	on: function( types, selector, data, fn, /*INTERNAL*/ one ) {
//		var origFn, type;

//		// Types can be a map of types/handlers
//		if ( typeof types === "object" ) {
//			// ( types-Object, selector, data )
//			if ( typeof selector !== "string" ) {
//				// ( types-Object, data )
//				data = data || selector;
//				selector = undefined;
//			}
//			for ( type in types ) {
//				this.on( type, selector, data, types[ type ], one );
//			}
//			return this;
//		}

//		if ( data == null && fn == null ) {
//			// ( types, fn )
//			fn = selector;
//			data = selector = undefined;
//		} else if ( fn == null ) {
//			if ( typeof selector === "string" ) {
//				// ( types, selector, fn )
//				fn = data;
//				data = undefined;
//			} else {
//				// ( types, data, fn )
//				fn = data;
//				data = selector;
//				selector = undefined;
//			}
//		}
//		if ( fn === false ) {
//			fn = returnFalse;
//		} else if ( !fn ) {
//			return this;
//		}

//		if ( one === 1 ) {
//			origFn = fn;
//			fn = function( event ) {
//				// Can use an empty set, since event contains the info
//				jQuery().off( event );
//				return origFn.apply( this, arguments );
//			};
//			// Use same guid so caller can remove using origFn
//			fn.guid = origFn.guid || ( origFn.guid = jQuery.guid++ );
//		}
//		return this.each( function() {
//			jQuery.event.add( this, types, fn, data, selector );
//		});
//	},
//	one: function( types, selector, data, fn ) {
//		return this.on( types, selector, data, fn, 1 );
//	},
//	off: function( types, selector, fn ) {
//		var handleObj, type;
//		if ( types && types.preventDefault && types.handleObj ) {
//			// ( event )  dispatched jQuery.Event
//			handleObj = types.handleObj;
//			jQuery( types.delegateTarget ).off(
//				handleObj.namespace ? handleObj.origType + "." + handleObj.namespace : handleObj.origType,
//				handleObj.selector,
//				handleObj.handler
//			);
//			return this;
//		}
//		if ( typeof types === "object" ) {
//			// ( types-object [, selector] )
//			for ( type in types ) {
//				this.off( type, selector, types[ type ] );
//			}
//			return this;
//		}
//		if ( selector === false || typeof selector === "function" ) {
//			// ( types [, fn] )
//			fn = selector;
//			selector = undefined;
//		}
//		if ( fn === false ) {
//			fn = returnFalse;
//		}
//		return this.each(function() {
//			jQuery.event.remove( this, types, fn, selector );
//		});
//	},

//	trigger: function( type, data ) {
//		return this.each(function() {
//			jQuery.event.trigger( type, data, this );
//		});
//	},
//	triggerHandler: function( type, data ) {
//		var elem = this[0];
//		if ( elem ) {
//			return jQuery.event.trigger( type, data, elem, true );
//		}
//	}
//});


//var
//	rxhtmlTag = /<(?!area|br|col|embed|hr|img|input|link|meta|param)(([\w:]+)[^>]*)\/>/gi,
//	rtagName = /<([\w:]+)/,
//	rhtml = /<|&#?\w+;/,
//	rnoInnerhtml = /<(?:script|style|link)/i,
//	// checked="checked" or checked
//	rchecked = /checked\s*(?:[^=]|=\s*.checked.)/i,
//	rscriptType = /^$|\/(?:java|ecma)script/i,
//	rscriptTypeMasked = /^true\/(.*)/,
//	rcleanScript = /^\s*<!(?:\[CDATA\[|--)|(?:\]\]|--)>\s*$/g,

//	// We have to close these tags to support XHTML (#13200)
//	wrapMap = {

//		// Support: IE 9
//		option: [ 1, "<select multiple='multiple'>", "</select>" ],

//		thead: [ 1, "<table>", "</table>" ],
//		col: [ 2, "<table><colgroup>", "</colgroup></table>" ],
//		tr: [ 2, "<table><tbody>", "</tbody></table>" ],
//		td: [ 3, "<table><tbody><tr>", "</tr></tbody></table>" ],

//		_default: [ 0, "", "" ]
//	};

//// Support: IE 9
//wrapMap.optgroup = wrapMap.option;

//wrapMap.tbody = wrapMap.tfoot = wrapMap.colgroup = wrapMap.caption = wrapMap.thead;
//wrapMap.th = wrapMap.td;

//// Support: 1.x compatibility
//// Manipulating tables requires a tbody
//function manipulationTarget( elem, content ) {
//	return jQuery.nodeName( elem, "table" ) &&
//		jQuery.nodeName( content.nodeType !== 11 ? content : content.firstChild, "tr" ) ?

//		elem.getElementsByTagName("tbody")[0] ||
//			elem.appendChild( elem.ownerDocument.createElement("tbody") ) :
//		elem;
//}

//// Replace/restore the type attribute of script elements for safe DOM manipulation
//function disableScript( elem ) {
//	elem.type = (elem.getAttribute("type") !== null) + "/" + elem.type;
//	return elem;
//}
//function restoreScript( elem ) {
//	var match = rscriptTypeMasked.exec( elem.type );

//	if ( match ) {
//		elem.type = match[ 1 ];
//	} else {
//		elem.removeAttribute("type");
//	}

//	return elem;
//}

//// Mark scripts as having already been evaluated
//function setGlobalEval( elems, refElements ) {
//	var i = 0,
//		l = elems.length;

//	for ( ; i < l; i++ ) {
//		data_priv.set(
//			elems[ i ], "globalEval", !refElements || data_priv.get( refElements[ i ], "globalEval" )
//		);
//	}
//}

//function cloneCopyEvent( src, dest ) {
//	var i, l, type, pdataOld, pdataCur, udataOld, udataCur, events;

//	if ( dest.nodeType !== 1 ) {
//		return;
//	}

//	// 1. Copy private data: events, handlers, etc.
//	if ( data_priv.hasData( src ) ) {
//		pdataOld = data_priv.access( src );
//		pdataCur = data_priv.set( dest, pdataOld );
//		events = pdataOld.events;

//		if ( events ) {
//			delete pdataCur.handle;
//			pdataCur.events = {};

//			for ( type in events ) {
//				for ( i = 0, l = events[ type ].length; i < l; i++ ) {
//					jQuery.event.add( dest, type, events[ type ][ i ] );
//				}
//			}
//		}
//	}

//	// 2. Copy user data
//	if ( data_user.hasData( src ) ) {
//		udataOld = data_user.access( src );
//		udataCur = jQuery.extend( {}, udataOld );

//		data_user.set( dest, udataCur );
//	}
//}

//function getAll( context, tag ) {
//	var ret = context.getElementsByTagName ? context.getElementsByTagName( tag || "*" ) :
//			context.querySelectorAll ? context.querySelectorAll( tag || "*" ) :
//			[];

//	return tag === undefined || tag && jQuery.nodeName( context, tag ) ?
//		jQuery.merge( [ context ], ret ) :
//		ret;
//}

//// Support: IE >= 9
//function fixInput( src, dest ) {
//	var nodeName = dest.nodeName.toLowerCase();

//	// Fails to persist the checked state of a cloned checkbox or radio button.
//	if ( nodeName === "input" && rcheckableType.test( src.type ) ) {
//		dest.checked = src.checked;

//	// Fails to return the selected option to the default selected state when cloning options
//	} else if ( nodeName === "input" || nodeName === "textarea" ) {
//		dest.defaultValue = src.defaultValue;
//	}
//}

//jQuery.extend({
//	clone: function( elem, dataAndEvents, deepDataAndEvents ) {
//		var i, l, srcElements, destElements,
//			clone = elem.cloneNode( true ),
//			inPage = jQuery.contains( elem.ownerDocument, elem );

//		// Support: IE >= 9
//		// Fix Cloning issues
//		if ( !support.noCloneChecked && ( elem.nodeType === 1 || elem.nodeType === 11 ) &&
//				!jQuery.isXMLDoc( elem ) ) {

//			// We eschew Sizzle here for performance reasons: http://jsperf.com/getall-vs-sizzle/2
//			destElements = getAll( clone );
//			srcElements = getAll( elem );

//			for ( i = 0, l = srcElements.length; i < l; i++ ) {
//				fixInput( srcElements[ i ], destElements[ i ] );
//			}
//		}

//		// Copy the events from the original to the clone
//		if ( dataAndEvents ) {
//			if ( deepDataAndEvents ) {
//				srcElements = srcElements || getAll( elem );
//				destElements = destElements || getAll( clone );

//				for ( i = 0, l = srcElements.length; i < l; i++ ) {
//					cloneCopyEvent( srcElements[ i ], destElements[ i ] );
//				}
//			} else {
//				cloneCopyEvent( elem, clone );
//			}
//		}

//		// Preserve script evaluation history
//		destElements = getAll( clone, "script" );
//		if ( destElements.length > 0 ) {
//			setGlobalEval( destElements, !inPage && getAll( elem, "script" ) );
//		}

//		// Return the cloned set
//		return clone;
//	},

//	buildFragment: function( elems, context, scripts, selection ) {
//		var elem, tmp, tag, wrap, contains, j,
//			fragment = context.createDocumentFragment(),
//			nodes = [],
//			i = 0,
//			l = elems.length;

//		for ( ; i < l; i++ ) {
//			elem = elems[ i ];

//			if ( elem || elem === 0 ) {

//				// Add nodes directly
//				if ( jQuery.type( elem ) === "object" ) {
//					// Support: QtWebKit
//					// jQuery.merge because push.apply(_, arraylike) throws
//					jQuery.merge( nodes, elem.nodeType ? [ elem ] : elem );

//				// Convert non-html into a text node
//				} else if ( !rhtml.test( elem ) ) {
//					nodes.push( context.createTextNode( elem ) );

//				// Convert html into DOM nodes
//				} else {
//					tmp = tmp || fragment.appendChild( context.createElement("div") );

//					// Deserialize a standard representation
//					tag = ( rtagName.exec( elem ) || [ "", "" ] )[ 1 ].toLowerCase();
//					wrap = wrapMap[ tag ] || wrapMap._default;
//					tmp.innerHTML = wrap[ 1 ] + elem.replace( rxhtmlTag, "<$1></$2>" ) + wrap[ 2 ];

//					// Descend through wrappers to the right content
//					j = wrap[ 0 ];
//					while ( j-- ) {
//						tmp = tmp.lastChild;
//					}

//					// Support: QtWebKit
//					// jQuery.merge because push.apply(_, arraylike) throws
//					jQuery.merge( nodes, tmp.childNodes );

//					// Remember the top-level container
//					tmp = fragment.firstChild;

//					// Fixes #12346
//					// Support: Webkit, IE
//					tmp.textContent = "";
//				}
//			}
//		}

//		// Remove wrapper from fragment
//		fragment.textContent = "";

//		i = 0;
//		while ( (elem = nodes[ i++ ]) ) {

//			// #4087 - If origin and destination elements are the same, and this is
//			// that element, do not do anything
//			if ( selection && jQuery.inArray( elem, selection ) !== -1 ) {
//				continue;
//			}

//			contains = jQuery.contains( elem.ownerDocument, elem );

//			// Append to fragment
//			tmp = getAll( fragment.appendChild( elem ), "script" );

//			// Preserve script evaluation history
//			if ( contains ) {
//				setGlobalEval( tmp );
//			}

//			// Capture executables
//			if ( scripts ) {
//				j = 0;
//				while ( (elem = tmp[ j++ ]) ) {
//					if ( rscriptType.test( elem.type || "" ) ) {
//						scripts.push( elem );
//					}
//				}
//			}
//		}

//		return fragment;
//	},

//	cleanData: function( elems ) {
//		var data, elem, type, key,
//			special = jQuery.event.special,
//			i = 0;

//		for ( ; (elem = elems[ i ]) !== undefined; i++ ) {
//			if ( jQuery.acceptData( elem ) ) {
//				key = elem[ data_priv.expando ];

//				if ( key && (data = data_priv.cache[ key ]) ) {
//					if ( data.events ) {
//						for ( type in data.events ) {
//							if ( special[ type ] ) {
//								jQuery.event.remove( elem, type );

//							// This is a shortcut to avoid jQuery.event.remove's overhead
//							} else {
//								jQuery.removeEvent( elem, type, data.handle );
//							}
//						}
//					}
//					if ( data_priv.cache[ key ] ) {
//						// Discard any remaining `private` data
//						delete data_priv.cache[ key ];
//					}
//				}
//			}
//			// Discard any remaining `user` data
//			delete data_user.cache[ elem[ data_user.expando ] ];
//		}
//	}
//});

//jQuery.fn.extend({
//	text: function( value ) {
//		return access( this, function( value ) {
//			return value === undefined ?
//				jQuery.text( this ) :
//				this.empty().each(function() {
//					if ( this.nodeType === 1 || this.nodeType === 11 || this.nodeType === 9 ) {
//						this.textContent = value;
//					}
//				});
//		}, null, value, arguments.length );
//	},

//	append: function() {
//		return this.domManip( arguments, function( elem ) {
//			if ( this.nodeType === 1 || this.nodeType === 11 || this.nodeType === 9 ) {
//				var target = manipulationTarget( this, elem );
//				target.appendChild( elem );
//			}
//		});
//	},

//	prepend: function() {
//		return this.domManip( arguments, function( elem ) {
//			if ( this.nodeType === 1 || this.nodeType === 11 || this.nodeType === 9 ) {
//				var target = manipulationTarget( this, elem );
//				target.insertBefore( elem, target.firstChild );
//			}
//		});
//	},

//	before: function() {
//		return this.domManip( arguments, function( elem ) {
//			if ( this.parentNode ) {
//				this.parentNode.insertBefore( elem, this );
//			}
//		});
//	},

//	after: function() {
//		return this.domManip( arguments, function( elem ) {
//			if ( this.parentNode ) {
//				this.parentNode.insertBefore( elem, this.nextSibling );
//			}
//		});
//	},

//	remove: function( selector, keepData /* Internal Use Only */ ) {
//		var elem,
//			elems = selector ? jQuery.filter( selector, this ) : this,
//			i = 0;

//		for ( ; (elem = elems[i]) != null; i++ ) {
//			if ( !keepData && elem.nodeType === 1 ) {
//				jQuery.cleanData( getAll( elem ) );
//			}

//			if ( elem.parentNode ) {
//				if ( keepData && jQuery.contains( elem.ownerDocument, elem ) ) {
//					setGlobalEval( getAll( elem, "script" ) );
//				}
//				elem.parentNode.removeChild( elem );
//			}
//		}

//		return this;
//	},

//	empty: function() {
//		var elem,
//			i = 0;

//		for ( ; (elem = this[i]) != null; i++ ) {
//			if ( elem.nodeType === 1 ) {

//				// Prevent memory leaks
//				jQuery.cleanData( getAll( elem, false ) );

//				// Remove any remaining nodes
//				elem.textContent = "";
//			}
//		}

//		return this;
//	},

//	clone: function( dataAndEvents, deepDataAndEvents ) {
//		dataAndEvents = dataAndEvents == null ? false : dataAndEvents;
//		deepDataAndEvents = deepDataAndEvents == null ? dataAndEvents : deepDataAndEvents;

//		return this.map(function() {
//			return jQuery.clone( this, dataAndEvents, deepDataAndEvents );
//		});
//	},

//	html: function( value ) {
//		return access( this, function( value ) {
//			var elem = this[ 0 ] || {},
//				i = 0,
//				l = this.length;

//			if ( value === undefined && elem.nodeType === 1 ) {
//				return elem.innerHTML;
//			}

//			// See if we can take a shortcut and just use innerHTML
//			if ( typeof value === "string" && !rnoInnerhtml.test( value ) &&
//				!wrapMap[ ( rtagName.exec( value ) || [ "", "" ] )[ 1 ].toLowerCase() ] ) {

//				value = value.replace( rxhtmlTag, "<$1></$2>" );

//				try {
//					for ( ; i < l; i++ ) {
//						elem = this[ i ] || {};

//						// Remove element nodes and prevent memory leaks
//						if ( elem.nodeType === 1 ) {
//							jQuery.cleanData( getAll( elem, false ) );
//							elem.innerHTML = value;
//						}
//					}

//					elem = 0;

//				// If using innerHTML throws an exception, use the fallback method
//				} catch( e ) {}
//			}

//			if ( elem ) {
//				this.empty().append( value );
//			}
//		}, null, value, arguments.length );
//	},

//	replaceWith: function() {
//		var arg = arguments[ 0 ];

//		// Make the changes, replacing each context element with the new content
//		this.domManip( arguments, function( elem ) {
//			arg = this.parentNode;

//			jQuery.cleanData( getAll( this ) );

//			if ( arg ) {
//				arg.replaceChild( elem, this );
//			}
//		});

//		// Force removal if there was no new content (e.g., from empty arguments)
//		return arg && (arg.length || arg.nodeType) ? this : this.remove();
//	},

//	detach: function( selector ) {
//		return this.remove( selector, true );
//	},

//	domManip: function( args, callback ) {

//		// Flatten any nested arrays
//		args = concat.apply( [], args );

//		var fragment, first, scripts, hasScripts, node, doc,
//			i = 0,
//			l = this.length,
//			set = this,
//			iNoClone = l - 1,
//			value = args[ 0 ],
//			isFunction = jQuery.isFunction( value );

//		// We can't cloneNode fragments that contain checked, in WebKit
//		if ( isFunction ||
//				( l > 1 && typeof value === "string" &&
//					!support.checkClone && rchecked.test( value ) ) ) {
//			return this.each(function( index ) {
//				var self = set.eq( index );
//				if ( isFunction ) {
//					args[ 0 ] = value.call( this, index, self.html() );
//				}
//				self.domManip( args, callback );
//			});
//		}

//		if ( l ) {
//			fragment = jQuery.buildFragment( args, this[ 0 ].ownerDocument, false, this );
//			first = fragment.firstChild;

//			if ( fragment.childNodes.length === 1 ) {
//				fragment = first;
//			}

//			if ( first ) {
//				scripts = jQuery.map( getAll( fragment, "script" ), disableScript );
//				hasScripts = scripts.length;

//				// Use the original fragment for the last item instead of the first because it can end up
//				// being emptied incorrectly in certain situations (#8070).
//				for ( ; i < l; i++ ) {
//					node = fragment;

//					if ( i !== iNoClone ) {
//						node = jQuery.clone( node, true, true );

//						// Keep references to cloned scripts for later restoration
//						if ( hasScripts ) {
//							// Support: QtWebKit
//							// jQuery.merge because push.apply(_, arraylike) throws
//							jQuery.merge( scripts, getAll( node, "script" ) );
//						}
//					}

//					callback.call( this[ i ], node, i );
//				}

//				if ( hasScripts ) {
//					doc = scripts[ scripts.length - 1 ].ownerDocument;

//					// Reenable scripts
//					jQuery.map( scripts, restoreScript );

//					// Evaluate executable scripts on first document insertion
//					for ( i = 0; i < hasScripts; i++ ) {
//						node = scripts[ i ];
//						if ( rscriptType.test( node.type || "" ) &&
//							!data_priv.access( node, "globalEval" ) && jQuery.contains( doc, node ) ) {

//							if ( node.src ) {
//								// Optional AJAX dependency, but won't run scripts if not present
//								if ( jQuery._evalUrl ) {
//									jQuery._evalUrl( node.src );
//								}
//							} else {
//								jQuery.globalEval( node.textContent.replace( rcleanScript, "" ) );
//							}
//						}
//					}
//				}
//			}
//		}

//		return this;
//	}
//});

//jQuery.each({
//	appendTo: "append",
//	prependTo: "prepend",
//	insertBefore: "before",
//	insertAfter: "after",
//	replaceAll: "replaceWith"
//}, function( name, original ) {
//	jQuery.fn[ name ] = function( selector ) {
//		var elems,
//			ret = [],
//			insert = jQuery( selector ),
//			last = insert.length - 1,
//			i = 0;

//		for ( ; i <= last; i++ ) {
//			elems = i === last ? this : this.clone( true );
//			jQuery( insert[ i ] )[ original ]( elems );

//			// Support: QtWebKit
//			// .get() because push.apply(_, arraylike) throws
//			push.apply( ret, elems.get() );
//		}

//		return this.pushStack( ret );
//	};
//});


//var iframe,
//	elemdisplay = {};

///**
// * Retrieve the actual display of a element
// * @param {String} name nodeName of the element
// * @param {Object} doc Document object
// */
//// Called only from within defaultDisplay
//function actualDisplay( name, doc ) {
//	var style,
//		elem = jQuery( doc.createElement( name ) ).appendTo( doc.body ),

//		// getDefaultComputedStyle might be reliably used only on attached element
//		display = window.getDefaultComputedStyle && ( style = window.getDefaultComputedStyle( elem[ 0 ] ) ) ?

//			// Use of this method is a temporary fix (more like optmization) until something better comes along,
//			// since it was removed from specification and supported only in FF
//			style.display : jQuery.css( elem[ 0 ], "display" );

//	// We don't have any data stored on the element,
//	// so use "detach" method as fast way to get rid of the element
//	elem.detach();

//	return display;
//}

///**
// * Try to determine the default display value of an element
// * @param {String} nodeName
// */
//function defaultDisplay( nodeName ) {
//	var doc = document,
//		display = elemdisplay[ nodeName ];

//	if ( !display ) {
//		display = actualDisplay( nodeName, doc );

//		// If the simple way fails, read from inside an iframe
//		if ( display === "none" || !display ) {

//			// Use the already-created iframe if possible
//			iframe = (iframe || jQuery( "<iframe frameborder='0' width='0' height='0'/>" )).appendTo( doc.documentElement );

//			// Always write a new HTML skeleton so Webkit and Firefox don't choke on reuse
//			doc = iframe[ 0 ].contentDocument;

//			// Support: IE
//			doc.write();
//			doc.close();

//			display = actualDisplay( nodeName, doc );
//			iframe.detach();
//		}

//		// Store the correct default display
//		elemdisplay[ nodeName ] = display;
//	}

//	return display;
//}
//var rmargin = (/^margin/);

//var rnumnonpx = new RegExp( "^(" + pnum + ")(?!px)[a-z%]+$", "i" );

//var getStyles = function( elem ) {
//		return elem.ownerDocument.defaultView.getComputedStyle( elem, null );
//	};



//function curCSS( elem, name, computed ) {
//	var width, minWidth, maxWidth, ret,
//		style = elem.style;

//	computed = computed || getStyles( elem );

//	// Support: IE9
//	// getPropertyValue is only needed for .css('filter') in IE9, see #12537
//	if ( computed ) {
//		ret = computed.getPropertyValue( name ) || computed[ name ];
//	}

//	if ( computed ) {

//		if ( ret === "" && !jQuery.contains( elem.ownerDocument, elem ) ) {
//			ret = jQuery.style( elem, name );
//		}

//		// Support: iOS < 6
//		// A tribute to the "awesome hack by Dean Edwards"
//		// iOS < 6 (at least) returns percentage for a larger set of values, but width seems to be reliably pixels
//		// this is against the CSSOM draft spec: http://dev.w3.org/csswg/cssom/#resolved-values
//		if ( rnumnonpx.test( ret ) && rmargin.test( name ) ) {

//			// Remember the original values
//			width = style.width;
//			minWidth = style.minWidth;
//			maxWidth = style.maxWidth;

//			// Put in the new values to get a computed value out
//			style.minWidth = style.maxWidth = style.width = ret;
//			ret = computed.width;

//			// Revert the changed values
//			style.width = width;
//			style.minWidth = minWidth;
//			style.maxWidth = maxWidth;
//		}
//	}

//	return ret !== undefined ?
//		// Support: IE
//		// IE returns zIndex value as an integer.
//		ret + "" :
//		ret;
//}


//function addGetHookIf( conditionFn, hookFn ) {
//	// Define the hook, we'll check on the first run if it's really needed.
//	return {
//		get: function() {
//			if ( conditionFn() ) {
//				// Hook not needed (or it's not possible to use it due to missing dependency),
//				// remove it.
//				// Since there are no other hooks for marginRight, remove the whole object.
//				delete this.get;
//				return;
//			}

//			// Hook needed; redefine it so that the support test is not executed again.

//			return (this.get = hookFn).apply( this, arguments );
//		}
//	};
//}


//(function() {
//	var pixelPositionVal, boxSizingReliableVal,
//		docElem = document.documentElement,
//		container = document.createElement( "div" ),
//		div = document.createElement( "div" );

//	if ( !div.style ) {
//		return;
//	}

//	div.style.backgroundClip = "content-box";
//	div.cloneNode( true ).style.backgroundClip = "";
//	support.clearCloneStyle = div.style.backgroundClip === "content-box";

//	container.style.cssText = "border:0;width:0;height:0;top:0;left:-9999px;margin-top:1px;" +
//		"position:absolute";
//	container.appendChild( div );

//	// Executing both pixelPosition & boxSizingReliable tests require only one layout
//	// so they're executed at the same time to save the second computation.
//	function computePixelPositionAndBoxSizingReliable() {
//		div.style.cssText =
//			// Support: Firefox<29, Android 2.3
//			// Vendor-prefix box-sizing
//			"-webkit-box-sizing:border-box;-moz-box-sizing:border-box;" +
//			"box-sizing:border-box;display:block;margin-top:1%;top:1%;" +
//			"border:1px;padding:1px;width:4px;position:absolute";
//		div.innerHTML = "";
//		docElem.appendChild( container );

//		var divStyle = window.getComputedStyle( div, null );
//		pixelPositionVal = divStyle.top !== "1%";
//		boxSizingReliableVal = divStyle.width === "4px";

//		docElem.removeChild( container );
//	}

//	// Support: node.js jsdom
//	// Don't assume that getComputedStyle is a property of the global object
//	if ( window.getComputedStyle ) {
//		jQuery.extend( support, {
//			pixelPosition: function() {
//				// This test is executed only once but we still do memoizing
//				// since we can use the boxSizingReliable pre-computing.
//				// No need to check if the test was already performed, though.
//				computePixelPositionAndBoxSizingReliable();
//				return pixelPositionVal;
//			},
//			boxSizingReliable: function() {
//				if ( boxSizingReliableVal == null ) {
//					computePixelPositionAndBoxSizingReliable();
//				}
//				return boxSizingReliableVal;
//			},
//			reliableMarginRight: function() {
//				// Support: Android 2.3
//				// Check if div with explicit width and no margin-right incorrectly
//				// gets computed margin-right based on width of container. (#3333)
//				// WebKit Bug 13343 - getComputedStyle returns wrong value for margin-right
//				// This support function is only executed once so no memoizing is needed.
//				var ret,
//					marginDiv = div.appendChild( document.createElement( "div" ) );

//				// Reset CSS: box-sizing; display; margin; border; padding
//				marginDiv.style.cssText = div.style.cssText =
//					// Support: Firefox<29, Android 2.3
//					// Vendor-prefix box-sizing
//					"-webkit-box-sizing:content-box;-moz-box-sizing:content-box;" +
//					"box-sizing:content-box;display:block;margin:0;border:0;padding:0";
//				marginDiv.style.marginRight = marginDiv.style.width = "0";
//				div.style.width = "1px";
//				docElem.appendChild( container );

//				ret = !parseFloat( window.getComputedStyle( marginDiv, null ).marginRight );

//				docElem.removeChild( container );

//				return ret;
//			}
//		});
//	}
//})();


//// A method for quickly swapping in/out CSS properties to get correct calculations.
//jQuery.swap = function( elem, options, callback, args ) {
//	var ret, name,
//		old = {};

//	// Remember the old values, and insert the new ones
//	for ( name in options ) {
//		old[ name ] = elem.style[ name ];
//		elem.style[ name ] = options[ name ];
//	}

//	ret = callback.apply( elem, args || [] );

//	// Revert the old values
//	for ( name in options ) {
//		elem.style[ name ] = old[ name ];
//	}

//	return ret;
//};


//var
//	// swappable if display is none or starts with table except "table", "table-cell", or "table-caption"
//	// see here for display values: https://developer.mozilla.org/en-US/docs/CSS/display
//	rdisplayswap = /^(none|table(?!-c[ea]).+)/,
//	rnumsplit = new RegExp( "^(" + pnum + ")(.*)$", "i" ),
//	rrelNum = new RegExp( "^([+-])=(" + pnum + ")", "i" ),

//	cssShow = { position: "absolute", visibility: "hidden", display: "block" },
//	cssNormalTransform = {
//		letterSpacing: "0",
//		fontWeight: "400"
//	},

//	cssPrefixes = [ "Webkit", "O", "Moz", "ms" ];

//// return a css property mapped to a potentially vendor prefixed property
//function vendorPropName( style, name ) {

//	// shortcut for names that are not vendor prefixed
//	if ( name in style ) {
//		return name;
//	}

//	// check for vendor prefixed names
//	var capName = name[0].toUpperCase() + name.slice(1),
//		origName = name,
//		i = cssPrefixes.length;

//	while ( i-- ) {
//		name = cssPrefixes[ i ] + capName;
//		if ( name in style ) {
//			return name;
//		}
//	}

//	return origName;
//}

//function setPositiveNumber( elem, value, subtract ) {
//	var matches = rnumsplit.exec( value );
//	return matches ?
//		// Guard against undefined "subtract", e.g., when used as in cssHooks
//		Math.max( 0, matches[ 1 ] - ( subtract || 0 ) ) + ( matches[ 2 ] || "px" ) :
//		value;
//}

//function augmentWidthOrHeight( elem, name, extra, isBorderBox, styles ) {
//	var i = extra === ( isBorderBox ? "border" : "content" ) ?
//		// If we already have the right measurement, avoid augmentation
//		4 :
//		// Otherwise initialize for horizontal or vertical properties
//		name === "width" ? 1 : 0,

//		val = 0;

//	for ( ; i < 4; i += 2 ) {
//		// both box models exclude margin, so add it if we want it
//		if ( extra === "margin" ) {
//			val += jQuery.css( elem, extra + cssExpand[ i ], true, styles );
//		}

//		if ( isBorderBox ) {
//			// border-box includes padding, so remove it if we want content
//			if ( extra === "content" ) {
//				val -= jQuery.css( elem, "padding" + cssExpand[ i ], true, styles );
//			}

//			// at this point, extra isn't border nor margin, so remove border
//			if ( extra !== "margin" ) {
//				val -= jQuery.css( elem, "border" + cssExpand[ i ] + "Width", true, styles );
//			}
//		} else {
//			// at this point, extra isn't content, so add padding
//			val += jQuery.css( elem, "padding" + cssExpand[ i ], true, styles );

//			// at this point, extra isn't content nor padding, so add border
//			if ( extra !== "padding" ) {
//				val += jQuery.css( elem, "border" + cssExpand[ i ] + "Width", true, styles );
//			}
//		}
//	}

//	return val;
//}

//function getWidthOrHeight( elem, name, extra ) {

//	// Start with offset property, which is equivalent to the border-box value
//	var valueIsBorderBox = true,
//		val = name === "width" ? elem.offsetWidth : elem.offsetHeight,
//		styles = getStyles( elem ),
//		isBorderBox = jQuery.css( elem, "boxSizing", false, styles ) === "border-box";

//	// some non-html elements return undefined for offsetWidth, so check for null/undefined
//	// svg - https://bugzilla.mozilla.org/show_bug.cgi?id=649285
//	// MathML - https://bugzilla.mozilla.org/show_bug.cgi?id=491668
//	if ( val <= 0 || val == null ) {
//		// Fall back to computed then uncomputed css if necessary
//		val = curCSS( elem, name, styles );
//		if ( val < 0 || val == null ) {
//			val = elem.style[ name ];
//		}

//		// Computed unit is not pixels. Stop here and return.
//		if ( rnumnonpx.test(val) ) {
//			return val;
//		}

//		// we need the check for style in case a browser which returns unreliable values
//		// for getComputedStyle silently falls back to the reliable elem.style
//		valueIsBorderBox = isBorderBox &&
//			( support.boxSizingReliable() || val === elem.style[ name ] );

//		// Normalize "", auto, and prepare for extra
//		val = parseFloat( val ) || 0;
//	}

//	// use the active box-sizing model to add/subtract irrelevant styles
//	return ( val +
//		augmentWidthOrHeight(
//			elem,
//			name,
//			extra || ( isBorderBox ? "border" : "content" ),
//			valueIsBorderBox,
//			styles
//		)
//	) + "px";
//}

//function showHide( elements, show ) {
//	var display, elem, hidden,
//		values = [],
//		index = 0,
//		length = elements.length;

//	for ( ; index < length; index++ ) {
//		elem = elements[ index ];
//		if ( !elem.style ) {
//			continue;
//		}

//		values[ index ] = data_priv.get( elem, "olddisplay" );
//		display = elem.style.display;
//		if ( show ) {
//			// Reset the inline display of this element to learn if it is
//			// being hidden by cascaded rules or not
//			if ( !values[ index ] && display === "none" ) {
//				elem.style.display = "";
//			}

//			// Set elements which have been overridden with display: none
//			// in a stylesheet to whatever the default browser style is
//			// for such an element
//			if ( elem.style.display === "" && isHidden( elem ) ) {
//				values[ index ] = data_priv.access( elem, "olddisplay", defaultDisplay(elem.nodeName) );
//			}
//		} else {
//			hidden = isHidden( elem );

//			if ( display !== "none" || !hidden ) {
//				data_priv.set( elem, "olddisplay", hidden ? display : jQuery.css( elem, "display" ) );
//			}
//		}
//	}

//	// Set the display of most of the elements in a second loop
//	// to avoid the constant reflow
//	for ( index = 0; index < length; index++ ) {
//		elem = elements[ index ];
//		if ( !elem.style ) {
//			continue;
//		}
//		if ( !show || elem.style.display === "none" || elem.style.display === "" ) {
//			elem.style.display = show ? values[ index ] || "" : "none";
//		}
//	}

//	return elements;
//}

//jQuery.extend({
//	// Add in style property hooks for overriding the default
//	// behavior of getting and setting a style property
//	cssHooks: {
//		opacity: {
//			get: function( elem, computed ) {
//				if ( computed ) {
//					// We should always get a number back from opacity
//					var ret = curCSS( elem, "opacity" );
//					return ret === "" ? "1" : ret;
//				}
//			}
//		}
//	},

//	// Don't automatically add "px" to these possibly-unitless properties
//	cssNumber: {
//		"columnCount": true,
//		"fillOpacity": true,
//		"flexGrow": true,
//		"flexShrink": true,
//		"fontWeight": true,
//		"lineHeight": true,
//		"opacity": true,
//		"order": true,
//		"orphans": true,
//		"widows": true,
//		"zIndex": true,
//		"zoom": true
//	},

//	// Add in properties whose names you wish to fix before
//	// setting or getting the value
//	cssProps: {
//		// normalize float css property
//		"float": "cssFloat"
//	},

//	// Get and set the style property on a DOM Node
//	style: function( elem, name, value, extra ) {
//		// Don't set styles on text and comment nodes
//		if ( !elem || elem.nodeType === 3 || elem.nodeType === 8 || !elem.style ) {
//			return;
//		}

//		// Make sure that we're working with the right name
//		var ret, type, hooks,
//			origName = jQuery.camelCase( name ),
//			style = elem.style;

//		name = jQuery.cssProps[ origName ] || ( jQuery.cssProps[ origName ] = vendorPropName( style, origName ) );

//		// gets hook for the prefixed version
//		// followed by the unprefixed version
//		hooks = jQuery.cssHooks[ name ] || jQuery.cssHooks[ origName ];

//		// Check if we're setting a value
//		if ( value !== undefined ) {
//			type = typeof value;

//			// convert relative number strings (+= or -=) to relative numbers. #7345
//			if ( type === "string" && (ret = rrelNum.exec( value )) ) {
//				value = ( ret[1] + 1 ) * ret[2] + parseFloat( jQuery.css( elem, name ) );
//				// Fixes bug #9237
//				type = "number";
//			}

//			// Make sure that null and NaN values aren't set. See: #7116
//			if ( value == null || value !== value ) {
//				return;
//			}

//			// If a number was passed in, add 'px' to the (except for certain CSS properties)
//			if ( type === "number" && !jQuery.cssNumber[ origName ] ) {
//				value += "px";
//			}

//			// Fixes #8908, it can be done more correctly by specifying setters in cssHooks,
//			// but it would mean to define eight (for every problematic property) identical functions
//			if ( !support.clearCloneStyle && value === "" && name.indexOf( "background" ) === 0 ) {
//				style[ name ] = "inherit";
//			}

//			// If a hook was provided, use that value, otherwise just set the specified value
//			if ( !hooks || !("set" in hooks) || (value = hooks.set( elem, value, extra )) !== undefined ) {
//				style[ name ] = value;
//			}

//		} else {
//			// If a hook was provided get the non-computed value from there
//			if ( hooks && "get" in hooks && (ret = hooks.get( elem, false, extra )) !== undefined ) {
//				return ret;
//			}

//			// Otherwise just get the value from the style object
//			return style[ name ];
//		}
//	},

//	css: function( elem, name, extra, styles ) {
//		var val, num, hooks,
//			origName = jQuery.camelCase( name );

//		// Make sure that we're working with the right name
//		name = jQuery.cssProps[ origName ] || ( jQuery.cssProps[ origName ] = vendorPropName( elem.style, origName ) );

//		// gets hook for the prefixed version
//		// followed by the unprefixed version
//		hooks = jQuery.cssHooks[ name ] || jQuery.cssHooks[ origName ];

//		// If a hook was provided get the computed value from there
//		if ( hooks && "get" in hooks ) {
//			val = hooks.get( elem, true, extra );
//		}

//		// Otherwise, if a way to get the computed value exists, use that
//		if ( val === undefined ) {
//			val = curCSS( elem, name, styles );
//		}

//		//convert "normal" to computed value
//		if ( val === "normal" && name in cssNormalTransform ) {
//			val = cssNormalTransform[ name ];
//		}

//		// Return, converting to number if forced or a qualifier was provided and val looks numeric
//		if ( extra === "" || extra ) {
//			num = parseFloat( val );
//			return extra === true || jQuery.isNumeric( num ) ? num || 0 : val;
//		}
//		return val;
//	}
//});

//jQuery.each([ "height", "width" ], function( i, name ) {
//	jQuery.cssHooks[ name ] = {
//		get: function( elem, computed, extra ) {
//			if ( computed ) {
//				// certain elements can have dimension info if we invisibly show them
//				// however, it must have a current display style that would benefit from this
//				return rdisplayswap.test( jQuery.css( elem, "display" ) ) && elem.offsetWidth === 0 ?
//					jQuery.swap( elem, cssShow, function() {
//						return getWidthOrHeight( elem, name, extra );
//					}) :
//					getWidthOrHeight( elem, name, extra );
//			}
//		},

//		set: function( elem, value, extra ) {
//			var styles = extra && getStyles( elem );
//			return setPositiveNumber( elem, value, extra ?
//				augmentWidthOrHeight(
//					elem,
//					name,
//					extra,
//					jQuery.css( elem, "boxSizing", false, styles ) === "border-box",
//					styles
//				) : 0
//			);
//		}
//	};
//});

//// Support: Android 2.3
//jQuery.cssHooks.marginRight = addGetHookIf( support.reliableMarginRight,
//	function( elem, computed ) {
//		if ( computed ) {
//			// WebKit Bug 13343 - getComputedStyle returns wrong value for margin-right
//			// Work around by temporarily setting element display to inline-block
//			return jQuery.swap( elem, { "display": "inline-block" },
//				curCSS, [ elem, "marginRight" ] );
//		}
//	}
//);

//// These hooks are used by animate to expand properties
//jQuery.each({
//	margin: "",
//	padding: "",
//	border: "Width"
//}, function( prefix, suffix ) {
//	jQuery.cssHooks[ prefix + suffix ] = {
//		expand: function( value ) {
//			var i = 0,
//				expanded = {},

//				// assumes a single number if not a string
//				parts = typeof value === "string" ? value.split(" ") : [ value ];

//			for ( ; i < 4; i++ ) {
//				expanded[ prefix + cssExpand[ i ] + suffix ] =
//					parts[ i ] || parts[ i - 2 ] || parts[ 0 ];
//			}

//			return expanded;
//		}
//	};

//	if ( !rmargin.test( prefix ) ) {
//		jQuery.cssHooks[ prefix + suffix ].set = setPositiveNumber;
//	}
//});

//jQuery.fn.extend({
//	css: function( name, value ) {
//		return access( this, function( elem, name, value ) {
//			var styles, len,
//				map = {},
//				i = 0;

//			if ( jQuery.isArray( name ) ) {
//				styles = getStyles( elem );
//				len = name.length;

//				for ( ; i < len; i++ ) {
//					map[ name[ i ] ] = jQuery.css( elem, name[ i ], false, styles );
//				}

//				return map;
//			}

//			return value !== undefined ?
//				jQuery.style( elem, name, value ) :
//				jQuery.css( elem, name );
//		}, name, value, arguments.length > 1 );
//	},
//	show: function() {
//		return showHide( this, true );
//	},
//	hide: function() {
//		return showHide( this );
//	},
//	toggle: function( state ) {
//		if ( typeof state === "boolean" ) {
//			return state ? this.show() : this.hide();
//		}

//		return this.each(function() {
//			if ( isHidden( this ) ) {
//				jQuery( this ).show();
//			} else {
//				jQuery( this ).hide();
//			}
//		});
//	}
//});


//function Tween( elem, options, prop, end, easing ) {
//	return new Tween.prototype.init( elem, options, prop, end, easing );
//}
//jQuery.Tween = Tween;

//Tween.prototype = {
//	constructor: Tween,
//	init: function( elem, options, prop, end, easing, unit ) {
//		this.elem = elem;
//		this.prop = prop;
//		this.easing = easing || "swing";
//		this.options = options;
//		this.start = this.now = this.cur();
//		this.end = end;
//		this.unit = unit || ( jQuery.cssNumber[ prop ] ? "" : "px" );
//	},
//	cur: function() {
//		var hooks = Tween.propHooks[ this.prop ];

//		return hooks && hooks.get ?
//			hooks.get( this ) :
//			Tween.propHooks._default.get( this );
//	},
//	run: function( percent ) {
//		var eased,
//			hooks = Tween.propHooks[ this.prop ];

//		if ( this.options.duration ) {
//			this.pos = eased = jQuery.easing[ this.easing ](
//				percent, this.options.duration * percent, 0, 1, this.options.duration
//			);
//		} else {
//			this.pos = eased = percent;
//		}
//		this.now = ( this.end - this.start ) * eased + this.start;

//		if ( this.options.step ) {
//			this.options.step.call( this.elem, this.now, this );
//		}

//		if ( hooks && hooks.set ) {
//			hooks.set( this );
//		} else {
//			Tween.propHooks._default.set( this );
//		}
//		return this;
//	}
//};

//Tween.prototype.init.prototype = Tween.prototype;

//Tween.propHooks = {
//	_default: {
//		get: function( tween ) {
//			var result;

//			if ( tween.elem[ tween.prop ] != null &&
//				(!tween.elem.style || tween.elem.style[ tween.prop ] == null) ) {
//				return tween.elem[ tween.prop ];
//			}

//			// passing an empty string as a 3rd parameter to .css will automatically
//			// attempt a parseFloat and fallback to a string if the parse fails
//			// so, simple values such as "10px" are parsed to Float.
//			// complex values such as "rotate(1rad)" are returned as is.
//			result = jQuery.css( tween.elem, tween.prop, "" );
//			// Empty strings, null, undefined and "auto" are converted to 0.
//			return !result || result === "auto" ? 0 : result;
//		},
//		set: function( tween ) {
//			// use step hook for back compat - use cssHook if its there - use .style if its
//			// available and use plain properties where available
//			if ( jQuery.fx.step[ tween.prop ] ) {
//				jQuery.fx.step[ tween.prop ]( tween );
//			} else if ( tween.elem.style && ( tween.elem.style[ jQuery.cssProps[ tween.prop ] ] != null || jQuery.cssHooks[ tween.prop ] ) ) {
//				jQuery.style( tween.elem, tween.prop, tween.now + tween.unit );
//			} else {
//				tween.elem[ tween.prop ] = tween.now;
//			}
//		}
//	}
//};

//// Support: IE9
//// Panic based approach to setting things on disconnected nodes

//Tween.propHooks.scrollTop = Tween.propHooks.scrollLeft = {
//	set: function( tween ) {
//		if ( tween.elem.nodeType && tween.elem.parentNode ) {
//			tween.elem[ tween.prop ] = tween.now;
//		}
//	}
//};

//jQuery.easing = {
//	linear: function( p ) {
//		return p;
//	},
//	swing: function( p ) {
//		return 0.5 - Math.cos( p * Math.PI ) / 2;
//	}
//};

//jQuery.fx = Tween.prototype.init;

//// Back Compat <1.8 extension point
//jQuery.fx.step = {};




//var
//	fxNow, timerId,
//	rfxtypes = /^(?:toggle|show|hide)$/,
//	rfxnum = new RegExp( "^(?:([+-])=|)(" + pnum + ")([a-z%]*)$", "i" ),
//	rrun = /queueHooks$/,
//	animationPrefilters = [ defaultPrefilter ],
//	tweeners = {
//		"*": [ function( prop, value ) {
//			var tween = this.createTween( prop, value ),
//				target = tween.cur(),
//				parts = rfxnum.exec( value ),
//				unit = parts && parts[ 3 ] || ( jQuery.cssNumber[ prop ] ? "" : "px" ),

//				// Starting value computation is required for potential unit mismatches
//				start = ( jQuery.cssNumber[ prop ] || unit !== "px" && +target ) &&
//					rfxnum.exec( jQuery.css( tween.elem, prop ) ),
//				scale = 1,
//				maxIterations = 20;

//			if ( start && start[ 3 ] !== unit ) {
//				// Trust units reported by jQuery.css
//				unit = unit || start[ 3 ];

//				// Make sure we update the tween properties later on
//				parts = parts || [];

//				// Iteratively approximate from a nonzero starting point
//				start = +target || 1;

//				do {
//					// If previous iteration zeroed out, double until we get *something*
//					// Use a string for doubling factor so we don't accidentally see scale as unchanged below
//					scale = scale || ".5";

//					// Adjust and apply
//					start = start / scale;
//					jQuery.style( tween.elem, prop, start + unit );

//				// Update scale, tolerating zero or NaN from tween.cur()
//				// And breaking the loop if scale is unchanged or perfect, or if we've just had enough
//				} while ( scale !== (scale = tween.cur() / target) && scale !== 1 && --maxIterations );
//			}

//			// Update tween properties
//			if ( parts ) {
//				start = tween.start = +start || +target || 0;
//				tween.unit = unit;
//				// If a +=/-= token was provided, we're doing a relative animation
//				tween.end = parts[ 1 ] ?
//					start + ( parts[ 1 ] + 1 ) * parts[ 2 ] :
//					+parts[ 2 ];
//			}

//			return tween;
//		} ]
//	};

//// Animations created synchronously will run synchronously
//function createFxNow() {
//	setTimeout(function() {
//		fxNow = undefined;
//	});
//	return ( fxNow = jQuery.now() );
//}

//// Generate parameters to create a standard animation
//function genFx( type, includeWidth ) {
//	var which,
//		i = 0,
//		attrs = { height: type };

//	// if we include width, step value is 1 to do all cssExpand values,
//	// if we don't include width, step value is 2 to skip over Left and Right
//	includeWidth = includeWidth ? 1 : 0;
//	for ( ; i < 4 ; i += 2 - includeWidth ) {
//		which = cssExpand[ i ];
//		attrs[ "margin" + which ] = attrs[ "padding" + which ] = type;
//	}

//	if ( includeWidth ) {
//		attrs.opacity = attrs.width = type;
//	}

//	return attrs;
//}

//function createTween( value, prop, animation ) {
//	var tween,
//		collection = ( tweeners[ prop ] || [] ).concat( tweeners[ "*" ] ),
//		index = 0,
//		length = collection.length;
//	for ( ; index < length; index++ ) {
//		if ( (tween = collection[ index ].call( animation, prop, value )) ) {

//			// we're done with this property
//			return tween;
//		}
//	}
//}

//function defaultPrefilter( elem, props, opts ) {
//	/* jshint validthis: true */
//	var prop, value, toggle, tween, hooks, oldfire, display, checkDisplay,
//		anim = this,
//		orig = {},
//		style = elem.style,
//		hidden = elem.nodeType && isHidden( elem ),
//		dataShow = data_priv.get( elem, "fxshow" );

//	// handle queue: false promises
//	if ( !opts.queue ) {
//		hooks = jQuery._queueHooks( elem, "fx" );
//		if ( hooks.unqueued == null ) {
//			hooks.unqueued = 0;
//			oldfire = hooks.empty.fire;
//			hooks.empty.fire = function() {
//				if ( !hooks.unqueued ) {
//					oldfire();
//				}
//			};
//		}
//		hooks.unqueued++;

//		anim.always(function() {
//			// doing this makes sure that the complete handler will be called
//			// before this completes
//			anim.always(function() {
//				hooks.unqueued--;
//				if ( !jQuery.queue( elem, "fx" ).length ) {
//					hooks.empty.fire();
//				}
//			});
//		});
//	}

//	// height/width overflow pass
//	if ( elem.nodeType === 1 && ( "height" in props || "width" in props ) ) {
//		// Make sure that nothing sneaks out
//		// Record all 3 overflow attributes because IE9-10 do not
//		// change the overflow attribute when overflowX and
//		// overflowY are set to the same value
//		opts.overflow = [ style.overflow, style.overflowX, style.overflowY ];

//		// Set display property to inline-block for height/width
//		// animations on inline elements that are having width/height animated
//		display = jQuery.css( elem, "display" );

//		// Test default display if display is currently "none"
//		checkDisplay = display === "none" ?
//			data_priv.get( elem, "olddisplay" ) || defaultDisplay( elem.nodeName ) : display;

//		if ( checkDisplay === "inline" && jQuery.css( elem, "float" ) === "none" ) {
//			style.display = "inline-block";
//		}
//	}

//	if ( opts.overflow ) {
//		style.overflow = "hidden";
//		anim.always(function() {
//			style.overflow = opts.overflow[ 0 ];
//			style.overflowX = opts.overflow[ 1 ];
//			style.overflowY = opts.overflow[ 2 ];
//		});
//	}

//	// show/hide pass
//	for ( prop in props ) {
//		value = props[ prop ];
//		if ( rfxtypes.exec( value ) ) {
//			delete props[ prop ];
//			toggle = toggle || value === "toggle";
//			if ( value === ( hidden ? "hide" : "show" ) ) {

//				// If there is dataShow left over from a stopped hide or show and we are going to proceed with show, we should pretend to be hidden
//				if ( value === "show" && dataShow && dataShow[ prop ] !== undefined ) {
//					hidden = true;
//				} else {
//					continue;
//				}
//			}
//			orig[ prop ] = dataShow && dataShow[ prop ] || jQuery.style( elem, prop );

//		// Any non-fx value stops us from restoring the original display value
//		} else {
//			display = undefined;
//		}
//	}

//	if ( !jQuery.isEmptyObject( orig ) ) {
//		if ( dataShow ) {
//			if ( "hidden" in dataShow ) {
//				hidden = dataShow.hidden;
//			}
//		} else {
//			dataShow = data_priv.access( elem, "fxshow", {} );
//		}

//		// store state if its toggle - enables .stop().toggle() to "reverse"
//		if ( toggle ) {
//			dataShow.hidden = !hidden;
//		}
//		if ( hidden ) {
//			jQuery( elem ).show();
//		} else {
//			anim.done(function() {
//				jQuery( elem ).hide();
//			});
//		}
//		anim.done(function() {
//			var prop;

//			data_priv.remove( elem, "fxshow" );
//			for ( prop in orig ) {
//				jQuery.style( elem, prop, orig[ prop ] );
//			}
//		});
//		for ( prop in orig ) {
//			tween = createTween( hidden ? dataShow[ prop ] : 0, prop, anim );

//			if ( !( prop in dataShow ) ) {
//				dataShow[ prop ] = tween.start;
//				if ( hidden ) {
//					tween.end = tween.start;
//					tween.start = prop === "width" || prop === "height" ? 1 : 0;
//				}
//			}
//		}

//	// If this is a noop like .hide().hide(), restore an overwritten display value
//	} else if ( (display === "none" ? defaultDisplay( elem.nodeName ) : display) === "inline" ) {
//		style.display = display;
//	}
//}

//function propFilter( props, specialEasing ) {
//	var index, name, easing, value, hooks;

//	// camelCase, specialEasing and expand cssHook pass
//	for ( index in props ) {
//		name = jQuery.camelCase( index );
//		easing = specialEasing[ name ];
//		value = props[ index ];
//		if ( jQuery.isArray( value ) ) {
//			easing = value[ 1 ];
//			value = props[ index ] = value[ 0 ];
//		}

//		if ( index !== name ) {
//			props[ name ] = value;
//			delete props[ index ];
//		}

//		hooks = jQuery.cssHooks[ name ];
//		if ( hooks && "expand" in hooks ) {
//			value = hooks.expand( value );
//			delete props[ name ];

//			// not quite $.extend, this wont overwrite keys already present.
//			// also - reusing 'index' from above because we have the correct "name"
//			for ( index in value ) {
//				if ( !( index in props ) ) {
//					props[ index ] = value[ index ];
//					specialEasing[ index ] = easing;
//				}
//			}
//		} else {
//			specialEasing[ name ] = easing;
//		}
//	}
//}

//function Animation( elem, properties, options ) {
//	var result,
//		stopped,
//		index = 0,
//		length = animationPrefilters.length,
//		deferred = jQuery.Deferred().always( function() {
//			// don't match elem in the :animated selector
//			delete tick.elem;
//		}),
//		tick = function() {
//			if ( stopped ) {
//				return false;
//			}
//			var currentTime = fxNow || createFxNow(),
//				remaining = Math.max( 0, animation.startTime + animation.duration - currentTime ),
//				// archaic crash bug won't allow us to use 1 - ( 0.5 || 0 ) (#12497)
//				temp = remaining / animation.duration || 0,
//				percent = 1 - temp,
//				index = 0,
//				length = animation.tweens.length;

//			for ( ; index < length ; index++ ) {
//				animation.tweens[ index ].run( percent );
//			}

//			deferred.notifyWith( elem, [ animation, percent, remaining ]);

//			if ( percent < 1 && length ) {
//				return remaining;
//			} else {
//				deferred.resolveWith( elem, [ animation ] );
//				return false;
//			}
//		},
//		animation = deferred.promise({
//			elem: elem,
//			props: jQuery.extend( {}, properties ),
//			opts: jQuery.extend( true, { specialEasing: {} }, options ),
//			originalProperties: properties,
//			originalOptions: options,
//			startTime: fxNow || createFxNow(),
//			duration: options.duration,
//			tweens: [],
//			createTween: function( prop, end ) {
//				var tween = jQuery.Tween( elem, animation.opts, prop, end,
//						animation.opts.specialEasing[ prop ] || animation.opts.easing );
//				animation.tweens.push( tween );
//				return tween;
//			},
//			stop: function( gotoEnd ) {
//				var index = 0,
//					// if we are going to the end, we want to run all the tweens
//					// otherwise we skip this part
//					length = gotoEnd ? animation.tweens.length : 0;
//				if ( stopped ) {
//					return this;
//				}
//				stopped = true;
//				for ( ; index < length ; index++ ) {
//					animation.tweens[ index ].run( 1 );
//				}

//				// resolve when we played the last frame
//				// otherwise, reject
//				if ( gotoEnd ) {
//					deferred.resolveWith( elem, [ animation, gotoEnd ] );
//				} else {
//					deferred.rejectWith( elem, [ animation, gotoEnd ] );
//				}
//				return this;
//			}
//		}),
//		props = animation.props;

//	propFilter( props, animation.opts.specialEasing );

//	for ( ; index < length ; index++ ) {
//		result = animationPrefilters[ index ].call( animation, elem, props, animation.opts );
//		if ( result ) {
//			return result;
//		}
//	}

//	jQuery.map( props, createTween, animation );

//	if ( jQuery.isFunction( animation.opts.start ) ) {
//		animation.opts.start.call( elem, animation );
//	}

//	jQuery.fx.timer(
//		jQuery.extend( tick, {
//			elem: elem,
//			anim: animation,
//			queue: animation.opts.queue
//		})
//	);

//	// attach callbacks from options
//	return animation.progress( animation.opts.progress )
//		.done( animation.opts.done, animation.opts.complete )
//		.fail( animation.opts.fail )
//		.always( animation.opts.always );
//}

//jQuery.Animation = jQuery.extend( Animation, {

//	tweener: function( props, callback ) {
//		if ( jQuery.isFunction( props ) ) {
//			callback = props;
//			props = [ "*" ];
//		} else {
//			props = props.split(" ");
//		}

//		var prop,
//			index = 0,
//			length = props.length;

//		for ( ; index < length ; index++ ) {
//			prop = props[ index ];
//			tweeners[ prop ] = tweeners[ prop ] || [];
//			tweeners[ prop ].unshift( callback );
//		}
//	},

//	prefilter: function( callback, prepend ) {
//		if ( prepend ) {
//			animationPrefilters.unshift( callback );
//		} else {
//			animationPrefilters.push( callback );
//		}
//	}
//});

//jQuery.speed = function( speed, easing, fn ) {
//	var opt = speed && typeof speed === "object" ? jQuery.extend( {}, speed ) : {
//		complete: fn || !fn && easing ||
//			jQuery.isFunction( speed ) && speed,
//		duration: speed,
//		easing: fn && easing || easing && !jQuery.isFunction( easing ) && easing
//	};

//	opt.duration = jQuery.fx.off ? 0 : typeof opt.duration === "number" ? opt.duration :
//		opt.duration in jQuery.fx.speeds ? jQuery.fx.speeds[ opt.duration ] : jQuery.fx.speeds._default;

//	// normalize opt.queue - true/undefined/null -> "fx"
//	if ( opt.queue == null || opt.queue === true ) {
//		opt.queue = "fx";
//	}

//	// Queueing
//	opt.old = opt.complete;

//	opt.complete = function() {
//		if ( jQuery.isFunction( opt.old ) ) {
//			opt.old.call( this );
//		}

//		if ( opt.queue ) {
//			jQuery.dequeue( this, opt.queue );
//		}
//	};

//	return opt;
//};

//jQuery.fn.extend({
//	fadeTo: function( speed, to, easing, callback ) {

//		// show any hidden elements after setting opacity to 0
//		return this.filter( isHidden ).css( "opacity", 0 ).show()

//			// animate to the value specified
//			.end().animate({ opacity: to }, speed, easing, callback );
//	},
//	animate: function( prop, speed, easing, callback ) {
//		var empty = jQuery.isEmptyObject( prop ),
//			optall = jQuery.speed( speed, easing, callback ),
//			doAnimation = function() {
//				// Operate on a copy of prop so per-property easing won't be lost
//				var anim = Animation( this, jQuery.extend( {}, prop ), optall );

//				// Empty animations, or finishing resolves immediately
//				if ( empty || data_priv.get( this, "finish" ) ) {
//					anim.stop( true );
//				}
//			};
//			doAnimation.finish = doAnimation;

//		return empty || optall.queue === false ?
//			this.each( doAnimation ) :
//			this.queue( optall.queue, doAnimation );
//	},
//	stop: function( type, clearQueue, gotoEnd ) {
//		var stopQueue = function( hooks ) {
//			var stop = hooks.stop;
//			delete hooks.stop;
//			stop( gotoEnd );
//		};

//		if ( typeof type !== "string" ) {
//			gotoEnd = clearQueue;
//			clearQueue = type;
//			type = undefined;
//		}
//		if ( clearQueue && type !== false ) {
//			this.queue( type || "fx", [] );
//		}

//		return this.each(function() {
//			var dequeue = true,
//				index = type != null && type + "queueHooks",
//				timers = jQuery.timers,
//				data = data_priv.get( this );

//			if ( index ) {
//				if ( data[ index ] && data[ index ].stop ) {
//					stopQueue( data[ index ] );
//				}
//			} else {
//				for ( index in data ) {
//					if ( data[ index ] && data[ index ].stop && rrun.test( index ) ) {
//						stopQueue( data[ index ] );
//					}
//				}
//			}

//			for ( index = timers.length; index--; ) {
//				if ( timers[ index ].elem === this && (type == null || timers[ index ].queue === type) ) {
//					timers[ index ].anim.stop( gotoEnd );
//					dequeue = false;
//					timers.splice( index, 1 );
//				}
//			}

//			// start the next in the queue if the last step wasn't forced
//			// timers currently will call their complete callbacks, which will dequeue
//			// but only if they were gotoEnd
//			if ( dequeue || !gotoEnd ) {
//				jQuery.dequeue( this, type );
//			}
//		});
//	},
//	finish: function( type ) {
//		if ( type !== false ) {
//			type = type || "fx";
//		}
//		return this.each(function() {
//			var index,
//				data = data_priv.get( this ),
//				queue = data[ type + "queue" ],
//				hooks = data[ type + "queueHooks" ],
//				timers = jQuery.timers,
//				length = queue ? queue.length : 0;

//			// enable finishing flag on private data
//			data.finish = true;

//			// empty the queue first
//			jQuery.queue( this, type, [] );

//			if ( hooks && hooks.stop ) {
//				hooks.stop.call( this, true );
//			}

//			// look for any active animations, and finish them
//			for ( index = timers.length; index--; ) {
//				if ( timers[ index ].elem === this && timers[ index ].queue === type ) {
//					timers[ index ].anim.stop( true );
//					timers.splice( index, 1 );
//				}
//			}

//			// look for any animations in the old queue and finish them
//			for ( index = 0; index < length; index++ ) {
//				if ( queue[ index ] && queue[ index ].finish ) {
//					queue[ index ].finish.call( this );
//				}
//			}

//			// turn off finishing flag
//			delete data.finish;
//		});
//	}
//});

//jQuery.each([ "toggle", "show", "hide" ], function( i, name ) {
//	var cssFn = jQuery.fn[ name ];
//	jQuery.fn[ name ] = function( speed, easing, callback ) {
//		return speed == null || typeof speed === "boolean" ?
//			cssFn.apply( this, arguments ) :
//			this.animate( genFx( name, true ), speed, easing, callback );
//	};
//});

//// Generate shortcuts for custom animations
//jQuery.each({
//	slideDown: genFx("show"),
//	slideUp: genFx("hide"),
//	slideToggle: genFx("toggle"),
//	fadeIn: { opacity: "show" },
//	fadeOut: { opacity: "hide" },
//	fadeToggle: { opacity: "toggle" }
//}, function( name, props ) {
//	jQuery.fn[ name ] = function( speed, easing, callback ) {
//		return this.animate( props, speed, easing, callback );
//	};
//});

//jQuery.timers = [];
//jQuery.fx.tick = function() {
//	var timer,
//		i = 0,
//		timers = jQuery.timers;

//	fxNow = jQuery.now();

//	for ( ; i < timers.length; i++ ) {
//		timer = timers[ i ];
//		// Checks the timer has not already been removed
//		if ( !timer() && timers[ i ] === timer ) {
//			timers.splice( i--, 1 );
//		}
//	}

//	if ( !timers.length ) {
//		jQuery.fx.stop();
//	}
//	fxNow = undefined;
//};

//jQuery.fx.timer = function( timer ) {
//	jQuery.timers.push( timer );
//	if ( timer() ) {
//		jQuery.fx.start();
//	} else {
//		jQuery.timers.pop();
//	}
//};

//jQuery.fx.interval = 13;

//jQuery.fx.start = function() {
//	if ( !timerId ) {
//		timerId = setInterval( jQuery.fx.tick, jQuery.fx.interval );
//	}
//};

//jQuery.fx.stop = function() {
//	clearInterval( timerId );
//	timerId = null;
//};

//jQuery.fx.speeds = {
//	slow: 600,
//	fast: 200,
//	// Default speed
//	_default: 400
//};


//// Based off of the plugin by Clint Helfers, with permission.
//// http://blindsignals.com/index.php/2009/07/jquery-delay/
//jQuery.fn.delay = function( time, type ) {
//	time = jQuery.fx ? jQuery.fx.speeds[ time ] || time : time;
//	type = type || "fx";

//	return this.queue( type, function( next, hooks ) {
//		var timeout = setTimeout( next, time );
//		hooks.stop = function() {
//			clearTimeout( timeout );
//		};
//	});
//};


//(function() {
//	var input = document.createElement( "input" ),
//		select = document.createElement( "select" ),
//		opt = select.appendChild( document.createElement( "option" ) );

//	input.type = "checkbox";

//	// Support: iOS 5.1, Android 4.x, Android 2.3
//	// Check the default checkbox/radio value ("" on old WebKit; "on" elsewhere)
//	support.checkOn = input.value !== "";

//	// Must access the parent to make an option select properly
//	// Support: IE9, IE10
//	support.optSelected = opt.selected;

//	// Make sure that the options inside disabled selects aren't marked as disabled
//	// (WebKit marks them as disabled)
//	select.disabled = true;
//	support.optDisabled = !opt.disabled;

//	// Check if an input maintains its value after becoming a radio
//	// Support: IE9, IE10
//	input = document.createElement( "input" );
//	input.value = "t";
//	input.type = "radio";
//	support.radioValue = input.value === "t";
//})();


//var nodeHook, boolHook,
//	attrHandle = jQuery.expr.attrHandle;

//jQuery.fn.extend({
//	attr: function( name, value ) {
//		return access( this, jQuery.attr, name, value, arguments.length > 1 );
//	},

//	removeAttr: function( name ) {
//		return this.each(function() {
//			jQuery.removeAttr( this, name );
//		});
//	}
//});

//jQuery.extend({
//	attr: function( elem, name, value ) {
//		var hooks, ret,
//			nType = elem.nodeType;

//		// don't get/set attributes on text, comment and attribute nodes
//		if ( !elem || nType === 3 || nType === 8 || nType === 2 ) {
//			return;
//		}

//		// Fallback to prop when attributes are not supported
//		if ( typeof elem.getAttribute === strundefined ) {
//			return jQuery.prop( elem, name, value );
//		}

//		// All attributes are lowercase
//		// Grab necessary hook if one is defined
//		if ( nType !== 1 || !jQuery.isXMLDoc( elem ) ) {
//			name = name.toLowerCase();
//			hooks = jQuery.attrHooks[ name ] ||
//				( jQuery.expr.match.bool.test( name ) ? boolHook : nodeHook );
//		}

//		if ( value !== undefined ) {

//			if ( value === null ) {
//				jQuery.removeAttr( elem, name );

//			} else if ( hooks && "set" in hooks && (ret = hooks.set( elem, value, name )) !== undefined ) {
//				return ret;

//			} else {
//				elem.setAttribute( name, value + "" );
//				return value;
//			}

//		} else if ( hooks && "get" in hooks && (ret = hooks.get( elem, name )) !== null ) {
//			return ret;

//		} else {
//			ret = jQuery.find.attr( elem, name );

//			// Non-existent attributes return null, we normalize to undefined
//			return ret == null ?
//				undefined :
//				ret;
//		}
//	},

//	removeAttr: function( elem, value ) {
//		var name, propName,
//			i = 0,
//			attrNames = value && value.match( rnotwhite );

//		if ( attrNames && elem.nodeType === 1 ) {
//			while ( (name = attrNames[i++]) ) {
//				propName = jQuery.propFix[ name ] || name;

//				// Boolean attributes get special treatment (#10870)
//				if ( jQuery.expr.match.bool.test( name ) ) {
//					// Set corresponding property to false
//					elem[ propName ] = false;
//				}

//				elem.removeAttribute( name );
//			}
//		}
//	},

//	attrHooks: {
//		type: {
//			set: function( elem, value ) {
//				if ( !support.radioValue && value === "radio" &&
//					jQuery.nodeName( elem, "input" ) ) {
//					// Setting the type on a radio button after the value resets the value in IE6-9
//					// Reset value to default in case type is set after value during creation
//					var val = elem.value;
//					elem.setAttribute( "type", value );
//					if ( val ) {
//						elem.value = val;
//					}
//					return value;
//				}
//			}
//		}
//	}
//});

//// Hooks for boolean attributes
//boolHook = {
//	set: function( elem, value, name ) {
//		if ( value === false ) {
//			// Remove boolean attributes when set to false
//			jQuery.removeAttr( elem, name );
//		} else {
//			elem.setAttribute( name, name );
//		}
//		return name;
//	}
//};
//jQuery.each( jQuery.expr.match.bool.source.match( /\w+/g ), function( i, name ) {
//	var getter = attrHandle[ name ] || jQuery.find.attr;

//	attrHandle[ name ] = function( elem, name, isXML ) {
//		var ret, handle;
//		if ( !isXML ) {
//			// Avoid an infinite loop by temporarily removing this function from the getter
//			handle = attrHandle[ name ];
//			attrHandle[ name ] = ret;
//			ret = getter( elem, name, isXML ) != null ?
//				name.toLowerCase() :
//				null;
//			attrHandle[ name ] = handle;
//		}
//		return ret;
//	};
//});




//var rfocusable = /^(?:input|select|textarea|button)$/i;

//jQuery.fn.extend({
//	prop: function( name, value ) {
//		return access( this, jQuery.prop, name, value, arguments.length > 1 );
//	},

//	removeProp: function( name ) {
//		return this.each(function() {
//			delete this[ jQuery.propFix[ name ] || name ];
//		});
//	}
//});

//jQuery.extend({
//	propFix: {
//		"for": "htmlFor",
//		"class": "className"
//	},

//	prop: function( elem, name, value ) {
//		var ret, hooks, notxml,
//			nType = elem.nodeType;

//		// don't get/set properties on text, comment and attribute nodes
//		if ( !elem || nType === 3 || nType === 8 || nType === 2 ) {
//			return;
//		}

//		notxml = nType !== 1 || !jQuery.isXMLDoc( elem );

//		if ( notxml ) {
//			// Fix name and attach hooks
//			name = jQuery.propFix[ name ] || name;
//			hooks = jQuery.propHooks[ name ];
//		}

//		if ( value !== undefined ) {
//			return hooks && "set" in hooks && (ret = hooks.set( elem, value, name )) !== undefined ?
//				ret :
//				( elem[ name ] = value );

//		} else {
//			return hooks && "get" in hooks && (ret = hooks.get( elem, name )) !== null ?
//				ret :
//				elem[ name ];
//		}
//	},

//	propHooks: {
//		tabIndex: {
//			get: function( elem ) {
//				return elem.hasAttribute( "tabindex" ) || rfocusable.test( elem.nodeName ) || elem.href ?
//					elem.tabIndex :
//					-1;
//			}
//		}
//	}
//});

//// Support: IE9+
//// Selectedness for an option in an optgroup can be inaccurate
//if ( !support.optSelected ) {
//	jQuery.propHooks.selected = {
//		get: function( elem ) {
//			var parent = elem.parentNode;
//			if ( parent && parent.parentNode ) {
//				parent.parentNode.selectedIndex;
//			}
//			return null;
//		}
//	};
//}

//jQuery.each([
//	"tabIndex",
//	"readOnly",
//	"maxLength",
//	"cellSpacing",
//	"cellPadding",
//	"rowSpan",
//	"colSpan",
//	"useMap",
//	"frameBorder",
//	"contentEditable"
//], function() {
//	jQuery.propFix[ this.toLowerCase() ] = this;
//});




//var rclass = /[\t\r\n\f]/g;

//jQuery.fn.extend({
//	addClass: function( value ) {
//		var classes, elem, cur, clazz, j, finalValue,
//			proceed = typeof value === "string" && value,
//			i = 0,
//			len = this.length;

//		if ( jQuery.isFunction( value ) ) {
//			return this.each(function( j ) {
//				jQuery( this ).addClass( value.call( this, j, this.className ) );
//			});
//		}

//		if ( proceed ) {
//			// The disjunction here is for better compressibility (see removeClass)
//			classes = ( value || "" ).match( rnotwhite ) || [];

//			for ( ; i < len; i++ ) {
//				elem = this[ i ];
//				cur = elem.nodeType === 1 && ( elem.className ?
//					( " " + elem.className + " " ).replace( rclass, " " ) :
//					" "
//				);

//				if ( cur ) {
//					j = 0;
//					while ( (clazz = classes[j++]) ) {
//						if ( cur.indexOf( " " + clazz + " " ) < 0 ) {
//							cur += clazz + " ";
//						}
//					}

//					// only assign if different to avoid unneeded rendering.
//					finalValue = jQuery.trim( cur );
//					if ( elem.className !== finalValue ) {
//						elem.className = finalValue;
//					}
//				}
//			}
//		}

//		return this;
//	},

//	removeClass: function( value ) {
//		var classes, elem, cur, clazz, j, finalValue,
//			proceed = arguments.length === 0 || typeof value === "string" && value,
//			i = 0,
//			len = this.length;

//		if ( jQuery.isFunction( value ) ) {
//			return this.each(function( j ) {
//				jQuery( this ).removeClass( value.call( this, j, this.className ) );
//			});
//		}
//		if ( proceed ) {
//			classes = ( value || "" ).match( rnotwhite ) || [];

//			for ( ; i < len; i++ ) {
//				elem = this[ i ];
//				// This expression is here for better compressibility (see addClass)
//				cur = elem.nodeType === 1 && ( elem.className ?
//					( " " + elem.className + " " ).replace( rclass, " " ) :
//					""
//				);

//				if ( cur ) {
//					j = 0;
//					while ( (clazz = classes[j++]) ) {
//						// Remove *all* instances
//						while ( cur.indexOf( " " + clazz + " " ) >= 0 ) {
//							cur = cur.replace( " " + clazz + " ", " " );
//						}
//					}

//					// only assign if different to avoid unneeded rendering.
//					finalValue = value ? jQuery.trim( cur ) : "";
//					if ( elem.className !== finalValue ) {
//						elem.className = finalValue;
//					}
//				}
//			}
//		}

//		return this;
//	},

//	toggleClass: function( value, stateVal ) {
//		var type = typeof value;

//		if ( typeof stateVal === "boolean" && type === "string" ) {
//			return stateVal ? this.addClass( value ) : this.removeClass( value );
//		}

//		if ( jQuery.isFunction( value ) ) {
//			return this.each(function( i ) {
//				jQuery( this ).toggleClass( value.call(this, i, this.className, stateVal), stateVal );
//			});
//		}

//		return this.each(function() {
//			if ( type === "string" ) {
//				// toggle individual class names
//				var className,
//					i = 0,
//					self = jQuery( this ),
//					classNames = value.match( rnotwhite ) || [];

//				while ( (className = classNames[ i++ ]) ) {
//					// check each className given, space separated list
//					if ( self.hasClass( className ) ) {
//						self.removeClass( className );
//					} else {
//						self.addClass( className );
//					}
//				}

//			// Toggle whole class name
//			} else if ( type === strundefined || type === "boolean" ) {
//				if ( this.className ) {
//					// store className if set
//					data_priv.set( this, "__className__", this.className );
//				}

//				// If the element has a class name or if we're passed "false",
//				// then remove the whole classname (if there was one, the above saved it).
//				// Otherwise bring back whatever was previously saved (if anything),
//				// falling back to the empty string if nothing was stored.
//				this.className = this.className || value === false ? "" : data_priv.get( this, "__className__" ) || "";
//			}
//		});
//	},

//	hasClass: function( selector ) {
//		var className = " " + selector + " ",
//			i = 0,
//			l = this.length;
//		for ( ; i < l; i++ ) {
//			if ( this[i].nodeType === 1 && (" " + this[i].className + " ").replace(rclass, " ").indexOf( className ) >= 0 ) {
//				return true;
//			}
//		}

//		return false;
//	}
//});




//var rreturn = /\r/g;

//jQuery.fn.extend({
//	val: function( value ) {
//		var hooks, ret, isFunction,
//			elem = this[0];

//		if ( !arguments.length ) {
//			if ( elem ) {
//				hooks = jQuery.valHooks[ elem.type ] || jQuery.valHooks[ elem.nodeName.toLowerCase() ];

//				if ( hooks && "get" in hooks && (ret = hooks.get( elem, "value" )) !== undefined ) {
//					return ret;
//				}

//				ret = elem.value;

//				return typeof ret === "string" ?
//					// handle most common string cases
//					ret.replace(rreturn, "") :
//					// handle cases where value is null/undef or number
//					ret == null ? "" : ret;
//			}

//			return;
//		}

//		isFunction = jQuery.isFunction( value );

//		return this.each(function( i ) {
//			var val;

//			if ( this.nodeType !== 1 ) {
//				return;
//			}

//			if ( isFunction ) {
//				val = value.call( this, i, jQuery( this ).val() );
//			} else {
//				val = value;
//			}

//			// Treat null/undefined as ""; convert numbers to string
//			if ( val == null ) {
//				val = "";

//			} else if ( typeof val === "number" ) {
//				val += "";

//			} else if ( jQuery.isArray( val ) ) {
//				val = jQuery.map( val, function( value ) {
//					return value == null ? "" : value + "";
//				});
//			}

//			hooks = jQuery.valHooks[ this.type ] || jQuery.valHooks[ this.nodeName.toLowerCase() ];

//			// If set returns undefined, fall back to normal setting
//			if ( !hooks || !("set" in hooks) || hooks.set( this, val, "value" ) === undefined ) {
//				this.value = val;
//			}
//		});
//	}
//});

//jQuery.extend({
//	valHooks: {
//		option: {
//			get: function( elem ) {
//				var val = jQuery.find.attr( elem, "value" );
//				return val != null ?
//					val :
//					// Support: IE10-11+
//					// option.text throws exceptions (#14686, #14858)
//					jQuery.trim( jQuery.text( elem ) );
//			}
//		},
//		select: {
//			get: function( elem ) {
//				var value, option,
//					options = elem.options,
//					index = elem.selectedIndex,
//					one = elem.type === "select-one" || index < 0,
//					values = one ? null : [],
//					max = one ? index + 1 : options.length,
//					i = index < 0 ?
//						max :
//						one ? index : 0;

//				// Loop through all the selected options
//				for ( ; i < max; i++ ) {
//					option = options[ i ];

//					// IE6-9 doesn't update selected after form reset (#2551)
//					if ( ( option.selected || i === index ) &&
//							// Don't return options that are disabled or in a disabled optgroup
//							( support.optDisabled ? !option.disabled : option.getAttribute( "disabled" ) === null ) &&
//							( !option.parentNode.disabled || !jQuery.nodeName( option.parentNode, "optgroup" ) ) ) {

//						// Get the specific value for the option
//						value = jQuery( option ).val();

//						// We don't need an array for one selects
//						if ( one ) {
//							return value;
//						}

//						// Multi-Selects return an array
//						values.push( value );
//					}
//				}

//				return values;
//			},

//			set: function( elem, value ) {
//				var optionSet, option,
//					options = elem.options,
//					values = jQuery.makeArray( value ),
//					i = options.length;

//				while ( i-- ) {
//					option = options[ i ];
//					if ( (option.selected = jQuery.inArray( option.value, values ) >= 0) ) {
//						optionSet = true;
//					}
//				}

//				// force browsers to behave consistently when non-matching value is set
//				if ( !optionSet ) {
//					elem.selectedIndex = -1;
//				}
//				return values;
//			}
//		}
//	}
//});

//// Radios and checkboxes getter/setter
//jQuery.each([ "radio", "checkbox" ], function() {
//	jQuery.valHooks[ this ] = {
//		set: function( elem, value ) {
//			if ( jQuery.isArray( value ) ) {
//				return ( elem.checked = jQuery.inArray( jQuery(elem).val(), value ) >= 0 );
//			}
//		}
//	};
//	if ( !support.checkOn ) {
//		jQuery.valHooks[ this ].get = function( elem ) {
//			// Support: Webkit
//			// "" is returned instead of "on" if a value isn't specified
//			return elem.getAttribute("value") === null ? "on" : elem.value;
//		};
//	}
//});




//// Return jQuery for attributes-only inclusion


//jQuery.each( ("blur focus focusin focusout load resize scroll unload click dblclick " +
//	"mousedown mouseup mousemove mouseover mouseout mouseenter mouseleave " +
//	"change select submit keydown keypress keyup error contextmenu").split(" "), function( i, name ) {

//	// Handle event binding
//	jQuery.fn[ name ] = function( data, fn ) {
//		return arguments.length > 0 ?
//			this.on( name, null, data, fn ) :
//			this.trigger( name );
//	};
//});

//jQuery.fn.extend({
//	hover: function( fnOver, fnOut ) {
//		return this.mouseenter( fnOver ).mouseleave( fnOut || fnOver );
//	},

//	bind: function( types, data, fn ) {
//		return this.on( types, null, data, fn );
//	},
//	unbind: function( types, fn ) {
//		return this.off( types, null, fn );
//	},

//	delegate: function( selector, types, data, fn ) {
//		return this.on( types, selector, data, fn );
//	},
//	undelegate: function( selector, types, fn ) {
//		// ( namespace ) or ( selector, types [, fn] )
//		return arguments.length === 1 ? this.off( selector, "**" ) : this.off( types, selector || "**", fn );
//	}
//});


//var nonce = jQuery.now();

//var rquery = (/\?/);



//// Support: Android 2.3
//// Workaround failure to string-cast null input
//jQuery.parseJSON = function( data ) {
//	return JSON.parse( data + "" );
//};


//// Cross-browser xml parsing
//jQuery.parseXML = function( data ) {
//	var xml, tmp;
//	if ( !data || typeof data !== "string" ) {
//		return null;
//	}

//	// Support: IE9
//	try {
//		tmp = new DOMParser();
//		xml = tmp.parseFromString( data, "text/xml" );
//	} catch ( e ) {
//		xml = undefined;
//	}

//	if ( !xml || xml.getElementsByTagName( "parsererror" ).length ) {
//		jQuery.error( "Invalid XML: " + data );
//	}
//	return xml;
//};


//var
//	// Document location
//	ajaxLocParts,
//	ajaxLocation,

//	rhash = /#.*$/,
//	rts = /([?&])_=[^&]*/,
//	rheaders = /^(.*?):[ \t]*([^\r\n]*)$/mg,
//	// #7653, #8125, #8152: local protocol detection
//	rlocalProtocol = /^(?:about|app|app-storage|.+-extension|file|res|widget):$/,
//	rnoContent = /^(?:GET|HEAD)$/,
//	rprotocol = /^\/\//,
//	rurl = /^([\w.+-]+:)(?:\/\/(?:[^\/?#]*@|)([^\/?#:]*)(?::(\d+)|)|)/,

//	/* Prefilters
//	 * 1) They are useful to introduce custom dataTypes (see ajax/jsonp.js for an example)
//	 * 2) These are called:
//	 *    - BEFORE asking for a transport
//	 *    - AFTER param serialization (s.data is a string if s.processData is true)
//	 * 3) key is the dataType
//	 * 4) the catchall symbol "*" can be used
//	 * 5) execution will start with transport dataType and THEN continue down to "*" if needed
//	 */
//	prefilters = {},

//	/* Transports bindings
//	 * 1) key is the dataType
//	 * 2) the catchall symbol "*" can be used
//	 * 3) selection will start with transport dataType and THEN go to "*" if needed
//	 */
//	transports = {},

//	// Avoid comment-prolog char sequence (#10098); must appease lint and evade compression
//	allTypes = "*/".concat("*");

//// #8138, IE may throw an exception when accessing
//// a field from window.location if document.domain has been set
//try {
//	ajaxLocation = location.href;
//} catch( e ) {
//	// Use the href attribute of an A element
//	// since IE will modify it given document.location
//	ajaxLocation = document.createElement( "a" );
//	ajaxLocation.href = "";
//	ajaxLocation = ajaxLocation.href;
//}

//// Segment location into parts
//ajaxLocParts = rurl.exec( ajaxLocation.toLowerCase() ) || [];

//// Base "constructor" for jQuery.ajaxPrefilter and jQuery.ajaxTransport
//function addToPrefiltersOrTransports( structure ) {

//	// dataTypeExpression is optional and defaults to "*"
//	return function( dataTypeExpression, func ) {

//		if ( typeof dataTypeExpression !== "string" ) {
//			func = dataTypeExpression;
//			dataTypeExpression = "*";
//		}

//		var dataType,
//			i = 0,
//			dataTypes = dataTypeExpression.toLowerCase().match( rnotwhite ) || [];

//		if ( jQuery.isFunction( func ) ) {
//			// For each dataType in the dataTypeExpression
//			while ( (dataType = dataTypes[i++]) ) {
//				// Prepend if requested
//				if ( dataType[0] === "+" ) {
//					dataType = dataType.slice( 1 ) || "*";
//					(structure[ dataType ] = structure[ dataType ] || []).unshift( func );

//				// Otherwise append
//				} else {
//					(structure[ dataType ] = structure[ dataType ] || []).push( func );
//				}
//			}
//		}
//	};
//}

//// Base inspection function for prefilters and transports
//function inspectPrefiltersOrTransports( structure, options, originalOptions, jqXHR ) {

//	var inspected = {},
//		seekingTransport = ( structure === transports );

//	function inspect( dataType ) {
//		var selected;
//		inspected[ dataType ] = true;
//		jQuery.each( structure[ dataType ] || [], function( _, prefilterOrFactory ) {
//			var dataTypeOrTransport = prefilterOrFactory( options, originalOptions, jqXHR );
//			if ( typeof dataTypeOrTransport === "string" && !seekingTransport && !inspected[ dataTypeOrTransport ] ) {
//				options.dataTypes.unshift( dataTypeOrTransport );
//				inspect( dataTypeOrTransport );
//				return false;
//			} else if ( seekingTransport ) {
//				return !( selected = dataTypeOrTransport );
//			}
//		});
//		return selected;
//	}

//	return inspect( options.dataTypes[ 0 ] ) || !inspected[ "*" ] && inspect( "*" );
//}

//// A special extend for ajax options
//// that takes "flat" options (not to be deep extended)
//// Fixes #9887
//function ajaxExtend( target, src ) {
//	var key, deep,
//		flatOptions = jQuery.ajaxSettings.flatOptions || {};

//	for ( key in src ) {
//		if ( src[ key ] !== undefined ) {
//			( flatOptions[ key ] ? target : ( deep || (deep = {}) ) )[ key ] = src[ key ];
//		}
//	}
//	if ( deep ) {
//		jQuery.extend( true, target, deep );
//	}

//	return target;
//}

///* Handles responses to an ajax request:
// * - finds the right dataType (mediates between content-type and expected dataType)
// * - returns the corresponding response
// */
//function ajaxHandleResponses( s, jqXHR, responses ) {

//	var ct, type, finalDataType, firstDataType,
//		contents = s.contents,
//		dataTypes = s.dataTypes;

//	// Remove auto dataType and get content-type in the process
//	while ( dataTypes[ 0 ] === "*" ) {
//		dataTypes.shift();
//		if ( ct === undefined ) {
//			ct = s.mimeType || jqXHR.getResponseHeader("Content-Type");
//		}
//	}

//	// Check if we're dealing with a known content-type
//	if ( ct ) {
//		for ( type in contents ) {
//			if ( contents[ type ] && contents[ type ].test( ct ) ) {
//				dataTypes.unshift( type );
//				break;
//			}
//		}
//	}

//	// Check to see if we have a response for the expected dataType
//	if ( dataTypes[ 0 ] in responses ) {
//		finalDataType = dataTypes[ 0 ];
//	} else {
//		// Try convertible dataTypes
//		for ( type in responses ) {
//			if ( !dataTypes[ 0 ] || s.converters[ type + " " + dataTypes[0] ] ) {
//				finalDataType = type;
//				break;
//			}
//			if ( !firstDataType ) {
//				firstDataType = type;
//			}
//		}
//		// Or just use first one
//		finalDataType = finalDataType || firstDataType;
//	}

//	// If we found a dataType
//	// We add the dataType to the list if needed
//	// and return the corresponding response
//	if ( finalDataType ) {
//		if ( finalDataType !== dataTypes[ 0 ] ) {
//			dataTypes.unshift( finalDataType );
//		}
//		return responses[ finalDataType ];
//	}
//}

///* Chain conversions given the request and the original response
// * Also sets the responseXXX fields on the jqXHR instance
// */
//function ajaxConvert( s, response, jqXHR, isSuccess ) {
//	var conv2, current, conv, tmp, prev,
//		converters = {},
//		// Work with a copy of dataTypes in case we need to modify it for conversion
//		dataTypes = s.dataTypes.slice();

//	// Create converters map with lowercased keys
//	if ( dataTypes[ 1 ] ) {
//		for ( conv in s.converters ) {
//			converters[ conv.toLowerCase() ] = s.converters[ conv ];
//		}
//	}

//	current = dataTypes.shift();

//	// Convert to each sequential dataType
//	while ( current ) {

//		if ( s.responseFields[ current ] ) {
//			jqXHR[ s.responseFields[ current ] ] = response;
//		}

//		// Apply the dataFilter if provided
//		if ( !prev && isSuccess && s.dataFilter ) {
//			response = s.dataFilter( response, s.dataType );
//		}

//		prev = current;
//		current = dataTypes.shift();

//		if ( current ) {

//		// There's only work to do if current dataType is non-auto
//			if ( current === "*" ) {

//				current = prev;

//			// Convert response if prev dataType is non-auto and differs from current
//			} else if ( prev !== "*" && prev !== current ) {

//				// Seek a direct converter
//				conv = converters[ prev + " " + current ] || converters[ "* " + current ];

//				// If none found, seek a pair
//				if ( !conv ) {
//					for ( conv2 in converters ) {

//						// If conv2 outputs current
//						tmp = conv2.split( " " );
//						if ( tmp[ 1 ] === current ) {

//							// If prev can be converted to accepted input
//							conv = converters[ prev + " " + tmp[ 0 ] ] ||
//								converters[ "* " + tmp[ 0 ] ];
//							if ( conv ) {
//								// Condense equivalence converters
//								if ( conv === true ) {
//									conv = converters[ conv2 ];

//								// Otherwise, insert the intermediate dataType
//								} else if ( converters[ conv2 ] !== true ) {
//									current = tmp[ 0 ];
//									dataTypes.unshift( tmp[ 1 ] );
//								}
//								break;
//							}
//						}
//					}
//				}

//				// Apply converter (if not an equivalence)
//				if ( conv !== true ) {

//					// Unless errors are allowed to bubble, catch and return them
//					if ( conv && s[ "throws" ] ) {
//						response = conv( response );
//					} else {
//						try {
//							response = conv( response );
//						} catch ( e ) {
//							return { state: "parsererror", error: conv ? e : "No conversion from " + prev + " to " + current };
//						}
//					}
//				}
//			}
//		}
//	}

//	return { state: "success", data: response };
//}

//jQuery.extend({

//	// Counter for holding the number of active queries
//	active: 0,

//	// Last-Modified header cache for next request
//	lastModified: {},
//	etag: {},

//	ajaxSettings: {
//		url: ajaxLocation,
//		type: "GET",
//		isLocal: rlocalProtocol.test( ajaxLocParts[ 1 ] ),
//		global: true,
//		processData: true,
//		async: true,
//		contentType: "application/x-www-form-urlencoded; charset=UTF-8",
//		/*
//		timeout: 0,
//		data: null,
//		dataType: null,
//		username: null,
//		password: null,
//		cache: null,
//		throws: false,
//		traditional: false,
//		headers: {},
//		*/

//		accepts: {
//			"*": allTypes,
//			text: "text/plain",
//			html: "text/html",
//			xml: "application/xml, text/xml",
//			json: "application/json, text/javascript"
//		},

//		contents: {
//			xml: /xml/,
//			html: /html/,
//			json: /json/
//		},

//		responseFields: {
//			xml: "responseXML",
//			text: "responseText",
//			json: "responseJSON"
//		},

//		// Data converters
//		// Keys separate source (or catchall "*") and destination types with a single space
//		converters: {

//			// Convert anything to text
//			"* text": String,

//			// Text to html (true = no transformation)
//			"text html": true,

//			// Evaluate text as a json expression
//			"text json": jQuery.parseJSON,

//			// Parse text as xml
//			"text xml": jQuery.parseXML
//		},

//		// For options that shouldn't be deep extended:
//		// you can add your own custom options here if
//		// and when you create one that shouldn't be
//		// deep extended (see ajaxExtend)
//		flatOptions: {
//			url: true,
//			context: true
//		}
//	},

//	// Creates a full fledged settings object into target
//	// with both ajaxSettings and settings fields.
//	// If target is omitted, writes into ajaxSettings.
//	ajaxSetup: function( target, settings ) {
//		return settings ?

//			// Building a settings object
//			ajaxExtend( ajaxExtend( target, jQuery.ajaxSettings ), settings ) :

//			// Extending ajaxSettings
//			ajaxExtend( jQuery.ajaxSettings, target );
//	},

//	ajaxPrefilter: addToPrefiltersOrTransports( prefilters ),
//	ajaxTransport: addToPrefiltersOrTransports( transports ),

//	// Main method
//	ajax: function( url, options ) {

//		// If url is an object, simulate pre-1.5 signature
//		if ( typeof url === "object" ) {
//			options = url;
//			url = undefined;
//		}

//		// Force options to be an object
//		options = options || {};

//		var transport,
//			// URL without anti-cache param
//			cacheURL,
//			// Response headers
//			responseHeadersString,
//			responseHeaders,
//			// timeout handle
//			timeoutTimer,
//			// Cross-domain detection vars
//			parts,
//			// To know if global events are to be dispatched
//			fireGlobals,
//			// Loop variable
//			i,
//			// Create the final options object
//			s = jQuery.ajaxSetup( {}, options ),
//			// Callbacks context
//			callbackContext = s.context || s,
//			// Context for global events is callbackContext if it is a DOM node or jQuery collection
//			globalEventContext = s.context && ( callbackContext.nodeType || callbackContext.jquery ) ?
//				jQuery( callbackContext ) :
//				jQuery.event,
//			// Deferreds
//			deferred = jQuery.Deferred(),
//			completeDeferred = jQuery.Callbacks("once memory"),
//			// Status-dependent callbacks
//			statusCode = s.statusCode || {},
//			// Headers (they are sent all at once)
//			requestHeaders = {},
//			requestHeadersNames = {},
//			// The jqXHR state
//			state = 0,
//			// Default abort message
//			strAbort = "canceled",
//			// Fake xhr
//			jqXHR = {
//				readyState: 0,

//				// Builds headers hashtable if needed
//				getResponseHeader: function( key ) {
//					var match;
//					if ( state === 2 ) {
//						if ( !responseHeaders ) {
//							responseHeaders = {};
//							while ( (match = rheaders.exec( responseHeadersString )) ) {
//								responseHeaders[ match[1].toLowerCase() ] = match[ 2 ];
//							}
//						}
//						match = responseHeaders[ key.toLowerCase() ];
//					}
//					return match == null ? null : match;
//				},

//				// Raw string
//				getAllResponseHeaders: function() {
//					return state === 2 ? responseHeadersString : null;
//				},

//				// Caches the header
//				setRequestHeader: function( name, value ) {
//					var lname = name.toLowerCase();
//					if ( !state ) {
//						name = requestHeadersNames[ lname ] = requestHeadersNames[ lname ] || name;
//						requestHeaders[ name ] = value;
//					}
//					return this;
//				},

//				// Overrides response content-type header
//				overrideMimeType: function( type ) {
//					if ( !state ) {
//						s.mimeType = type;
//					}
//					return this;
//				},

//				// Status-dependent callbacks
//				statusCode: function( map ) {
//					var code;
//					if ( map ) {
//						if ( state < 2 ) {
//							for ( code in map ) {
//								// Lazy-add the new callback in a way that preserves old ones
//								statusCode[ code ] = [ statusCode[ code ], map[ code ] ];
//							}
//						} else {
//							// Execute the appropriate callbacks
//							jqXHR.always( map[ jqXHR.status ] );
//						}
//					}
//					return this;
//				},

//				// Cancel the request
//				abort: function( statusText ) {
//					var finalText = statusText || strAbort;
//					if ( transport ) {
//						transport.abort( finalText );
//					}
//					done( 0, finalText );
//					return this;
//				}
//			};

//		// Attach deferreds
//		deferred.promise( jqXHR ).complete = completeDeferred.add;
//		jqXHR.success = jqXHR.done;
//		jqXHR.error = jqXHR.fail;

//		// Remove hash character (#7531: and string promotion)
//		// Add protocol if not provided (prefilters might expect it)
//		// Handle falsy url in the settings object (#10093: consistency with old signature)
//		// We also use the url parameter if available
//		s.url = ( ( url || s.url || ajaxLocation ) + "" ).replace( rhash, "" )
//			.replace( rprotocol, ajaxLocParts[ 1 ] + "//" );

//		// Alias method option to type as per ticket #12004
//		s.type = options.method || options.type || s.method || s.type;

//		// Extract dataTypes list
//		s.dataTypes = jQuery.trim( s.dataType || "*" ).toLowerCase().match( rnotwhite ) || [ "" ];

//		// A cross-domain request is in order when we have a protocol:host:port mismatch
//		if ( s.crossDomain == null ) {
//			parts = rurl.exec( s.url.toLowerCase() );
//			s.crossDomain = !!( parts &&
//				( parts[ 1 ] !== ajaxLocParts[ 1 ] || parts[ 2 ] !== ajaxLocParts[ 2 ] ||
//					( parts[ 3 ] || ( parts[ 1 ] === "http:" ? "80" : "443" ) ) !==
//						( ajaxLocParts[ 3 ] || ( ajaxLocParts[ 1 ] === "http:" ? "80" : "443" ) ) )
//			);
//		}

//		// Convert data if not already a string
//		if ( s.data && s.processData && typeof s.data !== "string" ) {
//			s.data = jQuery.param( s.data, s.traditional );
//		}

//		// Apply prefilters
//		inspectPrefiltersOrTransports( prefilters, s, options, jqXHR );

//		// If request was aborted inside a prefilter, stop there
//		if ( state === 2 ) {
//			return jqXHR;
//		}

//		// We can fire global events as of now if asked to
//		fireGlobals = s.global;

//		// Watch for a new set of requests
//		if ( fireGlobals && jQuery.active++ === 0 ) {
//			jQuery.event.trigger("ajaxStart");
//		}

//		// Uppercase the type
//		s.type = s.type.toUpperCase();

//		// Determine if request has content
//		s.hasContent = !rnoContent.test( s.type );

//		// Save the URL in case we're toying with the If-Modified-Since
//		// and/or If-None-Match header later on
//		cacheURL = s.url;

//		// More options handling for requests with no content
//		if ( !s.hasContent ) {

//			// If data is available, append data to url
//			if ( s.data ) {
//				cacheURL = ( s.url += ( rquery.test( cacheURL ) ? "&" : "?" ) + s.data );
//				// #9682: remove data so that it's not used in an eventual retry
//				delete s.data;
//			}

//			// Add anti-cache in url if needed
//			if ( s.cache === false ) {
//				s.url = rts.test( cacheURL ) ?

//					// If there is already a '_' parameter, set its value
//					cacheURL.replace( rts, "$1_=" + nonce++ ) :

//					// Otherwise add one to the end
//					cacheURL + ( rquery.test( cacheURL ) ? "&" : "?" ) + "_=" + nonce++;
//			}
//		}

//		// Set the If-Modified-Since and/or If-None-Match header, if in ifModified mode.
//		if ( s.ifModified ) {
//			if ( jQuery.lastModified[ cacheURL ] ) {
//				jqXHR.setRequestHeader( "If-Modified-Since", jQuery.lastModified[ cacheURL ] );
//			}
//			if ( jQuery.etag[ cacheURL ] ) {
//				jqXHR.setRequestHeader( "If-None-Match", jQuery.etag[ cacheURL ] );
//			}
//		}

//		// Set the correct header, if data is being sent
//		if ( s.data && s.hasContent && s.contentType !== false || options.contentType ) {
//			jqXHR.setRequestHeader( "Content-Type", s.contentType );
//		}

//		// Set the Accepts header for the server, depending on the dataType
//		jqXHR.setRequestHeader(
//			"Accept",
//			s.dataTypes[ 0 ] && s.accepts[ s.dataTypes[0] ] ?
//				s.accepts[ s.dataTypes[0] ] + ( s.dataTypes[ 0 ] !== "*" ? ", " + allTypes + "; q=0.01" : "" ) :
//				s.accepts[ "*" ]
//		);

//		// Check for headers option
//		for ( i in s.headers ) {
//			jqXHR.setRequestHeader( i, s.headers[ i ] );
//		}

//		// Allow custom headers/mimetypes and early abort
//		if ( s.beforeSend && ( s.beforeSend.call( callbackContext, jqXHR, s ) === false || state === 2 ) ) {
//			// Abort if not done already and return
//			return jqXHR.abort();
//		}

//		// aborting is no longer a cancellation
//		strAbort = "abort";

//		// Install callbacks on deferreds
//		for ( i in { success: 1, error: 1, complete: 1 } ) {
//			jqXHR[ i ]( s[ i ] );
//		}

//		// Get transport
//		transport = inspectPrefiltersOrTransports( transports, s, options, jqXHR );

//		// If no transport, we auto-abort
//		if ( !transport ) {
//			done( -1, "No Transport" );
//		} else {
//			jqXHR.readyState = 1;

//			// Send global event
//			if ( fireGlobals ) {
//				globalEventContext.trigger( "ajaxSend", [ jqXHR, s ] );
//			}
//			// Timeout
//			if ( s.async && s.timeout > 0 ) {
//				timeoutTimer = setTimeout(function() {
//					jqXHR.abort("timeout");
//				}, s.timeout );
//			}

//			try {
//				state = 1;
//				transport.send( requestHeaders, done );
//			} catch ( e ) {
//				// Propagate exception as error if not done
//				if ( state < 2 ) {
//					done( -1, e );
//				// Simply rethrow otherwise
//				} else {
//					throw e;
//				}
//			}
//		}

//		// Callback for when everything is done
//		function done( status, nativeStatusText, responses, headers ) {
//			var isSuccess, success, error, response, modified,
//				statusText = nativeStatusText;

//			// Called once
//			if ( state === 2 ) {
//				return;
//			}

//			// State is "done" now
//			state = 2;

//			// Clear timeout if it exists
//			if ( timeoutTimer ) {
//				clearTimeout( timeoutTimer );
//			}

//			// Dereference transport for early garbage collection
//			// (no matter how long the jqXHR object will be used)
//			transport = undefined;

//			// Cache response headers
//			responseHeadersString = headers || "";

//			// Set readyState
//			jqXHR.readyState = status > 0 ? 4 : 0;

//			// Determine if successful
//			isSuccess = status >= 200 && status < 300 || status === 304;

//			// Get response data
//			if ( responses ) {
//				response = ajaxHandleResponses( s, jqXHR, responses );
//			}

//			// Convert no matter what (that way responseXXX fields are always set)
//			response = ajaxConvert( s, response, jqXHR, isSuccess );

//			// If successful, handle type chaining
//			if ( isSuccess ) {

//				// Set the If-Modified-Since and/or If-None-Match header, if in ifModified mode.
//				if ( s.ifModified ) {
//					modified = jqXHR.getResponseHeader("Last-Modified");
//					if ( modified ) {
//						jQuery.lastModified[ cacheURL ] = modified;
//					}
//					modified = jqXHR.getResponseHeader("etag");
//					if ( modified ) {
//						jQuery.etag[ cacheURL ] = modified;
//					}
//				}

//				// if no content
//				if ( status === 204 || s.type === "HEAD" ) {
//					statusText = "nocontent";

//				// if not modified
//				} else if ( status === 304 ) {
//					statusText = "notmodified";

//				// If we have data, let's convert it
//				} else {
//					statusText = response.state;
//					success = response.data;
//					error = response.error;
//					isSuccess = !error;
//				}
//			} else {
//				// We extract error from statusText
//				// then normalize statusText and status for non-aborts
//				error = statusText;
//				if ( status || !statusText ) {
//					statusText = "error";
//					if ( status < 0 ) {
//						status = 0;
//					}
//				}
//			}

//			// Set data for the fake xhr object
//			jqXHR.status = status;
//			jqXHR.statusText = ( nativeStatusText || statusText ) + "";

//			// Success/Error
//			if ( isSuccess ) {
//				deferred.resolveWith( callbackContext, [ success, statusText, jqXHR ] );
//			} else {
//				deferred.rejectWith( callbackContext, [ jqXHR, statusText, error ] );
//			}

//			// Status-dependent callbacks
//			jqXHR.statusCode( statusCode );
//			statusCode = undefined;

//			if ( fireGlobals ) {
//				globalEventContext.trigger( isSuccess ? "ajaxSuccess" : "ajaxError",
//					[ jqXHR, s, isSuccess ? success : error ] );
//			}

//			// Complete
//			completeDeferred.fireWith( callbackContext, [ jqXHR, statusText ] );

//			if ( fireGlobals ) {
//				globalEventContext.trigger( "ajaxComplete", [ jqXHR, s ] );
//				// Handle the global AJAX counter
//				if ( !( --jQuery.active ) ) {
//					jQuery.event.trigger("ajaxStop");
//				}
//			}
//		}

//		return jqXHR;
//	},

//	getJSON: function( url, data, callback ) {
//		return jQuery.get( url, data, callback, "json" );
//	},

//	getScript: function( url, callback ) {
//		return jQuery.get( url, undefined, callback, "script" );
//	}
//});

//jQuery.each( [ "get", "post" ], function( i, method ) {
//	jQuery[ method ] = function( url, data, callback, type ) {
//		// shift arguments if data argument was omitted
//		if ( jQuery.isFunction( data ) ) {
//			type = type || callback;
//			callback = data;
//			data = undefined;
//		}

//		return jQuery.ajax({
//			url: url,
//			type: method,
//			dataType: type,
//			data: data,
//			success: callback
//		});
//	};
//});

//// Attach a bunch of functions for handling common AJAX events
//jQuery.each( [ "ajaxStart", "ajaxStop", "ajaxComplete", "ajaxError", "ajaxSuccess", "ajaxSend" ], function( i, type ) {
//	jQuery.fn[ type ] = function( fn ) {
//		return this.on( type, fn );
//	};
//});


//jQuery._evalUrl = function( url ) {
//	return jQuery.ajax({
//		url: url,
//		type: "GET",
//		dataType: "script",
//		async: false,
//		global: false,
//		"throws": true
//	});
//};


//jQuery.fn.extend({
//	wrapAll: function( html ) {
//		var wrap;

//		if ( jQuery.isFunction( html ) ) {
//			return this.each(function( i ) {
//				jQuery( this ).wrapAll( html.call(this, i) );
//			});
//		}

//		if ( this[ 0 ] ) {

//			// The elements to wrap the target around
//			wrap = jQuery( html, this[ 0 ].ownerDocument ).eq( 0 ).clone( true );

//			if ( this[ 0 ].parentNode ) {
//				wrap.insertBefore( this[ 0 ] );
//			}

//			wrap.map(function() {
//				var elem = this;

//				while ( elem.firstElementChild ) {
//					elem = elem.firstElementChild;
//				}

//				return elem;
//			}).append( this );
//		}

//		return this;
//	},

//	wrapInner: function( html ) {
//		if ( jQuery.isFunction( html ) ) {
//			return this.each(function( i ) {
//				jQuery( this ).wrapInner( html.call(this, i) );
//			});
//		}

//		return this.each(function() {
//			var self = jQuery( this ),
//				contents = self.contents();

//			if ( contents.length ) {
//				contents.wrapAll( html );

//			} else {
//				self.append( html );
//			}
//		});
//	},

//	wrap: function( html ) {
//		var isFunction = jQuery.isFunction( html );

//		return this.each(function( i ) {
//			jQuery( this ).wrapAll( isFunction ? html.call(this, i) : html );
//		});
//	},

//	unwrap: function() {
//		return this.parent().each(function() {
//			if ( !jQuery.nodeName( this, "body" ) ) {
//				jQuery( this ).replaceWith( this.childNodes );
//			}
//		}).end();
//	}
//});


//jQuery.expr.filters.hidden = function( elem ) {
//	// Support: Opera <= 12.12
//	// Opera reports offsetWidths and offsetHeights less than zero on some elements
//	return elem.offsetWidth <= 0 && elem.offsetHeight <= 0;
//};
//jQuery.expr.filters.visible = function( elem ) {
//	return !jQuery.expr.filters.hidden( elem );
//};




//var r20 = /%20/g,
//	rbracket = /\[\]$/,
//	rCRLF = /\r?\n/g,
//	rsubmitterTypes = /^(?:submit|button|image|reset|file)$/i,
//	rsubmittable = /^(?:input|select|textarea|keygen)/i;

//function buildParams( prefix, obj, traditional, add ) {
//	var name;

//	if ( jQuery.isArray( obj ) ) {
//		// Serialize array item.
//		jQuery.each( obj, function( i, v ) {
//			if ( traditional || rbracket.test( prefix ) ) {
//				// Treat each array item as a scalar.
//				add( prefix, v );

//			} else {
//				// Item is non-scalar (array or object), encode its numeric index.
//				buildParams( prefix + "[" + ( typeof v === "object" ? i : "" ) + "]", v, traditional, add );
//			}
//		});

//	} else if ( !traditional && jQuery.type( obj ) === "object" ) {
//		// Serialize object item.
//		for ( name in obj ) {
//			buildParams( prefix + "[" + name + "]", obj[ name ], traditional, add );
//		}

//	} else {
//		// Serialize scalar item.
//		add( prefix, obj );
//	}
//}

//// Serialize an array of form elements or a set of
//// key/values into a query string
//jQuery.param = function( a, traditional ) {
//	var prefix,
//		s = [],
//		add = function( key, value ) {
//			// If value is a function, invoke it and return its value
//			value = jQuery.isFunction( value ) ? value() : ( value == null ? "" : value );
//			s[ s.length ] = encodeURIComponent( key ) + "=" + encodeURIComponent( value );
//		};

//	// Set traditional to true for jQuery <= 1.3.2 behavior.
//	if ( traditional === undefined ) {
//		traditional = jQuery.ajaxSettings && jQuery.ajaxSettings.traditional;
//	}

//	// If an array was passed in, assume that it is an array of form elements.
//	if ( jQuery.isArray( a ) || ( a.jquery && !jQuery.isPlainObject( a ) ) ) {
//		// Serialize the form elements
//		jQuery.each( a, function() {
//			add( this.name, this.value );
//		});

//	} else {
//		// If traditional, encode the "old" way (the way 1.3.2 or older
//		// did it), otherwise encode params recursively.
//		for ( prefix in a ) {
//			buildParams( prefix, a[ prefix ], traditional, add );
//		}
//	}

//	// Return the resulting serialization
//	return s.join( "&" ).replace( r20, "+" );
//};

//jQuery.fn.extend({
//	serialize: function() {
//		return jQuery.param( this.serializeArray() );
//	},
//	serializeArray: function() {
//		return this.map(function() {
//			// Can add propHook for "elements" to filter or add form elements
//			var elements = jQuery.prop( this, "elements" );
//			return elements ? jQuery.makeArray( elements ) : this;
//		})
//		.filter(function() {
//			var type = this.type;

//			// Use .is( ":disabled" ) so that fieldset[disabled] works
//			return this.name && !jQuery( this ).is( ":disabled" ) &&
//				rsubmittable.test( this.nodeName ) && !rsubmitterTypes.test( type ) &&
//				( this.checked || !rcheckableType.test( type ) );
//		})
//		.map(function( i, elem ) {
//			var val = jQuery( this ).val();

//			return val == null ?
//				null :
//				jQuery.isArray( val ) ?
//					jQuery.map( val, function( val ) {
//						return { name: elem.name, value: val.replace( rCRLF, "\r\n" ) };
//					}) :
//					{ name: elem.name, value: val.replace( rCRLF, "\r\n" ) };
//		}).get();
//	}
//});


//jQuery.ajaxSettings.xhr = function() {
//	try {
//		return new XMLHttpRequest();
//	} catch( e ) {}
//};

//var xhrId = 0,
//	xhrCallbacks = {},
//	xhrSuccessStatus = {
//		// file protocol always yields status code 0, assume 200
//		0: 200,
//		// Support: IE9
//		// #1450: sometimes IE returns 1223 when it should be 204
//		1223: 204
//	},
//	xhrSupported = jQuery.ajaxSettings.xhr();

//// Support: IE9
//// Open requests must be manually aborted on unload (#5280)
//if ( window.ActiveXObject ) {
//	jQuery( window ).on( "unload", function() {
//		for ( var key in xhrCallbacks ) {
//			xhrCallbacks[ key ]();
//		}
//	});
//}

//support.cors = !!xhrSupported && ( "withCredentials" in xhrSupported );
//support.ajax = xhrSupported = !!xhrSupported;

//jQuery.ajaxTransport(function( options ) {
//	var callback;

//	// Cross domain only allowed if supported through XMLHttpRequest
//	if ( support.cors || xhrSupported && !options.crossDomain ) {
//		return {
//			send: function( headers, complete ) {
//				var i,
//					xhr = options.xhr(),
//					id = ++xhrId;

//				xhr.open( options.type, options.url, options.async, options.username, options.password );

//				// Apply custom fields if provided
//				if ( options.xhrFields ) {
//					for ( i in options.xhrFields ) {
//						xhr[ i ] = options.xhrFields[ i ];
//					}
//				}

//				// Override mime type if needed
//				if ( options.mimeType && xhr.overrideMimeType ) {
//					xhr.overrideMimeType( options.mimeType );
//				}

//				// X-Requested-With header
//				// For cross-domain requests, seeing as conditions for a preflight are
//				// akin to a jigsaw puzzle, we simply never set it to be sure.
//				// (it can always be set on a per-request basis or even using ajaxSetup)
//				// For same-domain requests, won't change header if already provided.
//				if ( !options.crossDomain && !headers["X-Requested-With"] ) {
//					headers["X-Requested-With"] = "XMLHttpRequest";
//				}

//				// Set headers
//				for ( i in headers ) {
//					xhr.setRequestHeader( i, headers[ i ] );
//				}

//				// Callback
//				callback = function( type ) {
//					return function() {
//						if ( callback ) {
//							delete xhrCallbacks[ id ];
//							callback = xhr.onload = xhr.onerror = null;

//							if ( type === "abort" ) {
//								xhr.abort();
//							} else if ( type === "error" ) {
//								complete(
//									// file: protocol always yields status 0; see #8605, #14207
//									xhr.status,
//									xhr.statusText
//								);
//							} else {
//								complete(
//									xhrSuccessStatus[ xhr.status ] || xhr.status,
//									xhr.statusText,
//									// Support: IE9
//									// Accessing binary-data responseText throws an exception
//									// (#11426)
//									typeof xhr.responseText === "string" ? {
//										text: xhr.responseText
//									} : undefined,
//									xhr.getAllResponseHeaders()
//								);
//							}
//						}
//					};
//				};

//				// Listen to events
//				xhr.onload = callback();
//				xhr.onerror = callback("error");

//				// Create the abort callback
//				callback = xhrCallbacks[ id ] = callback("abort");

//				try {
//					// Do send the request (this may raise an exception)
//					xhr.send( options.hasContent && options.data || null );
//				} catch ( e ) {
//					// #14683: Only rethrow if this hasn't been notified as an error yet
//					if ( callback ) {
//						throw e;
//					}
//				}
//			},

//			abort: function() {
//				if ( callback ) {
//					callback();
//				}
//			}
//		};
//	}
//});




//// Install script dataType
//jQuery.ajaxSetup({
//	accepts: {
//		script: "text/javascript, application/javascript, application/ecmascript, application/x-ecmascript"
//	},
//	contents: {
//		script: /(?:java|ecma)script/
//	},
//	converters: {
//		"text script": function( text ) {
//			jQuery.globalEval( text );
//			return text;
//		}
//	}
//});

//// Handle cache's special case and crossDomain
//jQuery.ajaxPrefilter( "script", function( s ) {
//	if ( s.cache === undefined ) {
//		s.cache = false;
//	}
//	if ( s.crossDomain ) {
//		s.type = "GET";
//	}
//});

//// Bind script tag hack transport
//jQuery.ajaxTransport( "script", function( s ) {
//	// This transport only deals with cross domain requests
//	if ( s.crossDomain ) {
//		var script, callback;
//		return {
//			send: function( _, complete ) {
//				script = jQuery("<script>").prop({
//					async: true,
//					charset: s.scriptCharset,
//					src: s.url
//				}).on(
//					"load error",
//					callback = function( evt ) {
//						script.remove();
//						callback = null;
//						if ( evt ) {
//							complete( evt.type === "error" ? 404 : 200, evt.type );
//						}
//					}
//				);
//				document.head.appendChild( script[ 0 ] );
//			},
//			abort: function() {
//				if ( callback ) {
//					callback();
//				}
//			}
//		};
//	}
//});




//var oldCallbacks = [],
//	rjsonp = /(=)\?(?=&|$)|\?\?/;

//// Default jsonp settings
//jQuery.ajaxSetup({
//	jsonp: "callback",
//	jsonpCallback: function() {
//		var callback = oldCallbacks.pop() || ( jQuery.expando + "_" + ( nonce++ ) );
//		this[ callback ] = true;
//		return callback;
//	}
//});

//// Detect, normalize options and install callbacks for jsonp requests
//jQuery.ajaxPrefilter( "json jsonp", function( s, originalSettings, jqXHR ) {

//	var callbackName, overwritten, responseContainer,
//		jsonProp = s.jsonp !== false && ( rjsonp.test( s.url ) ?
//			"url" :
//			typeof s.data === "string" && !( s.contentType || "" ).indexOf("application/x-www-form-urlencoded") && rjsonp.test( s.data ) && "data"
//		);

//	// Handle iff the expected data type is "jsonp" or we have a parameter to set
//	if ( jsonProp || s.dataTypes[ 0 ] === "jsonp" ) {

//		// Get callback name, remembering preexisting value associated with it
//		callbackName = s.jsonpCallback = jQuery.isFunction( s.jsonpCallback ) ?
//			s.jsonpCallback() :
//			s.jsonpCallback;

//		// Insert callback into url or form data
//		if ( jsonProp ) {
//			s[ jsonProp ] = s[ jsonProp ].replace( rjsonp, "$1" + callbackName );
//		} else if ( s.jsonp !== false ) {
//			s.url += ( rquery.test( s.url ) ? "&" : "?" ) + s.jsonp + "=" + callbackName;
//		}

//		// Use data converter to retrieve json after script execution
//		s.converters["script json"] = function() {
//			if ( !responseContainer ) {
//				jQuery.error( callbackName + " was not called" );
//			}
//			return responseContainer[ 0 ];
//		};

//		// force json dataType
//		s.dataTypes[ 0 ] = "json";

//		// Install callback
//		overwritten = window[ callbackName ];
//		window[ callbackName ] = function() {
//			responseContainer = arguments;
//		};

//		// Clean-up function (fires after converters)
//		jqXHR.always(function() {
//			// Restore preexisting value
//			window[ callbackName ] = overwritten;

//			// Save back as free
//			if ( s[ callbackName ] ) {
//				// make sure that re-using the options doesn't screw things around
//				s.jsonpCallback = originalSettings.jsonpCallback;

//				// save the callback name for future use
//				oldCallbacks.push( callbackName );
//			}

//			// Call if it was a function and we have a response
//			if ( responseContainer && jQuery.isFunction( overwritten ) ) {
//				overwritten( responseContainer[ 0 ] );
//			}

//			responseContainer = overwritten = undefined;
//		});

//		// Delegate to script
//		return "script";
//	}
//});




//// data: string of html
//// context (optional): If specified, the fragment will be created in this context, defaults to document
//// keepScripts (optional): If true, will include scripts passed in the html string
//jQuery.parseHTML = function( data, context, keepScripts ) {
//	if ( !data || typeof data !== "string" ) {
//		return null;
//	}
//	if ( typeof context === "boolean" ) {
//		keepScripts = context;
//		context = false;
//	}
//	context = context || document;

//	var parsed = rsingleTag.exec( data ),
//		scripts = !keepScripts && [];

//	// Single tag
//	if ( parsed ) {
//		return [ context.createElement( parsed[1] ) ];
//	}

//	parsed = jQuery.buildFragment( [ data ], context, scripts );

//	if ( scripts && scripts.length ) {
//		jQuery( scripts ).remove();
//	}

//	return jQuery.merge( [], parsed.childNodes );
//};


//// Keep a copy of the old load method
//var _load = jQuery.fn.load;

///**
// * Load a url into a page
// */
//jQuery.fn.load = function( url, params, callback ) {
//	if ( typeof url !== "string" && _load ) {
//		return _load.apply( this, arguments );
//	}

//	var selector, type, response,
//		self = this,
//		off = url.indexOf(" ");

//	if ( off >= 0 ) {
//		selector = jQuery.trim( url.slice( off ) );
//		url = url.slice( 0, off );
//	}

//	// If it's a function
//	if ( jQuery.isFunction( params ) ) {

//		// We assume that it's the callback
//		callback = params;
//		params = undefined;

//	// Otherwise, build a param string
//	} else if ( params && typeof params === "object" ) {
//		type = "POST";
//	}

//	// If we have elements to modify, make the request
//	if ( self.length > 0 ) {
//		jQuery.ajax({
//			url: url,

//			// if "type" variable is undefined, then "GET" method will be used
//			type: type,
//			dataType: "html",
//			data: params
//		}).done(function( responseText ) {

//			// Save response for use in complete callback
//			response = arguments;

//			self.html( selector ?

//				// If a selector was specified, locate the right elements in a dummy div
//				// Exclude scripts to avoid IE 'Permission Denied' errors
//				jQuery("<div>").append( jQuery.parseHTML( responseText ) ).find( selector ) :

//				// Otherwise use the full result
//				responseText );

//		}).complete( callback && function( jqXHR, status ) {
//			self.each( callback, response || [ jqXHR.responseText, status, jqXHR ] );
//		});
//	}

//	return this;
//};




//jQuery.expr.filters.animated = function( elem ) {
//	return jQuery.grep(jQuery.timers, function( fn ) {
//		return elem === fn.elem;
//	}).length;
//};




//var docElem = window.document.documentElement;

///**
// * Gets a window from an element
// */
//function getWindow( elem ) {
//	return jQuery.isWindow( elem ) ? elem : elem.nodeType === 9 && elem.defaultView;
//}

//jQuery.offset = {
//	setOffset: function( elem, options, i ) {
//		var curPosition, curLeft, curCSSTop, curTop, curOffset, curCSSLeft, calculatePosition,
//			position = jQuery.css( elem, "position" ),
//			curElem = jQuery( elem ),
//			props = {};

//		// Set position first, in-case top/left are set even on static elem
//		if ( position === "static" ) {
//			elem.style.position = "relative";
//		}

//		curOffset = curElem.offset();
//		curCSSTop = jQuery.css( elem, "top" );
//		curCSSLeft = jQuery.css( elem, "left" );
//		calculatePosition = ( position === "absolute" || position === "fixed" ) &&
//			( curCSSTop + curCSSLeft ).indexOf("auto") > -1;

//		// Need to be able to calculate position if either top or left is auto and position is either absolute or fixed
//		if ( calculatePosition ) {
//			curPosition = curElem.position();
//			curTop = curPosition.top;
//			curLeft = curPosition.left;

//		} else {
//			curTop = parseFloat( curCSSTop ) || 0;
//			curLeft = parseFloat( curCSSLeft ) || 0;
//		}

//		if ( jQuery.isFunction( options ) ) {
//			options = options.call( elem, i, curOffset );
//		}

//		if ( options.top != null ) {
//			props.top = ( options.top - curOffset.top ) + curTop;
//		}
//		if ( options.left != null ) {
//			props.left = ( options.left - curOffset.left ) + curLeft;
//		}

//		if ( "using" in options ) {
//			options.using.call( elem, props );

//		} else {
//			curElem.css( props );
//		}
//	}
//};

//jQuery.fn.extend({
//	offset: function( options ) {
//		if ( arguments.length ) {
//			return options === undefined ?
//				this :
//				this.each(function( i ) {
//					jQuery.offset.setOffset( this, options, i );
//				});
//		}

//		var docElem, win,
//			elem = this[ 0 ],
//			box = { top: 0, left: 0 },
//			doc = elem && elem.ownerDocument;

//		if ( !doc ) {
//			return;
//		}

//		docElem = doc.documentElement;

//		// Make sure it's not a disconnected DOM node
//		if ( !jQuery.contains( docElem, elem ) ) {
//			return box;
//		}

//		// If we don't have gBCR, just use 0,0 rather than error
//		// BlackBerry 5, iOS 3 (original iPhone)
//		if ( typeof elem.getBoundingClientRect !== strundefined ) {
//			box = elem.getBoundingClientRect();
//		}
//		win = getWindow( doc );
//		return {
//			top: box.top + win.pageYOffset - docElem.clientTop,
//			left: box.left + win.pageXOffset - docElem.clientLeft
//		};
//	},

//	position: function() {
//		if ( !this[ 0 ] ) {
//			return;
//		}

//		var offsetParent, offset,
//			elem = this[ 0 ],
//			parentOffset = { top: 0, left: 0 };

//		// Fixed elements are offset from window (parentOffset = {top:0, left: 0}, because it is its only offset parent
//		if ( jQuery.css( elem, "position" ) === "fixed" ) {
//			// We assume that getBoundingClientRect is available when computed position is fixed
//			offset = elem.getBoundingClientRect();

//		} else {
//			// Get *real* offsetParent
//			offsetParent = this.offsetParent();

//			// Get correct offsets
//			offset = this.offset();
//			if ( !jQuery.nodeName( offsetParent[ 0 ], "html" ) ) {
//				parentOffset = offsetParent.offset();
//			}

//			// Add offsetParent borders
//			parentOffset.top += jQuery.css( offsetParent[ 0 ], "borderTopWidth", true );
//			parentOffset.left += jQuery.css( offsetParent[ 0 ], "borderLeftWidth", true );
//		}

//		// Subtract parent offsets and element margins
//		return {
//			top: offset.top - parentOffset.top - jQuery.css( elem, "marginTop", true ),
//			left: offset.left - parentOffset.left - jQuery.css( elem, "marginLeft", true )
//		};
//	},

//	offsetParent: function() {
//		return this.map(function() {
//			var offsetParent = this.offsetParent || docElem;

//			while ( offsetParent && ( !jQuery.nodeName( offsetParent, "html" ) && jQuery.css( offsetParent, "position" ) === "static" ) ) {
//				offsetParent = offsetParent.offsetParent;
//			}

//			return offsetParent || docElem;
//		});
//	}
//});

//// Create scrollLeft and scrollTop methods
//jQuery.each( { scrollLeft: "pageXOffset", scrollTop: "pageYOffset" }, function( method, prop ) {
//	var top = "pageYOffset" === prop;

//	jQuery.fn[ method ] = function( val ) {
//		return access( this, function( elem, method, val ) {
//			var win = getWindow( elem );

//			if ( val === undefined ) {
//				return win ? win[ prop ] : elem[ method ];
//			}

//			if ( win ) {
//				win.scrollTo(
//					!top ? val : window.pageXOffset,
//					top ? val : window.pageYOffset
//				);

//			} else {
//				elem[ method ] = val;
//			}
//		}, method, val, arguments.length, null );
//	};
//});

//// Add the top/left cssHooks using jQuery.fn.position
//// Webkit bug: https://bugs.webkit.org/show_bug.cgi?id=29084
//// getComputedStyle returns percent when specified for top/left/bottom/right
//// rather than make the css module depend on the offset module, we just check for it here
//jQuery.each( [ "top", "left" ], function( i, prop ) {
//	jQuery.cssHooks[ prop ] = addGetHookIf( support.pixelPosition,
//		function( elem, computed ) {
//			if ( computed ) {
//				computed = curCSS( elem, prop );
//				// if curCSS returns percentage, fallback to offset
//				return rnumnonpx.test( computed ) ?
//					jQuery( elem ).position()[ prop ] + "px" :
//					computed;
//			}
//		}
//	);
//});


//// Create innerHeight, innerWidth, height, width, outerHeight and outerWidth methods
//jQuery.each( { Height: "height", Width: "width" }, function( name, type ) {
//	jQuery.each( { padding: "inner" + name, content: type, "": "outer" + name }, function( defaultExtra, funcName ) {
//		// margin is only for outerHeight, outerWidth
//		jQuery.fn[ funcName ] = function( margin, value ) {
//			var chainable = arguments.length && ( defaultExtra || typeof margin !== "boolean" ),
//				extra = defaultExtra || ( margin === true || value === true ? "margin" : "border" );

//			return access( this, function( elem, type, value ) {
//				var doc;

//				if ( jQuery.isWindow( elem ) ) {
//					// As of 5/8/2012 this will yield incorrect results for Mobile Safari, but there
//					// isn't a whole lot we can do. See pull request at this URL for discussion:
//					// https://github.com/jquery/jquery/pull/764
//					return elem.document.documentElement[ "client" + name ];
//				}

//				// Get document width or height
//				if ( elem.nodeType === 9 ) {
//					doc = elem.documentElement;

//					// Either scroll[Width/Height] or offset[Width/Height] or client[Width/Height],
//					// whichever is greatest
//					return Math.max(
//						elem.body[ "scroll" + name ], doc[ "scroll" + name ],
//						elem.body[ "offset" + name ], doc[ "offset" + name ],
//						doc[ "client" + name ]
//					);
//				}

//				return value === undefined ?
//					// Get width or height on the element, requesting but not forcing parseFloat
//					jQuery.css( elem, type, extra ) :

//					// Set width or height on the element
//					jQuery.style( elem, type, value, extra );
//			}, type, chainable ? margin : undefined, chainable, null );
//		};
//	});
//});


//// The number of elements contained in the matched element set
//jQuery.fn.size = function() {
//	return this.length;
//};

//jQuery.fn.andSelf = jQuery.fn.addBack;




//// Register as a named AMD module, since jQuery can be concatenated with other
//// files that may use define, but not via a proper concatenation script that
//// understands anonymous AMD modules. A named AMD is safest and most robust
//// way to register. Lowercase jquery is used because AMD module names are
//// derived from file names, and jQuery is normally delivered in a lowercase
//// file name. Do this after creating the global so that if an AMD module wants
//// to call noConflict to hide this version of jQuery, it will work.

//// Note that for maximum portability, libraries that are not jQuery should
//// declare themselves as anonymous modules, and avoid setting a global if an
//// AMD loader is present. jQuery is a special case. For more information, see
//// https://github.com/jrburke/requirejs/wiki/Updating-existing-libraries#wiki-anon

//if ( typeof define === "function" && define.amd ) {
//	define( "jquery", [], function() {
//		return jQuery;
//	});
//}




//var
//	// Map over jQuery in case of overwrite
//	_jQuery = window.jQuery,

//	// Map over the $ in case of overwrite
//	_$ = window.$;

//jQuery.noConflict = function( deep ) {
//	if ( window.$ === jQuery ) {
//		window.$ = _$;
//	}

//	if ( deep && window.jQuery === jQuery ) {
//		window.jQuery = _jQuery;
//	}

//	return jQuery;
//};

//// Expose jQuery and $ identifiers, even in
//// AMD (#7102#comment:10, https://github.com/jquery/jquery/pull/557)
//// and CommonJS for browser emulators (#13566)
//if ( typeof noGlobal === strundefined ) {
//	window.jQuery = window.$ = jQuery;
//}




//return jQuery;

//}));

//},{}],40:[function(require,module,exports){
//(function (process){
//var jws = require('jws');

//module.exports.decode = function (jwt) {
//  var decoded = jws.decode(jwt, {json: true});
//  return decoded && decoded.payload;
//};

//module.exports.sign = function(payload, secretOrPrivateKey, options) {
//  options = options || {};

//  var header = ((typeof options.headers === 'object') && options.headers) || {};
//  header.typ = 'JWT';
//  header.alg = options.algorithm || 'HS256';

//  if (options.header) {
//    Object.keys(options.header).forEach(function (k) {
//      header[k] = options.header[k];
//    });
//  }

//  if (!options.noTimestamp) {
//    payload.iat = Math.floor(Date.now() / 1000);
//  }

//  if (options.expiresInMinutes) {
//    var ms = options.expiresInMinutes * 60;
//    payload.exp = payload.iat + ms;
//  }

//  if (options.audience)
//    payload.aud = options.audience;

//  if (options.issuer)
//    payload.iss = options.issuer;

//  if (options.subject)
//    payload.sub = options.subject;

//  var signed = jws.sign({header: header, payload: payload, secret: secretOrPrivateKey});

//  return signed;
//};

//module.exports.verify = function(jwtString, secretOrPublicKey, options, callback) {
//  if ((typeof options === 'function') && !callback) {
//    callback = options;
//    options = {};
//  }

//  if (!options) options = {};

//  if (callback) {
//    var done = function() {
//      var args = Array.prototype.slice.call(arguments, 0)
//      return process.nextTick(function() {
//          callback.apply(null, args)
//      });
//    };
//  } else {
//    var done = function(err, data) {
//      if (err) throw err;
//      return data;
//    };
//  }

//  if (!jwtString)
//    return done(new JsonWebTokenError('jwt must be provided'));

//  var parts = jwtString.split('.');
//  if (parts.length !== 3)
//    return done(new JsonWebTokenError('jwt malformed'));

//  if (parts[2].trim() === '' && secretOrPublicKey)
//    return done(new JsonWebTokenError('jwt signature is required'));

//  var valid;
//  try {
//    valid = jws.verify(jwtString, secretOrPublicKey);
//  }
//  catch (e) {
//    return done(e);
//  }

//  if (!valid)
//    return done(new JsonWebTokenError('invalid signature'));

//  var payload;

//  try {
//   payload = this.decode(jwtString);
//  } catch(err) {
//    return done(err);
//  }

//  if (payload.exp) {
//    if (Math.floor(Date.now() / 1000) >= payload.exp)
//      return done(new TokenExpiredError('jwt expired', new Date(payload.exp * 1000)));
//  }

//  if (options.audience) {
//    var audiences = Array.isArray(options.audience)? options.audience : [options.audience];
//    var target = Array.isArray(payload.aud) ? payload.aud : [payload.aud];
    
//    var match = target.some(function(aud) { return audiences.indexOf(aud) != -1; });

//    if (!match)
//      return done(new JsonWebTokenError('jwt audience invalid. expected: ' + payload.aud));
//  }

//  if (options.issuer) {
//    if (payload.iss !== options.issuer)
//      return done(new JsonWebTokenError('jwt issuer invalid. expected: ' + payload.iss));
//  }

//  return done(null, payload);
//};

//var JsonWebTokenError = module.exports.JsonWebTokenError = function (message, error) {
//  Error.call(this, message);
//  this.name = 'JsonWebTokenError';
//  this.message = message;
//  if (error) this.inner = error;
//};

//JsonWebTokenError.prototype = Object.create(Error.prototype);
//JsonWebTokenError.prototype.constructor = JsonWebTokenError;

//var TokenExpiredError = module.exports.TokenExpiredError = function (message, expiredAt) {
//  JsonWebTokenError.call(this, message);
//  this.name = 'TokenExpiredError';
//  this.expiredAt = expiredAt;
//};
//TokenExpiredError.prototype = Object.create(JsonWebTokenError.prototype);
//TokenExpiredError.prototype.constructor = TokenExpiredError;

//}).call(this,require('_process'))
//},{"_process":22,"jws":41}],41:[function(require,module,exports){
//(function (process){
///*global process, exports*/
//var Buffer = require('buffer').Buffer;
//var Stream = require('stream');
//var util = require('util');
//var base64url = require('base64url');
//var jwa = require('jwa');

//var ALGORITHMS = [
//  'HS256', 'HS384', 'HS512',
//  'RS256', 'RS384', 'RS512',
//  'ES256', 'ES384', 'ES512',
//];

//function toString(obj) {
//  if (typeof obj === 'string')
//    return obj;
//  if (typeof obj === 'number' || Buffer.isBuffer(obj))
//    return obj.toString();
//  return JSON.stringify(obj);
//}

//function jwsSecuredInput(header, payload) {
//  var encodedHeader = base64url(toString(header));
//  var encodedPayload = base64url(toString(payload));
//  return util.format('%s.%s', encodedHeader, encodedPayload);
//}

//function jwsSign(opts) {
//  var header = opts.header;
//  var payload = opts.payload;
//  var secretOrKey = opts.secret || opts.privateKey;
//  var algo = jwa(header.alg);
//  var securedInput = jwsSecuredInput(header, payload);
//  var signature = algo.sign(securedInput, secretOrKey);
//  return util.format('%s.%s', securedInput, signature);
//}

//function isObject(thing) {
//  return Object.prototype.toString.call(thing) === '[object Object]';
//}

//function safeJsonParse(thing) {
//  if (isObject(thing))
//    return thing;
//  try { return JSON.parse(thing) }
//  catch (e) { return undefined }
//}

//function headerFromJWS(jwsSig) {
//  var encodedHeader = jwsSig.split('.', 1)[0];
//  return safeJsonParse(base64url.decode(encodedHeader));
//}

//function securedInputFromJWS(jwsSig) {
//  return jwsSig.split('.', 2).join('.');
//}

//function algoFromJWS(jwsSig) {
//  var err;
//  var header = headerFromJWS(jwsSig);
//  if (typeof header != 'object') {
//    err = new Error("Invalid token: no header in signature '" + jwsSig + "'");
//    err.code = "MISSING_HEADER";
//    err.signature = jwsSig;
//    throw err;
//  }
//  if (!header.alg) {
//    err = new Error("Missing `alg` field in header for signature '"+ jwsSig +"'");
//    err.code = "MISSING_ALGORITHM";
//    err.header = header;
//    err.signature = jwsSig;
//    throw err;
//  }
//  return header.alg;
//}

//function signatureFromJWS(jwsSig) {
//  return jwsSig.split('.')[2];
//}

//function payloadFromJWS(jwsSig) {
//  var payload = jwsSig.split('.')[1];
//  return base64url.decode(payload);
//}

//var JWS_REGEX = /^[a-zA-Z0-9\-_]+?\.[a-zA-Z0-9\-_]+?\.([a-zA-Z0-9\-_]+)?$/;
//function isValidJws(string) {
//  if (!JWS_REGEX.test(string))
//    return false;
//  if (!headerFromJWS(string))
//    return false;
//  return true;
//}

//function jwsVerify(jwsSig, secretOrKey) {
//  jwsSig = toString(jwsSig);
//  var signature = signatureFromJWS(jwsSig);
//  var securedInput = securedInputFromJWS(jwsSig);
//  var algo = jwa(algoFromJWS(jwsSig));
//  return algo.verify(securedInput, signature, secretOrKey);
//}

//function jwsDecode(jwsSig, opts) {
//  opts = opts || {};
//  jwsSig = toString(jwsSig);
//  if (!isValidJws(jwsSig))
//    return null;
//  var header = headerFromJWS(jwsSig);
//  if (!header)
//    return null;
//  var payload = payloadFromJWS(jwsSig);
//  if (header.typ === 'JWT' || opts.json)
//    payload = JSON.parse(payload);
//  return {
//    header: header,
//    payload: payload,
//    signature: signatureFromJWS(jwsSig),
//  };
//}

//function SignStream(opts) {
//  var secret = opts.secret||opts.privateKey||opts.key;
//  var secretStream = new DataStream(secret);
//  this.readable = true;
//  this.header = opts.header;
//  this.secret = this.privateKey = this.key = secretStream;
//  this.payload = new DataStream(opts.payload);
//  this.secret.once('close', function () {
//    if (!this.payload.writable && this.readable)
//      this.sign();
//  }.bind(this));

//  this.payload.once('close', function () {
//    if (!this.secret.writable && this.readable)
//      this.sign();
//  }.bind(this));
//}
//util.inherits(SignStream, Stream);
//SignStream.prototype.sign = function sign() {
//  var signature = jwsSign({
//    header: this.header,
//    payload: this.payload.buffer,
//    secret: this.secret.buffer,
//  });
//  this.emit('done', signature);
//  this.emit('data', signature);
//  this.emit('end');
//  this.readable = false;
//  return signature;
//};

//function VerifyStream(opts) {
//  opts = opts || {};
//  var secretOrKey = opts.secret||opts.publicKey||opts.key;
//  var secretStream = new DataStream(secretOrKey);
//  this.readable = true;
//  this.secret = this.publicKey = this.key = secretStream;
//  this.signature = new DataStream(opts.signature);
//  this.secret.once('close', function () {
//    if (!this.signature.writable && this.readable)
//      this.verify();
//  }.bind(this));

//  this.signature.once('close', function () {
//    if (!this.secret.writable && this.readable)
//      this.verify();
//  }.bind(this));
//}
//util.inherits(VerifyStream, Stream);
//VerifyStream.prototype.verify = function verify() {
//  var valid = jwsVerify(this.signature.buffer, this.key.buffer);
//  var obj = jwsDecode(this.signature.buffer);
//  this.emit('done', valid, obj);
//  this.emit('data', valid);
//  this.emit('end');
//  this.readable = false;
//  return valid;
//};

//function DataStream(data) {
//  this.buffer = Buffer(data||0);
//  this.writable = true;
//  this.readable = true;
//  if (!data)
//    return this;
//  if (typeof data.pipe === 'function')
//    data.pipe(this);
//  else if (data.length) {
//    this.writable = false;
//    process.nextTick(function () {
//      this.buffer = data;
//      this.emit('end', data);
//      this.readable = false;
//      this.emit('close');
//    }.bind(this));
//  }
//}
//util.inherits(DataStream, Stream);

//DataStream.prototype.write = function write(data) {
//  this.buffer = Buffer.concat([this.buffer, Buffer(data)]);
//  this.emit('data', data);
//};

//DataStream.prototype.end = function end(data) {
//  if (data)
//    this.write(data);
//  this.emit('end', data);
//  this.emit('close');
//  this.writable = false;
//  this.readable = false;
//};

//exports.ALGORITHMS = ALGORITHMS;
//exports.sign = jwsSign;
//exports.verify = jwsVerify;
//exports.decode = jwsDecode;
//exports.isValid = isValidJws;
//exports.createSign = function createSign(opts) {
//  return new SignStream(opts);
//};
//exports.createVerify = function createVerify(opts) {
//  return new VerifyStream(opts);
//};

//}).call(this,require('_process'))
//},{"_process":22,"base64url":42,"buffer":3,"jwa":43,"stream":35,"util":37}],42:[function(require,module,exports){
//(function (Buffer){
//function fromBase64(base64string) {
//  return (
//    base64string
//      .replace(/=/g, '')
//      .replace(/\+/g, '-')
//      .replace(/\//g, '_')
//  );
//}

//function toBase64(base64UrlString) {
//  if (Buffer.isBuffer(base64UrlString))
//    base64UrlString = base64UrlString.toString()

//  var b64str = padString(base64UrlString)
//    .replace(/\-/g, '+')
//    .replace(/_/g, '/');
//  return b64str;
//}

//function padString(string) {
//  var segmentLength = 4;
//  var stringLength = string.length;
//  var diff = string.length % segmentLength;
//  if (!diff)
//    return string;
//  var position = stringLength;
//  var padLength = segmentLength - diff;
//  var paddedStringLength = stringLength + padLength;
//  var buffer = Buffer(paddedStringLength);
//  buffer.write(string);
//  while (padLength--)
//    buffer.write('=', position++);
//  return buffer.toString();
//}

//function decodeBase64Url(base64UrlString, encoding) {
//  return Buffer(toBase64(base64UrlString), 'base64').toString(encoding);
//}

//function base64url(stringOrBuffer) {
//  return fromBase64(Buffer(stringOrBuffer).toString('base64'));
//}

//function toBuffer(base64string) {
//  return Buffer(toBase64(base64string), 'base64');
//}

//base64url.toBase64 = toBase64;
//base64url.fromBase64 = fromBase64;
//base64url.decode = decodeBase64Url;
//base64url.toBuffer = toBuffer;

//module.exports = base64url;

//}).call(this,require("buffer").Buffer)
//},{"buffer":3}],43:[function(require,module,exports){
//(function (Buffer){
//var base64url = require('base64url');
//var crypto = require('crypto');
//var util = require('util');

//var MSG_INVALID_ALGORITHM = '"%s" is not a valid algorithm.\n  Supported algorithms are:\n  "HS256", "HS384", "HS512", "RS256", "RS384", "RS512" and "none".'
//var MSG_INVALID_SECRET = 'secret must be a string or buffer';
//var MSG_INVALID_KEY = 'key must be a string or buffer';

//function typeError(template) {
//  var args = [].slice.call(arguments, 1);
//  var errMsg = util.format.bind(util, template).apply(null, args);
//  return new TypeError(errMsg);
//}

//function bufferOrString(obj) {
//  return Buffer.isBuffer(obj) || typeof obj === 'string';
//}

//function normalizeInput(thing) {
//  if (!bufferOrString(thing))
//    thing = JSON.stringify(thing);
//  return thing;
//}

//function createHmacSigner(bits) {
//  return function sign(thing, secret) {
//    if (!bufferOrString(secret))
//      throw typeError(MSG_INVALID_SECRET);
//    thing = normalizeInput(thing);
//    var hmac = crypto.createHmac('SHA' + bits, secret);
//    var sig = (hmac.update(thing), hmac.digest('base64'))
//    return base64url.fromBase64(sig);
//  }
//}

//function createHmacVerifier(bits) {
//  return function verify(thing, signature, secret) {
//    var computedSig = createHmacSigner(bits)(thing, secret);
//    return signature === computedSig;
//  }
//}

//function createKeySigner(bits) {
//  return function sign(thing, privateKey) {
//    if (!bufferOrString(privateKey))
//      throw typeError(MSG_INVALID_KEY);
//    thing = normalizeInput(thing);
//    var signer = crypto.createSign('RSA-SHA' + bits);
//    var sig = (signer.update(thing), signer.sign(privateKey, 'base64'));
//    return base64url.fromBase64(sig);
//  }
//}

//function createKeyVerifier(bits) {
//  return function verify(thing, signature, publicKey) {
//    if (!bufferOrString(publicKey))
//      throw typeError(MSG_INVALID_KEY);
//    thing = normalizeInput(thing);
//    signature = base64url.toBase64(signature);
//    var verifier = crypto.createVerify('RSA-SHA' + bits);
//    verifier.update(thing);
//    return verifier.verify(publicKey, signature, 'base64');
//  }
//}

//function createNoneSigner() {
//  return function sign() {
//    return '';
//  }
//}

//function createNoneVerifier() {
//  return function verify(thing, signature) {
//    return signature === '';
//  }
//}

//module.exports = function jwa(algorithm) {
//  var signerFactories = {
//    hs: createHmacSigner,
//    rs: createKeySigner,
//    es: createKeySigner,
//    none: createNoneSigner,
//  }
//  var verifierFactories = {
//    hs: createHmacVerifier,
//    rs: createKeyVerifier,
//    es: createKeyVerifier,
//    none: createNoneVerifier,
//  }
//  var match = algorithm.match(/(RS|ES|HS|none)(256|384|512)?/i);
//  if (!match)
//    throw typeError(MSG_INVALID_ALGORITHM, algorithm);
//  var algo = match[1].toLowerCase();
//  var bits = match[2];

//  return {
//    sign: signerFactories[algo](bits),
//    verify: verifierFactories[algo](bits),
//  }
//};
//}).call(this,require("buffer").Buffer)
//},{"base64url":42,"buffer":3,"crypto":9,"util":37}],44:[function(require,module,exports){
//(function (process){
//(function() {
//    var smart = require('../client/entry');
//    var jquery = _jQuery = require('jquery');

//    // Patch jQuery AJAX mechanism to receive blob objects via XMLHttpRequest 2. Based on:
//    //    https://gist.github.com/aaronk6/bff7cc600d863d31a7bf
//    //    http://www.artandlogic.com/blog/2013/11/jquery-ajax-blobs-and-array-buffers/

//    /**
//     * Register ajax transports for blob send/recieve and array buffer send/receive via XMLHttpRequest Level 2
//     * within the comfortable framework of the jquery ajax request, with full support for promises.
//     *
//     * Notice the +* in the dataType string? The + indicates we want this transport to be prepended to the list
//     * of potential transports (so it gets first dibs if the request passes the conditions within to provide the
//     * ajax transport, preventing the standard transport from hogging the request), and the * indicates that
//     * potentially any request with any dataType might want to use the transports provided herein.
//     *
//     * Remember to specify 'processData:false' in the ajax options when attempting to send a blob or arraybuffer -
//     * otherwise jquery will try (and fail) to convert the blob or buffer into a query string.
//     */
//    jquery.ajaxTransport("+*", function(options, originalOptions, jqXHR){
//        // Test for the conditions that mean we can/want to send/receive blobs or arraybuffers - we need XMLHttpRequest
//        // level 2 (so feature-detect against window.FormData), feature detect against window.Blob or window.ArrayBuffer,
//        // and then check to see if the dataType is blob/arraybuffer or the data itself is a Blob/ArrayBuffer
//        if (window.FormData && ((options.dataType && (options.dataType === 'blob' || options.dataType === 'arraybuffer')) ||
//            (options.data && ((window.Blob && options.data instanceof Blob) ||
//                (window.ArrayBuffer && options.data instanceof ArrayBuffer)))
//            ))
//        {
//            return {
//                /**
//                 * Return a transport capable of sending and/or receiving blobs - in this case, we instantiate
//                 * a new XMLHttpRequest and use it to actually perform the request, and funnel the result back
//                 * into the jquery complete callback (such as the success function, done blocks, etc.)
//                 *
//                 * @param headers
//                 * @param completeCallback
//                 */
//                send: function(headers, completeCallback){
//                    var xhr = new XMLHttpRequest(),
//                        url = options.url || window.location.href,
//                        type = options.type || 'GET',
//                        dataType = options.dataType || 'text',
//                        data = options.data || null,
//                        async = options.async || true,
//                        key;

//                    xhr.addEventListener('load', function(){
//                        var response = {}, status, isSuccess;

//                        isSuccess = xhr.status >= 200 && xhr.status < 300 || xhr.status === 304;

//                        if (isSuccess) {
//                            response[dataType] = xhr.response;
//                        } else {
//                            // In case an error occured we assume that the response body contains
//                            // text data - so let's convert the binary data to a string which we can
//                            // pass to the complete callback.
//                            response.text = String.fromCharCode.apply(null, new Uint8Array(xhr.response));
//                        }

//                        completeCallback(xhr.status, xhr.statusText, response, xhr.getAllResponseHeaders());
//                    });

//                    xhr.open(type, url, async);
//                    xhr.responseType = dataType;

//                    for (key in headers) {
//                        if (headers.hasOwnProperty(key)) xhr.setRequestHeader(key, headers[key]);
//                    }
//                    xhr.send(data);
//                },
//                abort: function(){
//                    jqXHR.abort();
//                }
//            };
//        }
//    });
    
//    if (!process.browser) {
//      var windowObj = require('jsdom').jsdom().createWindow();
//      jquery = jquery(windowObj);
//    }
    
//    var defer = function(){
//        pr = jquery.Deferred();
//        pr.promise = pr.promise();
//        return pr;
//    };
//    var adapter = {
//        defer: defer,
//        http: function(args) {
//            var ret = jquery.Deferred();
//            var opts = {
//                type: args.method,
//                url: args.url,
//                dataType: args.dataType || "json",
//                headers: args.headers || {},
//                data: args.data
//            };
//            jquery.ajax(opts)
//                .done(ret.resolve)
//                .fail(ret.reject);
//            return ret.promise();
//        },
//        fhirjs: require('../../lib/jqFhir.js')
//    };

//    smart(adapter);

//}).call(this);

//}).call(this,require('_process'))
//},{"../../lib/jqFhir.js":1,"../client/entry":48,"_process":22,"jquery":39,"jsdom":2}],45:[function(require,module,exports){
//var adapter;

//var Adapter = module.exports =  {debug: true}

//Adapter.set = function (newAdapter) {
//    adapter = newAdapter;
//};

//Adapter.get = function () {
//    return adapter;
//};

//},{}],46:[function(require,module,exports){
//(function (process){
//var Adapter = require('./adapter');
//var FhirClient = require('./client');
//var Guid = require('./guid');
//var jwt = require('jsonwebtoken');

//var BBClient = module.exports =  {debug: true}

//function urlParam(p, forceArray) {
//  if (forceArray === undefined) {
//    forceArray = false;
//  }

//  var query = location.search.substr(1);
//  var data = query.split("&");
//  var result = [];

//  for(var i=0; i<data.length; i++) {
//    var item = data[i].split("=");
//    if (item[0] === p) {
//      var res = item[1].replace(/\+/g, '%20');
//      result.push(decodeURIComponent(res));
//    }
//  }

//  if (forceArray) {
//    return result;
//  }
//  if (result.length === 0){
//    return null;
//  }
//  return result[0];
//}

//function stripTrailingSlash(str) {
//    if(str.substr(-1) === '/') {
//        return str.substr(0, str.length - 1);
//    }
//    return str;
//}

///**
//* Get the previous token stored in sessionStorage
//* based on fullSessionStorageSupport flag.
//* @return object JSON tokenResponse
//*/
//function getPreviousToken(){
//  var token;
  
//  if (BBClient.settings.fullSessionStorageSupport) {
//    token = sessionStorage.tokenResponse;
//    return JSON.parse(token);
//  } else {
//    var state = urlParam('state');
//    return JSON.parse(sessionStorage[state]).tokenResponse;
//  }
//}

//function completeTokenFlow(hash){
//  if (!hash){
//    hash = window.location.hash;
//  }
//  var ret = Adapter.get().defer();

//  process.nextTick(function(){
//    var oauthResult = hash.match(/#(.*)/);
//    oauthResult = oauthResult ? oauthResult[1] : "";
//    oauthResult = oauthResult.split(/&/);
//    var authorization = {};
//    for (var i = 0; i < oauthResult.length; i++){
//      var kv = oauthResult[i].split(/=/);
//      if (kv[0].length > 0 && kv[1]) {
//        authorization[decodeURIComponent(kv[0])] = decodeURIComponent(kv[1]);
//      }
//    }
//    ret.resolve(authorization);
//  });

//  return ret.promise;
//}

//function completeCodeFlow(params){
//  if (!params){
//    params = {
//      code: urlParam('code'),
//      state: urlParam('state')
//    };
//  }
  
//  var ret = Adapter.get().defer();
//  var state = JSON.parse(sessionStorage[params.state]);

//  if (window.history.replaceState && BBClient.settings.replaceBrowserHistory){
//    window.history.replaceState({}, "", window.location.toString().replace(window.location.search, ""));
//  } 

//  // Using window.history.pushState to append state to the query param.
//  // This will allow session data to be retrieved via the state param.
//  if (window.history.pushState && !BBClient.settings.fullSessionStorageSupport) {
    
//    var queryParam = window.location.search;
//    if (window.location.search.indexOf('state') == -1) {
//      // Append state query param to URI for later.
//      // state query param will be used to look up
//      // token response upon page reload.

//      queryParam += (window.location.search ? '&' : '?');
//      queryParam += 'state=' + params.state;
      
//      var url = window.location.protocol + '//' + 
//                             window.location.host + 
//                             window.location.pathname + 
//                             queryParam;

//      window.history.pushState({}, "", url);
//    }
//  }

//  var data = {
//      code: params.code,
//      grant_type: 'authorization_code',
//      redirect_uri: state.client.redirect_uri
//  };

//  var headers = {};

//  if (state.client.secret) {
//    headers['Authorization'] = 'Basic ' + btoa(state.client.client_id + ':' + state.client.secret);
//  } else {
//    data['client_id'] = state.client.client_id;
//  }

//  Adapter.get().http({
//    method: 'POST',
//    url: state.provider.oauth2.token_uri,
//    data: data,
//    headers: headers
//  }).then(function(authz){
//       for (var i in params) {
//          if (params.hasOwnProperty(i)) {
//             authz[i] = params[i];
//          }
//       }
//       ret.resolve(authz);
//  }, function(){
//    console.log("failed to exchange code for access_token", arguments);
//    ret.reject();
//  });

//  return ret.promise;
//}

///**
// * This code is needed for the page refresh/reload workflow.
// * When the access token is nearing expriration or is expired,
// * this function will make an ajax POST call to obtain a new
// * access token using the current refresh token.
// * @return promise object
// */
//function completeTokenRefreshFlow() {
//  var ret = Adapter.get().defer();
//  var tokenResponse = getPreviousToken();
//  var state = JSON.parse(sessionStorage[tokenResponse.state]);
//  var refresh_token = tokenResponse.refresh_token;

//  Adapter.get().http({
//    method: 'POST',
//    url: state.provider.oauth2.token_uri,
//    data: {
//      grant_type: 'refresh_token',
//      refresh_token: refresh_token
//    },
//  }).then(function(authz) {
//    authz = $.extend(tokenResponse, authz);
//    ret.resolve(authz);
//  }, function() {
//    console.warn('Failed to exchange refresh_token for access_token', arguments);
//    ret.reject('Failed to exchange refresh token for access token. ' +
//      'Please close and re-launch the application again.');
//  });

//  return ret.promise;
//}

//function completePageReload(){
//  var d = Adapter.get().defer();
//  process.nextTick(function(){
//    d.resolve(getPreviousToken());
//  });
//  return d;
//}

//function readyArgs(){

//  var input = null;
//  var callback = function(){};
//  var errback = function(){};

//  if (arguments.length === 0){
//    throw "Can't call 'ready' without arguments";
//  } else if (arguments.length === 1){
//    callback = arguments[0];
//  } else if (arguments.length === 2){
//    if (typeof arguments[0] === 'function'){
//      callback = arguments[0];
//      errback = arguments[1];
//    } else if (typeof arguments[0] === 'object'){
//      input = arguments[0];
//      callback = arguments[1];
//    } else {
//      throw "ready called with invalid arguments";
//    }
//  } else if (arguments.length === 3){
//    input = arguments[0];
//    callback = arguments[1];
//    errback = arguments[2];
//  } else {
//    throw "ready called with invalid arguments";
//  }

//  return {
//    input: input,
//    callback: callback,
//    errback: errback
//  };
//}

//// Client settings
//BBClient.settings = {
//  // Replaces the browser's current URL
//  // using window.history.replaceState API.
//  // Default to true
//  replaceBrowserHistory: true,
  
//  // When set to true, this variable will fully utilize
//  // HTML5 sessionStorage API.
//  // Default to true
//  // This variable can be overriden to false by setting
//  // FHIR.oauth2.settings.fullSessionStorageSupport = false.
//  // When set to false, the sessionStorage will be keyed 
//  // by a state variable. This is to allow the embedded IE browser
//  // instances instantiated on a single thread to continue to
//  // function without having sessionStorage data shared 
//  // across the embedded IE instances.
//  fullSessionStorageSupport: true
//};

///**
//* Check the tokenResponse object to see if it is valid or not.
//* This is to handle the case of a refresh/reload of the page
//* after the token was already obtain.
//* @return boolean
//*/
//function validTokenResponse() {
//  if (BBClient.settings.fullSessionStorageSupport && sessionStorage.tokenResponse) {
//    return true;
//  } else {
//    if (!BBClient.settings.fullSessionStorageSupport) {
//      var state = urlParam('state') || (args.input && args.input.state);
//      return (state && sessionStorage[state] && JSON.parse(sessionStorage[state]).tokenResponse);
//    }
//  }
//  return false;
//}

//function isFakeOAuthToken(){
//  if (validTokenResponse()) {
//    var token = getPreviousToken();
//    if (token && token.state) {
//      var state = JSON.parse(sessionStorage[token.state]);
//      return state.fake_token_response;
//    }
//  }
//  return false;
//}

//BBClient.ready = function(input, callback, errback){

//  var args = readyArgs.apply(this, arguments);

//  // decide between token flow (implicit grant) and code flow (authorization code grant)
//  var isCode = urlParam('code') || (args.input && args.input.code);

//  var accessTokenResolver = null;

//  if (isFakeOAuthToken()) {
//    accessTokenResolver = completePageReload();
//    // In order to remove the state query parameter in the URL, both replaceBrowserHistory
//    // and fullSessionStorageSupport setting flags must be set to true. This allows querying the state
//    // through sessionStorage. If the browser does not support the replaceState method for the History Web API,
//    // or if either of the setting flags are false, the state property will be retrieved
//    // from the state query parameter in the URL.
//    if (window.history.replaceState
//      && BBClient.settings.replaceBrowserHistory
//      && BBClient.settings.fullSessionStorageSupport){
//      window.history.replaceState({}, "", window.location.toString().replace(window.location.search, ""));
//    }
//  } else {
//    if (validTokenResponse()) { // we're reloading after successful completion
//      // Check if 2 minutes from access token expiration timestamp
//      var tokenResponse = getPreviousToken();
//      var payloadCheck = jwt.decode(tokenResponse.access_token);
//      var nearExpTime = Math.floor(Date.now() / 1000) >= (payloadCheck['exp'] - 120);

//      if (tokenResponse.refresh_token
//        && tokenResponse.scope.indexOf('online_access') > -1
//        && nearExpTime) { // refresh token flow
//        accessTokenResolver = completeTokenRefreshFlow();
//      } else { // existing access token flow
//        accessTokenResolver = completePageReload();
//      }
//    } else if (isCode) { // code flow
//      accessTokenResolver = completeCodeFlow(args.input);
//    } else { // token flow
//      accessTokenResolver = completeTokenFlow(args.input);
//    }
//  }
//  accessTokenResolver.done(function(tokenResponse){

//    if (!tokenResponse || !tokenResponse.state) {
//      return args.errback("No 'state' parameter found in authorization response.");
//    }

//    // Save the tokenReponse object into sessionStorage
//    if (BBClient.settings.fullSessionStorageSupport) {
//      sessionStorage.tokenResponse = JSON.stringify(tokenResponse);
//    } else {
//      //Save the tokenResponse object and the state into sessionStorage keyed by state
//      var combinedObject = $.extend(true, JSON.parse(sessionStorage[tokenResponse.state]), { 'tokenResponse' : tokenResponse });
//      sessionStorage[tokenResponse.state] = JSON.stringify(combinedObject);
//    }

//    var state = JSON.parse(sessionStorage[tokenResponse.state]);
//    if (state.fake_token_response) {
//      tokenResponse = state.fake_token_response;
//    }

//    var fhirClientParams = {
//      serviceUrl: state.provider.url,
//      patientId: tokenResponse.patient
//    };
    
//    if (tokenResponse.id_token) {
//        var id_token = tokenResponse.id_token;
//        var payload = jwt.decode(id_token);
//        fhirClientParams["userId"] = payload["profile"]; 
//    }

//    if (tokenResponse.access_token !== undefined) {
//      fhirClientParams.auth = {
//        type: 'bearer',
//        token: tokenResponse.access_token
//      };
//    } else if (!state.fake_token_response){
//      return args.errback("Failed to obtain access token.");
//    }

//    var ret = FhirClient(fhirClientParams);
//    ret.state = JSON.parse(JSON.stringify(state));
//    ret.tokenResponse = JSON.parse(JSON.stringify(tokenResponse));
//    args.callback(ret);

//  }).fail(function(ret){
//    ret ? args.errback(ret) : args.errback("Failed to obtain access token.");
//  });

//};

//function providers(fhirServiceUrl, provider, callback, errback){

//  // Shim for pre-OAuth2 launch parameters
//  if (isBypassOAuth()){
//    process.nextTick(function(){
//      bypassOAuth(fhirServiceUrl, callback);
//    });
//    return;
//  }

//  // Skip conformance statement introspection when overriding provider setting are available
//  if (provider) {
//    provider['url'] = fhirServiceUrl;
//    process.nextTick(function(){
//      callback && callback(provider);
//    });
//    return;
//  }

//  Adapter.get().http({
//    method: "GET",
//    url: stripTrailingSlash(fhirServiceUrl) + "/metadata"
//  }).then(
//    function(r){
//      var res = {
//        "name": "SMART on FHIR Testing Server",
//        "description": "Dev server for SMART on FHIR",
//        "url": fhirServiceUrl,
//        "oauth2": {
//          "registration_uri": null,
//          "authorize_uri": null,
//          "token_uri": null
//        }
//      };

//      try {
//        var smartExtension = r.rest[0].security.extension.filter(function (e) {
//           return (e.url === "http://fhir-registry.smarthealthit.org/StructureDefinition/oauth-uris");
//        });

//        smartExtension[0].extension.forEach(function(arg, index, array){
//          if (arg.url === "register") {
//            res.oauth2.registration_uri = arg.valueUri;
//          } else if (arg.url === "authorize") {
//            res.oauth2.authorize_uri = arg.valueUri;
//          } else if (arg.url === "token") {
//            res.oauth2.token_uri = arg.valueUri;
//          }
//        });
//      }
//      catch (err) {
//        return errback && errback(err);
//      }

//      callback && callback(res);
//    }, function() {
//        errback && errback("Unable to fetch conformance statement");
//    }
//  );
//};

//var noAuthFhirProvider = function(serviceUrl){
//  return {
//    "oauth2": null,
//    "url": serviceUrl
//  }
//};

//function relative(url){
//  return (window.location.protocol + "//" + window.location.host + window.location.pathname).match(/(.*\/)[^\/]*/)[1] + url;
//}

//function isBypassOAuth(){
//  return (urlParam("fhirServiceUrl") && !(urlParam("iss")));
//}

//function bypassOAuth(fhirServiceUrl, callback){
//  callback && callback({
//    "oauth2": null,
//    "url": fhirServiceUrl || urlParam("fhirServiceUrl")
//  });
//}

//BBClient.authorize = function(params, errback){

//  if (!errback){
//    errback = function(){
//        console.log("Failed to discover authorization URL given", params);
//    };
//  }
  
//  // prevent inheritance of tokenResponse from parent window
//  delete sessionStorage.tokenResponse;

//  if (!params.client){
//    params = {
//      client: params
//    };
//  }

//  if (!params.response_type){
//    params.response_type = 'code';
//  }

//   if (!params.client.redirect_uri){
//    params.client.redirect_uri = relative("");
//  }

//  if (!params.client.redirect_uri.match(/:\/\//)){
//    params.client.redirect_uri = relative(params.client.redirect_uri);
//  }

//  var launch = urlParam("launch");
//  if (launch){
//    if (!params.client.scope.match(/launch/)){
//      params.client.scope += " launch";
//    }
//    params.client.launch = launch;
//  }

//  var server = urlParam("iss") || urlParam("fhirServiceUrl");
//  if (server){
//    if (!params.server){
//      params.server = server;
//    }
//  }

//  if (urlParam("patientId")){
//    params.fake_token_response = params.fake_token_response || {};
//    params.fake_token_response.patient = urlParam("patientId");
//  }

//  providers(params.server, params.provider, function(provider){

//    params.provider = provider;

//    var state = params.client.state || Guid.newGuid();
//    var client = params.client;

//    if (params.provider.oauth2 == null) {

//      // Adding state to tokenResponse object
//      if (BBClient.settings.fullSessionStorageSupport) { 
//        sessionStorage[state] = JSON.stringify(params);
//        sessionStorage.tokenResponse = JSON.stringify({state: state});
//      } else {
//        var combinedObject = $.extend(true, params, { 'tokenResponse' : {state: state} });
//        sessionStorage[state] = JSON.stringify(combinedObject);
//      }

//      window.location.href = client.redirect_uri + "?state="+encodeURIComponent(state);
//      return;
//    }
    
//    sessionStorage[state] = JSON.stringify(params);

//    console.log("sending client reg", params.client);

//    var redirect_to=params.provider.oauth2.authorize_uri + "?" + 
//      "client_id="+encodeURIComponent(client.client_id)+"&"+
//      "response_type="+encodeURIComponent(params.response_type)+"&"+
//      "scope="+encodeURIComponent(client.scope)+"&"+
//      "redirect_uri="+encodeURIComponent(client.redirect_uri)+"&"+
//      "state="+encodeURIComponent(state)+"&"+
//      "aud="+encodeURIComponent(params.server);
    
//    if (typeof client.launch !== 'undefined' && client.launch) {
//       redirect_to += "&launch="+encodeURIComponent(client.launch);
//    }

//    window.location.href = redirect_to;
//  }, errback);
//};

//BBClient.resolveAuthType = function (fhirServiceUrl, callback, errback) {

//      Adapter.get().http({
//         method: "GET",
//         url: stripTrailingSlash(fhirServiceUrl) + "/metadata"
//      }).then(function(r){
//          var type = "none";
          
//          try {
//            if (r.rest[0].security.service[0].coding[0].code.toLowerCase() === "smart-on-fhir") {
//                type = "oauth2";
//            }
//          }
//          catch (err) {
//          }

//          callback && callback(type);
//        }, function() {
//           errback && errback("Unable to fetch conformance statement");
//      });
//};

//}).call(this,require('_process'))
//},{"./adapter":45,"./client":47,"./guid":49,"_process":22,"jsonwebtoken":40}],47:[function(require,module,exports){
//var btoa = require('btoa');
//var Adapter = require('./adapter');

//module.exports = FhirClient;

//function ClientPrototype(){};
//var clientUtils = require('./utils');
//Object.keys(clientUtils).forEach(function(k){
//  ClientPrototype.prototype[k] = clientUtils[k];
//});

//function FhirClient(p) {
//  // p.serviceUrl
//  // p.auth {
//    //    type: 'none' | 'basic' | 'bearer'
//    //    basic --> username, password
//    //    bearer --> token
//    // }

//    var client = new ClientPrototype();
//    var fhir = Adapter.get().fhirjs;

//    var server = client.server = {
//      serviceUrl: p.serviceUrl,
//      auth: p.auth || {type: 'none'}
//    }
    
//    var auth = {};
    
//    if (server.auth.type === 'basic') {
//        auth = {
//            user: server.auth.username,
//            pass: server.auth.password
//        };
//    } else if (server.auth.type === 'bearer') {
//        auth = {
//            bearer: server.auth.token
//        };
//    }
    
//    client.api = fhir({
//        baseUrl: server.serviceUrl,
//        auth: auth
//    });
    
//    if (p.patientId) {
//        client.patient = {};
//        client.patient.id = p.patientId;
//        client.patient.api = fhir({
//            baseUrl: server.serviceUrl,
//            auth: auth,
//            patient: p.patientId
//        });
//        client.patient.read = function(){
//            return client.get({resource: 'Patient'});
//        };
//    }
    
//    var fhirAPI = (client.patient)?client.patient.api:client.api;

//    client.userId = p.userId;

//    server.auth = server.auth ||  {
//      type: 'none'
//    };

//    if (!client.server.serviceUrl || !client.server.serviceUrl.match(/https?:\/\/.+[^\/]$/)) {
//      throw "Must supply a `server` property whose `serviceUrl` begins with http(s) " + 
//        "and does NOT include a trailing slash. E.g. `https://fhir.aws.af.cm/fhir`";
//    }
    
//    client.authenticated = function(p) {
//      if (server.auth.type === 'none') {
//        return p;
//      }

//      var h;
//      if (server.auth.type === 'basic') {
//        h = "Basic " + btoa(server.auth.username + ":" + server.auth.password);
//      } else if (server.auth.type === 'bearer') {
//        h = "Bearer " + server.auth.token;
//      }
//      if (!p.headers) {p.headers = {};}
//      p.headers['Authorization'] = h
//      //p.beforeSend = function (xhr) { xhr.setRequestHeader ("Authorization", h); }

//      return p;
//    };

//    client.get = function(p) {
//        var ret = Adapter.get().defer();
//        var params = {type: p.resource};
        
//        if (p.id) {
//            params["id"] = p.id;
//        }
          
//        fhirAPI.read(params)
//            .then(function(res){
//                ret.resolve(res.data);
//            }, function(){
//                ret.reject("Could not fetch " + p.resource + " " + p.id);
//            });
          
//        return ret.promise;
//    };

//    client.user = {
//      'read': function(){
//        var userId = client.userId;
//        resource = userId.split("/")[0];
//        uid = userId.split("/")[1];
//        return client.get({resource: resource, id: uid});
//      }
//    };

//    function absolute(path, server) {
//      if (path.match(/^http/)) return path;
//      if (path.match(/^urn/)) return path;

//      // strip leading slash
//      if (path.charAt(0) == "/") path = path.substr(1);

//      return server.serviceUrl + '/' + path;
//    }

//    client.getBinary = function(url) {

//      var ret = Adapter.get().defer();

//      Adapter.get().http(client.authenticated({
//        type: 'GET',
//        url: url,
//        dataType: 'blob'
//      }))
//      .done(function(blob){
//        ret.resolve(blob);
//      })
//      .fail(function(){
//        ret.reject("Could not fetch " + url, arguments);
//      });
//      return ret.promise;
//    };

//    client.fetchBinary = function(path) {
//        var url = absolute(path, server);
//        return client.getBinary(url);
//    };

//    return client;
//}

//},{"./adapter":45,"./utils":50,"btoa":38}],48:[function(require,module,exports){
//var client = require('./client');
//var oauth2 = require('./bb-client');
//var adapter = require('./adapter');

//window.FHIR = {
//  client: client,
//  oauth2: oauth2
//};

//module.exports = adapter.set;
//},{"./adapter":45,"./bb-client":46,"./client":47}],49:[function(require,module,exports){
//var EMPTY = '00000000-0000-0000-0000-000000000000';

//var _padLeft = function (paddingString, width, replacementChar) {
//  return paddingString.length >= width ? paddingString : _padLeft(replacementChar + paddingString, width, replacementChar || ' ');
//};

//var _s4 = function (number) {
//  var hexadecimalResult = number.toString(16);
//  return _padLeft(hexadecimalResult, 4, '0');
//};

//var _cryptoGuid = function () {
//  var buffer = new window.Uint16Array(8);
//  window.crypto.getRandomValues(buffer);
//  return [_s4(buffer[0]) + _s4(buffer[1]), _s4(buffer[2]), _s4(buffer[3]), _s4(buffer[4]), _s4(buffer[5]) + _s4(buffer[6]) + _s4(buffer[7])].join('-');
//};

//var _guid = function () {
//  var currentDateMilliseconds = new Date().getTime();
//  return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function (currentChar) {
//    var randomChar = (currentDateMilliseconds + Math.random() * 16) % 16 | 0;
//    currentDateMilliseconds = Math.floor(currentDateMilliseconds / 16);
//    return (currentChar === 'x' ? randomChar : (randomChar & 0x7 | 0x8)).toString(16);
//  });
//};

//var create = function () {
//  var hasCrypto = typeof (window.crypto) != 'undefined',
//  hasRandomValues = hasCrypto && typeof (window.crypto.getRandomValues) != 'undefined';
//  return (hasCrypto && hasRandomValues) ? _cryptoGuid() : _guid();
//};

//module.exports =  {
//  newGuid: create,
//  empty: EMPTY
//};

//},{}],50:[function(require,module,exports){
//var utils = module.exports =  {};

//utils.byCodes = function(observations, property){

//  var bank = utils.byCode(observations, property);
//  function byCodes(){
//    var ret = [];
//    for (var i=0; i<arguments.length;i++){
//      var set = bank[arguments[i]];
//      if (set) {[].push.apply(ret, set);}
//    }
//    return ret;
//  }

//  return byCodes;
//};

//utils.byCode = function(observations, property){
//  var ret = {};
//  if (!Array.isArray(observations)){
//    observations = [observations];
//  }
//  observations.forEach(function(o){
//    if (o.resourceType === "Observation"){
//      if (o[property] && Array.isArray(o[property].coding)) {
//        o[property].coding.forEach(function (coding){
//          ret[coding.code] = ret[coding.code] || [];
//          ret[coding.code].push(o);
//        });
//      }
//    }
//  });
//  return ret;
//};

//function ensureNumerical(pq) {
//  if (typeof pq.value !== "number") {
//    throw "Found a non-numerical unit: " + pq.value + " " + pq.code;
//  }
//};

//utils.units = {
//  cm: function(pq){
//    ensureNumerical(pq);
//    if(pq.code == "cm") return pq.value;
//    if(pq.code == "m") return 100*pq.value;
//    if(pq.code == "in") return 2.54*pq.value;
//    if(pq.code == "[in_us]") return 2.54*pq.value;
//    if(pq.code == "[in_i]") return 2.54*pq.value;
//    throw "Unrecognized length unit: " + pq.code
//  },
//  kg: function(pq){
//    ensureNumerical(pq);
//    if(pq.code == "kg") return pq.value;
//    if(pq.code == "g") return pq.value / 1000;
//    if(pq.code.match(/lb/)) return pq.value / 2.20462;
//    if(pq.code.match(/oz/)) return pq.value / 35.274;
//    throw "Unrecognized weight unit: " + pq.code
//  },
//  any: function(pq){
//    ensureNumerical(pq);
//    return pq.value
//  }
//};



//},{}]},{},[44]);

window["FHIR"] =
/******/ (function (modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if (installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
                /******/
            }
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
                /******/
            };
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
            /******/
        }
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function (exports, name, getter) {
/******/ 		if (!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, { enumerable: true, get: getter });
                /******/
            }
            /******/
        };
/******/
/******/ 	// define __esModule on exports
/******/ 	__webpack_require__.r = function (exports) {
/******/ 		if (typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 			Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
                /******/
            }
/******/ 		Object.defineProperty(exports, '__esModule', { value: true });
            /******/
        };
/******/
/******/ 	// create a fake namespace object
/******/ 	// mode & 1: value is a module id, require it
/******/ 	// mode & 2: merge all properties of value into the ns
/******/ 	// mode & 4: return value when already ns object
/******/ 	// mode & 8|1: behave like require
/******/ 	__webpack_require__.t = function (value, mode) {
/******/ 		if (mode & 1) value = __webpack_require__(value);
/******/ 		if (mode & 8) return value;
/******/ 		if ((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;
/******/ 		var ns = Object.create(null);
/******/ 		__webpack_require__.r(ns);
/******/ 		Object.defineProperty(ns, 'default', { enumerable: true, value: value });
/******/ 		if (mode & 2 && typeof value != 'string') for (var key in value) __webpack_require__.d(ns, key, function (key) { return value[key]; }.bind(null, key));
/******/ 		return ns;
            /******/
        };
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function (module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
            /******/
        };
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function (object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = "./src/entry/browser.ts");
        /******/
    })
/************************************************************************/
/******/({

/***/ "./node_modules/@babel/runtime/helpers/asyncToGenerator.js":
/*!*****************************************************************!*\
  !*** ./node_modules/@babel/runtime/helpers/asyncToGenerator.js ***!
  \*****************************************************************/
/*! all exports used */
/***/ (function (module, exports) {

                function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) {
                    try {
                        var info = gen[key](arg);
                        var value = info.value;
                    } catch (error) {
                        reject(error);
                        return;
                    }

                    if (info.done) {
                        resolve(value);
                    } else {
                        Promise.resolve(value).then(_next, _throw);
                    }
                }

                function _asyncToGenerator(fn) {
                    return function () {
                        var self = this,
                            args = arguments;
                        return new Promise(function (resolve, reject) {
                            var gen = fn.apply(self, args);

                            function _next(value) {
                                asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value);
                            }

                            function _throw(err) {
                                asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err);
                            }

                            _next(undefined);
                        });
                    };
                }

                module.exports = _asyncToGenerator;

                /***/
            }),

/***/ "./node_modules/@babel/runtime/helpers/construct.js":
/*!**********************************************************!*\
  !*** ./node_modules/@babel/runtime/helpers/construct.js ***!
  \**********************************************************/
/*! all exports used */
/***/ (function (module, exports, __webpack_require__) {

                var setPrototypeOf = __webpack_require__(/*! ./setPrototypeOf */ "./node_modules/@babel/runtime/helpers/setPrototypeOf.js");

                var isNativeReflectConstruct = __webpack_require__(/*! ./isNativeReflectConstruct */ "./node_modules/@babel/runtime/helpers/isNativeReflectConstruct.js");

                function _construct(Parent, args, Class) {
                    if (isNativeReflectConstruct()) {
                        module.exports = _construct = Reflect.construct;
                    } else {
                        module.exports = _construct = function _construct(Parent, args, Class) {
                            var a = [null];
                            a.push.apply(a, args);
                            var Constructor = Function.bind.apply(Parent, a);
                            var instance = new Constructor();
                            if (Class) setPrototypeOf(instance, Class.prototype);
                            return instance;
                        };
                    }

                    return _construct.apply(null, arguments);
                }

                module.exports = _construct;

                /***/
            }),

/***/ "./node_modules/@babel/runtime/helpers/createClass.js":
/*!************************************************************!*\
  !*** ./node_modules/@babel/runtime/helpers/createClass.js ***!
  \************************************************************/
/*! all exports used */
/***/ (function (module, exports) {

                function _defineProperties(target, props) {
                    for (var i = 0; i < props.length; i++) {
                        var descriptor = props[i];
                        descriptor.enumerable = descriptor.enumerable || false;
                        descriptor.configurable = true;
                        if ("value" in descriptor) descriptor.writable = true;
                        Object.defineProperty(target, descriptor.key, descriptor);
                    }
                }

                function _createClass(Constructor, protoProps, staticProps) {
                    if (protoProps) _defineProperties(Constructor.prototype, protoProps);
                    if (staticProps) _defineProperties(Constructor, staticProps);
                    return Constructor;
                }

                module.exports = _createClass;

                /***/
            }),

/***/ "./node_modules/@babel/runtime/helpers/getPrototypeOf.js":
/*!***************************************************************!*\
  !*** ./node_modules/@babel/runtime/helpers/getPrototypeOf.js ***!
  \***************************************************************/
/*! all exports used */
/***/ (function (module, exports) {

                function _getPrototypeOf(o) {
                    module.exports = _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {
                        return o.__proto__ || Object.getPrototypeOf(o);
                    };
                    return _getPrototypeOf(o);
                }

                module.exports = _getPrototypeOf;

                /***/
            }),

/***/ "./node_modules/@babel/runtime/helpers/inheritsLoose.js":
/*!**************************************************************!*\
  !*** ./node_modules/@babel/runtime/helpers/inheritsLoose.js ***!
  \**************************************************************/
/*! all exports used */
/***/ (function (module, exports) {

                function _inheritsLoose(subClass, superClass) {
                    subClass.prototype = Object.create(superClass.prototype);
                    subClass.prototype.constructor = subClass;
                    subClass.__proto__ = superClass;
                }

                module.exports = _inheritsLoose;

                /***/
            }),

/***/ "./node_modules/@babel/runtime/helpers/interopRequireDefault.js":
/*!**********************************************************************!*\
  !*** ./node_modules/@babel/runtime/helpers/interopRequireDefault.js ***!
  \**********************************************************************/
/*! all exports used */
/***/ (function (module, exports) {

                function _interopRequireDefault(obj) {
                    return obj && obj.__esModule ? obj : {
                        "default": obj
                    };
                }

                module.exports = _interopRequireDefault;

                /***/
            }),

/***/ "./node_modules/@babel/runtime/helpers/isNativeFunction.js":
/*!*****************************************************************!*\
  !*** ./node_modules/@babel/runtime/helpers/isNativeFunction.js ***!
  \*****************************************************************/
/*! all exports used */
/***/ (function (module, exports) {

                function _isNativeFunction(fn) {
                    return Function.toString.call(fn).indexOf("[native code]") !== -1;
                }

                module.exports = _isNativeFunction;

                /***/
            }),

/***/ "./node_modules/@babel/runtime/helpers/isNativeReflectConstruct.js":
/*!*************************************************************************!*\
  !*** ./node_modules/@babel/runtime/helpers/isNativeReflectConstruct.js ***!
  \*************************************************************************/
/*! all exports used */
/***/ (function (module, exports) {

                function _isNativeReflectConstruct() {
                    if (typeof Reflect === "undefined" || !Reflect.construct) return false;
                    if (Reflect.construct.sham) return false;
                    if (typeof Proxy === "function") return true;

                    try {
                        Date.prototype.toString.call(Reflect.construct(Date, [], function () { }));
                        return true;
                    } catch (e) {
                        return false;
                    }
                }

                module.exports = _isNativeReflectConstruct;

                /***/
            }),

/***/ "./node_modules/@babel/runtime/helpers/setPrototypeOf.js":
/*!***************************************************************!*\
  !*** ./node_modules/@babel/runtime/helpers/setPrototypeOf.js ***!
  \***************************************************************/
/*! all exports used */
/***/ (function (module, exports) {

                function _setPrototypeOf(o, p) {
                    module.exports = _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {
                        o.__proto__ = p;
                        return o;
                    };

                    return _setPrototypeOf(o, p);
                }

                module.exports = _setPrototypeOf;

                /***/
            }),

/***/ "./node_modules/@babel/runtime/helpers/wrapNativeSuper.js":
/*!****************************************************************!*\
  !*** ./node_modules/@babel/runtime/helpers/wrapNativeSuper.js ***!
  \****************************************************************/
/*! all exports used */
/***/ (function (module, exports, __webpack_require__) {

                var getPrototypeOf = __webpack_require__(/*! ./getPrototypeOf */ "./node_modules/@babel/runtime/helpers/getPrototypeOf.js");

                var setPrototypeOf = __webpack_require__(/*! ./setPrototypeOf */ "./node_modules/@babel/runtime/helpers/setPrototypeOf.js");

                var isNativeFunction = __webpack_require__(/*! ./isNativeFunction */ "./node_modules/@babel/runtime/helpers/isNativeFunction.js");

                var construct = __webpack_require__(/*! ./construct */ "./node_modules/@babel/runtime/helpers/construct.js");

                function _wrapNativeSuper(Class) {
                    var _cache = typeof Map === "function" ? new Map() : undefined;

                    module.exports = _wrapNativeSuper = function _wrapNativeSuper(Class) {
                        if (Class === null || !isNativeFunction(Class)) return Class;

                        if (typeof Class !== "function") {
                            throw new TypeError("Super expression must either be null or a function");
                        }

                        if (typeof _cache !== "undefined") {
                            if (_cache.has(Class)) return _cache.get(Class);

                            _cache.set(Class, Wrapper);
                        }

                        function Wrapper() {
                            return construct(Class, arguments, getPrototypeOf(this).constructor);
                        }

                        Wrapper.prototype = Object.create(Class.prototype, {
                            constructor: {
                                value: Wrapper,
                                enumerable: false,
                                writable: true,
                                configurable: true
                            }
                        });
                        return setPrototypeOf(Wrapper, Class);
                    };

                    return _wrapNativeSuper(Class);
                }

                module.exports = _wrapNativeSuper;

                /***/
            }),

/***/ "./node_modules/@babel/runtime/node_modules/regenerator-runtime/runtime.js":
/*!*********************************************************************************!*\
  !*** ./node_modules/@babel/runtime/node_modules/regenerator-runtime/runtime.js ***!
  \*********************************************************************************/
/*! all exports used */
/***/ (function (module, exports, __webpack_require__) {

                /**
                 * Copyright (c) 2014-present, Facebook, Inc.
                 *
                 * This source code is licensed under the MIT license found in the
                 * LICENSE file in the root directory of this source tree.
                 */

                var runtime = (function (exports) {
                    "use strict";

                    var Op = Object.prototype;
                    var hasOwn = Op.hasOwnProperty;
                    var undefined; // More compressible than void 0.
                    var $Symbol = typeof Symbol === "function" ? Symbol : {};
                    var iteratorSymbol = $Symbol.iterator || "@@iterator";
                    var asyncIteratorSymbol = $Symbol.asyncIterator || "@@asyncIterator";
                    var toStringTagSymbol = $Symbol.toStringTag || "@@toStringTag";

                    function define(obj, key, value) {
                        Object.defineProperty(obj, key, {
                            value: value,
                            enumerable: true,
                            configurable: true,
                            writable: true
                        });
                        return obj[key];
                    }
                    try {
                        // IE 8 has a broken Object.defineProperty that only works on DOM objects.
                        define({}, "");
                    } catch (err) {
                        define = function (obj, key, value) {
                            return obj[key] = value;
                        };
                    }

                    function wrap(innerFn, outerFn, self, tryLocsList) {
                        // If outerFn provided and outerFn.prototype is a Generator, then outerFn.prototype instanceof Generator.
                        var protoGenerator = outerFn && outerFn.prototype instanceof Generator ? outerFn : Generator;
                        var generator = Object.create(protoGenerator.prototype);
                        var context = new Context(tryLocsList || []);

                        // The ._invoke method unifies the implementations of the .next,
                        // .throw, and .return methods.
                        generator._invoke = makeInvokeMethod(innerFn, self, context);

                        return generator;
                    }
                    exports.wrap = wrap;

                    // Try/catch helper to minimize deoptimizations. Returns a completion
                    // record like context.tryEntries[i].completion. This interface could
                    // have been (and was previously) designed to take a closure to be
                    // invoked without arguments, but in all the cases we care about we
                    // already have an existing method we want to call, so there's no need
                    // to create a new function object. We can even get away with assuming
                    // the method takes exactly one argument, since that happens to be true
                    // in every case, so we don't have to touch the arguments object. The
                    // only additional allocation required is the completion record, which
                    // has a stable shape and so hopefully should be cheap to allocate.
                    function tryCatch(fn, obj, arg) {
                        try {
                            return { type: "normal", arg: fn.call(obj, arg) };
                        } catch (err) {
                            return { type: "throw", arg: err };
                        }
                    }

                    var GenStateSuspendedStart = "suspendedStart";
                    var GenStateSuspendedYield = "suspendedYield";
                    var GenStateExecuting = "executing";
                    var GenStateCompleted = "completed";

                    // Returning this object from the innerFn has the same effect as
                    // breaking out of the dispatch switch statement.
                    var ContinueSentinel = {};

                    // Dummy constructor functions that we use as the .constructor and
                    // .constructor.prototype properties for functions that return Generator
                    // objects. For full spec compliance, you may wish to configure your
                    // minifier not to mangle the names of these two functions.
                    function Generator() { }
                    function GeneratorFunction() { }
                    function GeneratorFunctionPrototype() { }

                    // This is a polyfill for %IteratorPrototype% for environments that
                    // don't natively support it.
                    var IteratorPrototype = {};
                    IteratorPrototype[iteratorSymbol] = function () {
                        return this;
                    };

                    var getProto = Object.getPrototypeOf;
                    var NativeIteratorPrototype = getProto && getProto(getProto(values([])));
                    if (NativeIteratorPrototype &&
                        NativeIteratorPrototype !== Op &&
                        hasOwn.call(NativeIteratorPrototype, iteratorSymbol)) {
                        // This environment has a native %IteratorPrototype%; use it instead
                        // of the polyfill.
                        IteratorPrototype = NativeIteratorPrototype;
                    }

                    var Gp = GeneratorFunctionPrototype.prototype =
                        Generator.prototype = Object.create(IteratorPrototype);
                    GeneratorFunction.prototype = Gp.constructor = GeneratorFunctionPrototype;
                    GeneratorFunctionPrototype.constructor = GeneratorFunction;
                    GeneratorFunction.displayName = define(
                        GeneratorFunctionPrototype,
                        toStringTagSymbol,
                        "GeneratorFunction"
                    );

                    // Helper for defining the .next, .throw, and .return methods of the
                    // Iterator interface in terms of a single ._invoke method.
                    function defineIteratorMethods(prototype) {
                        ["next", "throw", "return"].forEach(function (method) {
                            define(prototype, method, function (arg) {
                                return this._invoke(method, arg);
                            });
                        });
                    }

                    exports.isGeneratorFunction = function (genFun) {
                        var ctor = typeof genFun === "function" && genFun.constructor;
                        return ctor
                            ? ctor === GeneratorFunction ||
                            // For the native GeneratorFunction constructor, the best we can
                            // do is to check its .name property.
                            (ctor.displayName || ctor.name) === "GeneratorFunction"
                            : false;
                    };

                    exports.mark = function (genFun) {
                        if (Object.setPrototypeOf) {
                            Object.setPrototypeOf(genFun, GeneratorFunctionPrototype);
                        } else {
                            genFun.__proto__ = GeneratorFunctionPrototype;
                            define(genFun, toStringTagSymbol, "GeneratorFunction");
                        }
                        genFun.prototype = Object.create(Gp);
                        return genFun;
                    };

                    // Within the body of any async function, `await x` is transformed to
                    // `yield regeneratorRuntime.awrap(x)`, so that the runtime can test
                    // `hasOwn.call(value, "__await")` to determine if the yielded value is
                    // meant to be awaited.
                    exports.awrap = function (arg) {
                        return { __await: arg };
                    };

                    function AsyncIterator(generator, PromiseImpl) {
                        function invoke(method, arg, resolve, reject) {
                            var record = tryCatch(generator[method], generator, arg);
                            if (record.type === "throw") {
                                reject(record.arg);
                            } else {
                                var result = record.arg;
                                var value = result.value;
                                if (value &&
                                    typeof value === "object" &&
                                    hasOwn.call(value, "__await")) {
                                    return PromiseImpl.resolve(value.__await).then(function (value) {
                                        invoke("next", value, resolve, reject);
                                    }, function (err) {
                                        invoke("throw", err, resolve, reject);
                                    });
                                }

                                return PromiseImpl.resolve(value).then(function (unwrapped) {
                                    // When a yielded Promise is resolved, its final value becomes
                                    // the .value of the Promise<{value,done}> result for the
                                    // current iteration.
                                    result.value = unwrapped;
                                    resolve(result);
                                }, function (error) {
                                    // If a rejected Promise was yielded, throw the rejection back
                                    // into the async generator function so it can be handled there.
                                    return invoke("throw", error, resolve, reject);
                                });
                            }
                        }

                        var previousPromise;

                        function enqueue(method, arg) {
                            function callInvokeWithMethodAndArg() {
                                return new PromiseImpl(function (resolve, reject) {
                                    invoke(method, arg, resolve, reject);
                                });
                            }

                            return previousPromise =
                                // If enqueue has been called before, then we want to wait until
                                // all previous Promises have been resolved before calling invoke,
                                // so that results are always delivered in the correct order. If
                                // enqueue has not been called before, then it is important to
                                // call invoke immediately, without waiting on a callback to fire,
                                // so that the async generator function has the opportunity to do
                                // any necessary setup in a predictable way. This predictability
                                // is why the Promise constructor synchronously invokes its
                                // executor callback, and why async functions synchronously
                                // execute code before the first await. Since we implement simple
                                // async functions in terms of async generators, it is especially
                                // important to get this right, even though it requires care.
                                previousPromise ? previousPromise.then(
                                    callInvokeWithMethodAndArg,
                                    // Avoid propagating failures to Promises returned by later
                                    // invocations of the iterator.
                                    callInvokeWithMethodAndArg
                                ) : callInvokeWithMethodAndArg();
                        }

                        // Define the unified helper method that is used to implement .next,
                        // .throw, and .return (see defineIteratorMethods).
                        this._invoke = enqueue;
                    }

                    defineIteratorMethods(AsyncIterator.prototype);
                    AsyncIterator.prototype[asyncIteratorSymbol] = function () {
                        return this;
                    };
                    exports.AsyncIterator = AsyncIterator;

                    // Note that simple async functions are implemented on top of
                    // AsyncIterator objects; they just return a Promise for the value of
                    // the final result produced by the iterator.
                    exports.async = function (innerFn, outerFn, self, tryLocsList, PromiseImpl) {
                        if (PromiseImpl === void 0) PromiseImpl = Promise;

                        var iter = new AsyncIterator(
                            wrap(innerFn, outerFn, self, tryLocsList),
                            PromiseImpl
                        );

                        return exports.isGeneratorFunction(outerFn)
                            ? iter // If outerFn is a generator, return the full iterator.
                            : iter.next().then(function (result) {
                                return result.done ? result.value : iter.next();
                            });
                    };

                    function makeInvokeMethod(innerFn, self, context) {
                        var state = GenStateSuspendedStart;

                        return function invoke(method, arg) {
                            if (state === GenStateExecuting) {
                                throw new Error("Generator is already running");
                            }

                            if (state === GenStateCompleted) {
                                if (method === "throw") {
                                    throw arg;
                                }

                                // Be forgiving, per 25.3.3.3.3 of the spec:
                                // https://people.mozilla.org/~jorendorff/es6-draft.html#sec-generatorresume
                                return doneResult();
                            }

                            context.method = method;
                            context.arg = arg;

                            while (true) {
                                var delegate = context.delegate;
                                if (delegate) {
                                    var delegateResult = maybeInvokeDelegate(delegate, context);
                                    if (delegateResult) {
                                        if (delegateResult === ContinueSentinel) continue;
                                        return delegateResult;
                                    }
                                }

                                if (context.method === "next") {
                                    // Setting context._sent for legacy support of Babel's
                                    // function.sent implementation.
                                    context.sent = context._sent = context.arg;

                                } else if (context.method === "throw") {
                                    if (state === GenStateSuspendedStart) {
                                        state = GenStateCompleted;
                                        throw context.arg;
                                    }

                                    context.dispatchException(context.arg);

                                } else if (context.method === "return") {
                                    context.abrupt("return", context.arg);
                                }

                                state = GenStateExecuting;

                                var record = tryCatch(innerFn, self, context);
                                if (record.type === "normal") {
                                    // If an exception is thrown from innerFn, we leave state ===
                                    // GenStateExecuting and loop back for another invocation.
                                    state = context.done
                                        ? GenStateCompleted
                                        : GenStateSuspendedYield;

                                    if (record.arg === ContinueSentinel) {
                                        continue;
                                    }

                                    return {
                                        value: record.arg,
                                        done: context.done
                                    };

                                } else if (record.type === "throw") {
                                    state = GenStateCompleted;
                                    // Dispatch the exception by looping back around to the
                                    // context.dispatchException(context.arg) call above.
                                    context.method = "throw";
                                    context.arg = record.arg;
                                }
                            }
                        };
                    }

                    // Call delegate.iterator[context.method](context.arg) and handle the
                    // result, either by returning a { value, done } result from the
                    // delegate iterator, or by modifying context.method and context.arg,
                    // setting context.delegate to null, and returning the ContinueSentinel.
                    function maybeInvokeDelegate(delegate, context) {
                        var method = delegate.iterator[context.method];
                        if (method === undefined) {
                            // A .throw or .return when the delegate iterator has no .throw
                            // method always terminates the yield* loop.
                            context.delegate = null;

                            if (context.method === "throw") {
                                // Note: ["return"] must be used for ES3 parsing compatibility.
                                if (delegate.iterator["return"]) {
                                    // If the delegate iterator has a return method, give it a
                                    // chance to clean up.
                                    context.method = "return";
                                    context.arg = undefined;
                                    maybeInvokeDelegate(delegate, context);

                                    if (context.method === "throw") {
                                        // If maybeInvokeDelegate(context) changed context.method from
                                        // "return" to "throw", let that override the TypeError below.
                                        return ContinueSentinel;
                                    }
                                }

                                context.method = "throw";
                                context.arg = new TypeError(
                                    "The iterator does not provide a 'throw' method");
                            }

                            return ContinueSentinel;
                        }

                        var record = tryCatch(method, delegate.iterator, context.arg);

                        if (record.type === "throw") {
                            context.method = "throw";
                            context.arg = record.arg;
                            context.delegate = null;
                            return ContinueSentinel;
                        }

                        var info = record.arg;

                        if (!info) {
                            context.method = "throw";
                            context.arg = new TypeError("iterator result is not an object");
                            context.delegate = null;
                            return ContinueSentinel;
                        }

                        if (info.done) {
                            // Assign the result of the finished delegate to the temporary
                            // variable specified by delegate.resultName (see delegateYield).
                            context[delegate.resultName] = info.value;

                            // Resume execution at the desired location (see delegateYield).
                            context.next = delegate.nextLoc;

                            // If context.method was "throw" but the delegate handled the
                            // exception, let the outer generator proceed normally. If
                            // context.method was "next", forget context.arg since it has been
                            // "consumed" by the delegate iterator. If context.method was
                            // "return", allow the original .return call to continue in the
                            // outer generator.
                            if (context.method !== "return") {
                                context.method = "next";
                                context.arg = undefined;
                            }

                        } else {
                            // Re-yield the result returned by the delegate method.
                            return info;
                        }

                        // The delegate iterator is finished, so forget it and continue with
                        // the outer generator.
                        context.delegate = null;
                        return ContinueSentinel;
                    }

                    // Define Generator.prototype.{next,throw,return} in terms of the
                    // unified ._invoke helper method.
                    defineIteratorMethods(Gp);

                    define(Gp, toStringTagSymbol, "Generator");

                    // A Generator should always return itself as the iterator object when the
                    // @@iterator function is called on it. Some browsers' implementations of the
                    // iterator prototype chain incorrectly implement this, causing the Generator
                    // object to not be returned from this call. This ensures that doesn't happen.
                    // See https://github.com/facebook/regenerator/issues/274 for more details.
                    Gp[iteratorSymbol] = function () {
                        return this;
                    };

                    Gp.toString = function () {
                        return "[object Generator]";
                    };

                    function pushTryEntry(locs) {
                        var entry = { tryLoc: locs[0] };

                        if (1 in locs) {
                            entry.catchLoc = locs[1];
                        }

                        if (2 in locs) {
                            entry.finallyLoc = locs[2];
                            entry.afterLoc = locs[3];
                        }

                        this.tryEntries.push(entry);
                    }

                    function resetTryEntry(entry) {
                        var record = entry.completion || {};
                        record.type = "normal";
                        delete record.arg;
                        entry.completion = record;
                    }

                    function Context(tryLocsList) {
                        // The root entry object (effectively a try statement without a catch
                        // or a finally block) gives us a place to store values thrown from
                        // locations where there is no enclosing try statement.
                        this.tryEntries = [{ tryLoc: "root" }];
                        tryLocsList.forEach(pushTryEntry, this);
                        this.reset(true);
                    }

                    exports.keys = function (object) {
                        var keys = [];
                        for (var key in object) {
                            keys.push(key);
                        }
                        keys.reverse();

                        // Rather than returning an object with a next method, we keep
                        // things simple and return the next function itself.
                        return function next() {
                            while (keys.length) {
                                var key = keys.pop();
                                if (key in object) {
                                    next.value = key;
                                    next.done = false;
                                    return next;
                                }
                            }

                            // To avoid creating an additional object, we just hang the .value
                            // and .done properties off the next function object itself. This
                            // also ensures that the minifier will not anonymize the function.
                            next.done = true;
                            return next;
                        };
                    };

                    function values(iterable) {
                        if (iterable) {
                            var iteratorMethod = iterable[iteratorSymbol];
                            if (iteratorMethod) {
                                return iteratorMethod.call(iterable);
                            }

                            if (typeof iterable.next === "function") {
                                return iterable;
                            }

                            if (!isNaN(iterable.length)) {
                                var i = -1, next = function next() {
                                    while (++i < iterable.length) {
                                        if (hasOwn.call(iterable, i)) {
                                            next.value = iterable[i];
                                            next.done = false;
                                            return next;
                                        }
                                    }

                                    next.value = undefined;
                                    next.done = true;

                                    return next;
                                };

                                return next.next = next;
                            }
                        }

                        // Return an iterator with no values.
                        return { next: doneResult };
                    }
                    exports.values = values;

                    function doneResult() {
                        return { value: undefined, done: true };
                    }

                    Context.prototype = {
                        constructor: Context,

                        reset: function (skipTempReset) {
                            this.prev = 0;
                            this.next = 0;
                            // Resetting context._sent for legacy support of Babel's
                            // function.sent implementation.
                            this.sent = this._sent = undefined;
                            this.done = false;
                            this.delegate = null;

                            this.method = "next";
                            this.arg = undefined;

                            this.tryEntries.forEach(resetTryEntry);

                            if (!skipTempReset) {
                                for (var name in this) {
                                    // Not sure about the optimal order of these conditions:
                                    if (name.charAt(0) === "t" &&
                                        hasOwn.call(this, name) &&
                                        !isNaN(+name.slice(1))) {
                                        this[name] = undefined;
                                    }
                                }
                            }
                        },

                        stop: function () {
                            this.done = true;

                            var rootEntry = this.tryEntries[0];
                            var rootRecord = rootEntry.completion;
                            if (rootRecord.type === "throw") {
                                throw rootRecord.arg;
                            }

                            return this.rval;
                        },

                        dispatchException: function (exception) {
                            if (this.done) {
                                throw exception;
                            }

                            var context = this;
                            function handle(loc, caught) {
                                record.type = "throw";
                                record.arg = exception;
                                context.next = loc;

                                if (caught) {
                                    // If the dispatched exception was caught by a catch block,
                                    // then let that catch block handle the exception normally.
                                    context.method = "next";
                                    context.arg = undefined;
                                }

                                return !!caught;
                            }

                            for (var i = this.tryEntries.length - 1; i >= 0; --i) {
                                var entry = this.tryEntries[i];
                                var record = entry.completion;

                                if (entry.tryLoc === "root") {
                                    // Exception thrown outside of any try block that could handle
                                    // it, so set the completion value of the entire function to
                                    // throw the exception.
                                    return handle("end");
                                }

                                if (entry.tryLoc <= this.prev) {
                                    var hasCatch = hasOwn.call(entry, "catchLoc");
                                    var hasFinally = hasOwn.call(entry, "finallyLoc");

                                    if (hasCatch && hasFinally) {
                                        if (this.prev < entry.catchLoc) {
                                            return handle(entry.catchLoc, true);
                                        } else if (this.prev < entry.finallyLoc) {
                                            return handle(entry.finallyLoc);
                                        }

                                    } else if (hasCatch) {
                                        if (this.prev < entry.catchLoc) {
                                            return handle(entry.catchLoc, true);
                                        }

                                    } else if (hasFinally) {
                                        if (this.prev < entry.finallyLoc) {
                                            return handle(entry.finallyLoc);
                                        }

                                    } else {
                                        throw new Error("try statement without catch or finally");
                                    }
                                }
                            }
                        },

                        abrupt: function (type, arg) {
                            for (var i = this.tryEntries.length - 1; i >= 0; --i) {
                                var entry = this.tryEntries[i];
                                if (entry.tryLoc <= this.prev &&
                                    hasOwn.call(entry, "finallyLoc") &&
                                    this.prev < entry.finallyLoc) {
                                    var finallyEntry = entry;
                                    break;
                                }
                            }

                            if (finallyEntry &&
                                (type === "break" ||
                                    type === "continue") &&
                                finallyEntry.tryLoc <= arg &&
                                arg <= finallyEntry.finallyLoc) {
                                // Ignore the finally entry if control is not jumping to a
                                // location outside the try/catch block.
                                finallyEntry = null;
                            }

                            var record = finallyEntry ? finallyEntry.completion : {};
                            record.type = type;
                            record.arg = arg;

                            if (finallyEntry) {
                                this.method = "next";
                                this.next = finallyEntry.finallyLoc;
                                return ContinueSentinel;
                            }

                            return this.complete(record);
                        },

                        complete: function (record, afterLoc) {
                            if (record.type === "throw") {
                                throw record.arg;
                            }

                            if (record.type === "break" ||
                                record.type === "continue") {
                                this.next = record.arg;
                            } else if (record.type === "return") {
                                this.rval = this.arg = record.arg;
                                this.method = "return";
                                this.next = "end";
                            } else if (record.type === "normal" && afterLoc) {
                                this.next = afterLoc;
                            }

                            return ContinueSentinel;
                        },

                        finish: function (finallyLoc) {
                            for (var i = this.tryEntries.length - 1; i >= 0; --i) {
                                var entry = this.tryEntries[i];
                                if (entry.finallyLoc === finallyLoc) {
                                    this.complete(entry.completion, entry.afterLoc);
                                    resetTryEntry(entry);
                                    return ContinueSentinel;
                                }
                            }
                        },

                        "catch": function (tryLoc) {
                            for (var i = this.tryEntries.length - 1; i >= 0; --i) {
                                var entry = this.tryEntries[i];
                                if (entry.tryLoc === tryLoc) {
                                    var record = entry.completion;
                                    if (record.type === "throw") {
                                        var thrown = record.arg;
                                        resetTryEntry(entry);
                                    }
                                    return thrown;
                                }
                            }

                            // The context.catch method must only be called with a location
                            // argument that corresponds to a known catch block.
                            throw new Error("illegal catch attempt");
                        },

                        delegateYield: function (iterable, resultName, nextLoc) {
                            this.delegate = {
                                iterator: values(iterable),
                                resultName: resultName,
                                nextLoc: nextLoc
                            };

                            if (this.method === "next") {
                                // Deliberately forget the last sent value so that we don't
                                // accidentally pass it on to the delegate.
                                this.arg = undefined;
                            }

                            return ContinueSentinel;
                        }
                    };

                    // Regardless of whether this script is executing as a CommonJS module
                    // or not, return the runtime object so that we can declare the variable
                    // regeneratorRuntime in the outer scope, which allows this module to be
                    // injected easily by `bin/regenerator --include-runtime script.js`.
                    return exports;

                }(
                    // If this script is executing as a CommonJS module, use module.exports
                    // as the regeneratorRuntime namespace. Otherwise create a new empty
                    // object. Either way, the resulting object will be used to initialize
                    // the regeneratorRuntime variable at the top of this file.
                    true ? module.exports : undefined
                ));

                try {
                    regeneratorRuntime = runtime;
                } catch (accidentalStrictMode) {
                    // This module should not be running in strict mode, so the above
                    // assignment should always work unless something is misconfigured. Just
                    // in case runtime.js accidentally runs in strict mode, we can escape
                    // strict mode using a global Function call. This could conceivably fail
                    // if a Content Security Policy forbids using Function, but in that case
                    // the proper solution is to fix the accidental strict mode problem. If
                    // you've misconfigured your bundler to force strict mode and applied a
                    // CSP to forbid Function, and you're not willing to fix either of those
                    // problems, please detail your unique predicament in a GitHub issue.
                    Function("r", "regeneratorRuntime = r")(runtime);
                }


                /***/
            }),

/***/ "./node_modules/@babel/runtime/regenerator/index.js":
/*!**********************************************************!*\
  !*** ./node_modules/@babel/runtime/regenerator/index.js ***!
  \**********************************************************/
/*! all exports used */
/***/ (function (module, exports, __webpack_require__) {

                module.exports = __webpack_require__(/*! regenerator-runtime */ "./node_modules/@babel/runtime/node_modules/regenerator-runtime/runtime.js");


                /***/
            }),

/***/ "./node_modules/abortcontroller-polyfill/dist/abortcontroller-polyfill-only.js":
/*!*************************************************************************************!*\
  !*** ./node_modules/abortcontroller-polyfill/dist/abortcontroller-polyfill-only.js ***!
  \*************************************************************************************/
/*! all exports used */
/***/ (function (module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function (global) {
                    var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_RESULT__; (function (factory) {
                        true ? !(__WEBPACK_AMD_DEFINE_FACTORY__ = (factory),
                            __WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ?
                                (__WEBPACK_AMD_DEFINE_FACTORY__.call(exports, __webpack_require__, exports, module)) :
                                __WEBPACK_AMD_DEFINE_FACTORY__),
                            __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__)) :
                            undefined;
                    }((function () {
                        'use strict';

                        function _classCallCheck(instance, Constructor) {
                            if (!(instance instanceof Constructor)) {
                                throw new TypeError("Cannot call a class as a function");
                            }
                        }

                        function _defineProperties(target, props) {
                            for (var i = 0; i < props.length; i++) {
                                var descriptor = props[i];
                                descriptor.enumerable = descriptor.enumerable || false;
                                descriptor.configurable = true;
                                if ("value" in descriptor) descriptor.writable = true;
                                Object.defineProperty(target, descriptor.key, descriptor);
                            }
                        }

                        function _createClass(Constructor, protoProps, staticProps) {
                            if (protoProps) _defineProperties(Constructor.prototype, protoProps);
                            if (staticProps) _defineProperties(Constructor, staticProps);
                            return Constructor;
                        }

                        function _inherits(subClass, superClass) {
                            if (typeof superClass !== "function" && superClass !== null) {
                                throw new TypeError("Super expression must either be null or a function");
                            }

                            subClass.prototype = Object.create(superClass && superClass.prototype, {
                                constructor: {
                                    value: subClass,
                                    writable: true,
                                    configurable: true
                                }
                            });
                            if (superClass) _setPrototypeOf(subClass, superClass);
                        }

                        function _getPrototypeOf(o) {
                            _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {
                                return o.__proto__ || Object.getPrototypeOf(o);
                            };
                            return _getPrototypeOf(o);
                        }

                        function _setPrototypeOf(o, p) {
                            _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {
                                o.__proto__ = p;
                                return o;
                            };

                            return _setPrototypeOf(o, p);
                        }

                        function _isNativeReflectConstruct() {
                            if (typeof Reflect === "undefined" || !Reflect.construct) return false;
                            if (Reflect.construct.sham) return false;
                            if (typeof Proxy === "function") return true;

                            try {
                                Date.prototype.toString.call(Reflect.construct(Date, [], function () { }));
                                return true;
                            } catch (e) {
                                return false;
                            }
                        }

                        function _assertThisInitialized(self) {
                            if (self === void 0) {
                                throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
                            }

                            return self;
                        }

                        function _possibleConstructorReturn(self, call) {
                            if (call && (typeof call === "object" || typeof call === "function")) {
                                return call;
                            }

                            return _assertThisInitialized(self);
                        }

                        function _createSuper(Derived) {
                            var hasNativeReflectConstruct = _isNativeReflectConstruct();

                            return function _createSuperInternal() {
                                var Super = _getPrototypeOf(Derived),
                                    result;

                                if (hasNativeReflectConstruct) {
                                    var NewTarget = _getPrototypeOf(this).constructor;

                                    result = Reflect.construct(Super, arguments, NewTarget);
                                } else {
                                    result = Super.apply(this, arguments);
                                }

                                return _possibleConstructorReturn(this, result);
                            };
                        }

                        function _superPropBase(object, property) {
                            while (!Object.prototype.hasOwnProperty.call(object, property)) {
                                object = _getPrototypeOf(object);
                                if (object === null) break;
                            }

                            return object;
                        }

                        function _get(target, property, receiver) {
                            if (typeof Reflect !== "undefined" && Reflect.get) {
                                _get = Reflect.get;
                            } else {
                                _get = function _get(target, property, receiver) {
                                    var base = _superPropBase(target, property);

                                    if (!base) return;
                                    var desc = Object.getOwnPropertyDescriptor(base, property);

                                    if (desc.get) {
                                        return desc.get.call(receiver);
                                    }

                                    return desc.value;
                                };
                            }

                            return _get(target, property, receiver || target);
                        }

                        var Emitter = /*#__PURE__*/function () {
                            function Emitter() {
                                _classCallCheck(this, Emitter);

                                Object.defineProperty(this, 'listeners', {
                                    value: {},
                                    writable: true,
                                    configurable: true
                                });
                            }

                            _createClass(Emitter, [{
                                key: "addEventListener",
                                value: function addEventListener(type, callback) {
                                    if (!(type in this.listeners)) {
                                        this.listeners[type] = [];
                                    }

                                    this.listeners[type].push(callback);
                                }
                            }, {
                                key: "removeEventListener",
                                value: function removeEventListener(type, callback) {
                                    if (!(type in this.listeners)) {
                                        return;
                                    }

                                    var stack = this.listeners[type];

                                    for (var i = 0, l = stack.length; i < l; i++) {
                                        if (stack[i] === callback) {
                                            stack.splice(i, 1);
                                            return;
                                        }
                                    }
                                }
                            }, {
                                key: "dispatchEvent",
                                value: function dispatchEvent(event) {
                                    var _this = this;

                                    if (!(event.type in this.listeners)) {
                                        return;
                                    }

                                    var debounce = function debounce(callback) {
                                        setTimeout(function () {
                                            return callback.call(_this, event);
                                        });
                                    };

                                    var stack = this.listeners[event.type];

                                    for (var i = 0, l = stack.length; i < l; i++) {
                                        debounce(stack[i]);
                                    }

                                    return !event.defaultPrevented;
                                }
                            }]);

                            return Emitter;
                        }();

                        var AbortSignal = /*#__PURE__*/function (_Emitter) {
                            _inherits(AbortSignal, _Emitter);

                            var _super = _createSuper(AbortSignal);

                            function AbortSignal() {
                                var _this2;

                                _classCallCheck(this, AbortSignal);

                                _this2 = _super.call(this); // Some versions of babel does not transpile super() correctly for IE <= 10, if the parent
                                // constructor has failed to run, then "this.listeners" will still be undefined and then we call
                                // the parent constructor directly instead as a workaround. For general details, see babel bug:
                                // https://github.com/babel/babel/issues/3041
                                // This hack was added as a fix for the issue described here:
                                // https://github.com/Financial-Times/polyfill-library/pull/59#issuecomment-477558042

                                if (!_this2.listeners) {
                                    Emitter.call(_assertThisInitialized(_this2));
                                } // Compared to assignment, Object.defineProperty makes properties non-enumerable by default and
                                // we want Object.keys(new AbortController().signal) to be [] for compat with the native impl


                                Object.defineProperty(_assertThisInitialized(_this2), 'aborted', {
                                    value: false,
                                    writable: true,
                                    configurable: true
                                });
                                Object.defineProperty(_assertThisInitialized(_this2), 'onabort', {
                                    value: null,
                                    writable: true,
                                    configurable: true
                                });
                                return _this2;
                            }

                            _createClass(AbortSignal, [{
                                key: "toString",
                                value: function toString() {
                                    return '[object AbortSignal]';
                                }
                            }, {
                                key: "dispatchEvent",
                                value: function dispatchEvent(event) {
                                    if (event.type === 'abort') {
                                        this.aborted = true;

                                        if (typeof this.onabort === 'function') {
                                            this.onabort.call(this, event);
                                        }
                                    }

                                    _get(_getPrototypeOf(AbortSignal.prototype), "dispatchEvent", this).call(this, event);
                                }
                            }]);

                            return AbortSignal;
                        }(Emitter);
                        var AbortController = /*#__PURE__*/function () {
                            function AbortController() {
                                _classCallCheck(this, AbortController);

                                // Compared to assignment, Object.defineProperty makes properties non-enumerable by default and
                                // we want Object.keys(new AbortController()) to be [] for compat with the native impl
                                Object.defineProperty(this, 'signal', {
                                    value: new AbortSignal(),
                                    writable: true,
                                    configurable: true
                                });
                            }

                            _createClass(AbortController, [{
                                key: "abort",
                                value: function abort() {
                                    var event;

                                    try {
                                        event = new Event('abort');
                                    } catch (e) {
                                        if (typeof document !== 'undefined') {
                                            if (!document.createEvent) {
                                                // For Internet Explorer 8:
                                                event = document.createEventObject();
                                                event.type = 'abort';
                                            } else {
                                                // For Internet Explorer 11:
                                                event = document.createEvent('Event');
                                                event.initEvent('abort', false, false);
                                            }
                                        } else {
                                            // Fallback where document isn't available:
                                            event = {
                                                type: 'abort',
                                                bubbles: false,
                                                cancelable: false
                                            };
                                        }
                                    }

                                    this.signal.dispatchEvent(event);
                                }
                            }, {
                                key: "toString",
                                value: function toString() {
                                    return '[object AbortController]';
                                }
                            }]);

                            return AbortController;
                        }();

                        if (typeof Symbol !== 'undefined' && Symbol.toStringTag) {
                            // These are necessary to make sure that we get correct output for:
                            // Object.prototype.toString.call(new AbortController())
                            AbortController.prototype[Symbol.toStringTag] = 'AbortController';
                            AbortSignal.prototype[Symbol.toStringTag] = 'AbortSignal';
                        }

                        function polyfillNeeded(self) {
                            if (self.__FORCE_INSTALL_ABORTCONTROLLER_POLYFILL) {
                                console.log('__FORCE_INSTALL_ABORTCONTROLLER_POLYFILL=true is set, will force install polyfill');
                                return true;
                            } // Note that the "unfetch" minimal fetch polyfill defines fetch() without
                            // defining window.Request, and this polyfill need to work on top of unfetch
                            // so the below feature detection needs the !self.AbortController part.
                            // The Request.prototype check is also needed because Safari versions 11.1.2
                            // up to and including 12.1.x has a window.AbortController present but still
                            // does NOT correctly implement abortable fetch:
                            // https://bugs.webkit.org/show_bug.cgi?id=174980#c2


                            return typeof self.Request === 'function' && !self.Request.prototype.hasOwnProperty('signal') || !self.AbortController;
                        }

                        (function (self) {

                            if (!polyfillNeeded(self)) {
                                return;
                            }

                            self.AbortController = AbortController;
                            self.AbortSignal = AbortSignal;
                        })(typeof self !== 'undefined' ? self : global);

                    })));

                    /* WEBPACK VAR INJECTION */
                }.call(this, __webpack_require__(/*! ./../../webpack/buildin/global.js */ "./node_modules/webpack/buildin/global.js")))

                /***/
            }),

/***/ "./node_modules/core-js/internals/a-function.js":
/*!******************************************************!*\
  !*** ./node_modules/core-js/internals/a-function.js ***!
  \******************************************************/
/*! all exports used */
/***/ (function (module, exports) {

                module.exports = function (it) {
                    if (typeof it != 'function') {
                        throw TypeError(String(it) + ' is not a function');
                    } return it;
                };


                /***/
            }),

/***/ "./node_modules/core-js/internals/a-possible-prototype.js":
/*!****************************************************************!*\
  !*** ./node_modules/core-js/internals/a-possible-prototype.js ***!
  \****************************************************************/
/*! all exports used */
/***/ (function (module, exports, __webpack_require__) {

                var isObject = __webpack_require__(/*! ../internals/is-object */ "./node_modules/core-js/internals/is-object.js");

                module.exports = function (it) {
                    if (!isObject(it) && it !== null) {
                        throw TypeError("Can't set " + String(it) + ' as a prototype');
                    } return it;
                };


                /***/
            }),

/***/ "./node_modules/core-js/internals/add-to-unscopables.js":
/*!**************************************************************!*\
  !*** ./node_modules/core-js/internals/add-to-unscopables.js ***!
  \**************************************************************/
/*! all exports used */
/***/ (function (module, exports, __webpack_require__) {

                var wellKnownSymbol = __webpack_require__(/*! ../internals/well-known-symbol */ "./node_modules/core-js/internals/well-known-symbol.js");
                var create = __webpack_require__(/*! ../internals/object-create */ "./node_modules/core-js/internals/object-create.js");
                var definePropertyModule = __webpack_require__(/*! ../internals/object-define-property */ "./node_modules/core-js/internals/object-define-property.js");

                var UNSCOPABLES = wellKnownSymbol('unscopables');
                var ArrayPrototype = Array.prototype;

                // Array.prototype[@@unscopables]
                // https://tc39.github.io/ecma262/#sec-array.prototype-@@unscopables
                if (ArrayPrototype[UNSCOPABLES] == undefined) {
                    definePropertyModule.f(ArrayPrototype, UNSCOPABLES, {
                        configurable: true,
                        value: create(null)
                    });
                }

                // add a key to Array.prototype[@@unscopables]
                module.exports = function (key) {
                    ArrayPrototype[UNSCOPABLES][key] = true;
                };


                /***/
            }),

/***/ "./node_modules/core-js/internals/advance-string-index.js":
/*!****************************************************************!*\
  !*** ./node_modules/core-js/internals/advance-string-index.js ***!
  \****************************************************************/
/*! all exports used */
/***/ (function (module, exports, __webpack_require__) {

                "use strict";

                var charAt = __webpack_require__(/*! ../internals/string-multibyte */ "./node_modules/core-js/internals/string-multibyte.js").charAt;

                // `AdvanceStringIndex` abstract operation
                // https://tc39.github.io/ecma262/#sec-advancestringindex
                module.exports = function (S, index, unicode) {
                    return index + (unicode ? charAt(S, index).length : 1);
                };


                /***/
            }),

/***/ "./node_modules/core-js/internals/an-instance.js":
/*!*******************************************************!*\
  !*** ./node_modules/core-js/internals/an-instance.js ***!
  \*******************************************************/
/*! all exports used */
/***/ (function (module, exports) {

                module.exports = function (it, Constructor, name) {
                    if (!(it instanceof Constructor)) {
                        throw TypeError('Incorrect ' + (name ? name + ' ' : '') + 'invocation');
                    } return it;
                };


                /***/
            }),

/***/ "./node_modules/core-js/internals/an-object.js":
/*!*****************************************************!*\
  !*** ./node_modules/core-js/internals/an-object.js ***!
  \*****************************************************/
/*! all exports used */
/***/ (function (module, exports, __webpack_require__) {

                var isObject = __webpack_require__(/*! ../internals/is-object */ "./node_modules/core-js/internals/is-object.js");

                module.exports = function (it) {
                    if (!isObject(it)) {
                        throw TypeError(String(it) + ' is not an object');
                    } return it;
                };


                /***/
            }),

/***/ "./node_modules/core-js/internals/array-for-each.js":
/*!**********************************************************!*\
  !*** ./node_modules/core-js/internals/array-for-each.js ***!
  \**********************************************************/
/*! all exports used */
/***/ (function (module, exports, __webpack_require__) {

                "use strict";

                var $forEach = __webpack_require__(/*! ../internals/array-iteration */ "./node_modules/core-js/internals/array-iteration.js").forEach;
                var arrayMethodIsStrict = __webpack_require__(/*! ../internals/array-method-is-strict */ "./node_modules/core-js/internals/array-method-is-strict.js");
                var arrayMethodUsesToLength = __webpack_require__(/*! ../internals/array-method-uses-to-length */ "./node_modules/core-js/internals/array-method-uses-to-length.js");

                var STRICT_METHOD = arrayMethodIsStrict('forEach');
                var USES_TO_LENGTH = arrayMethodUsesToLength('forEach');

                // `Array.prototype.forEach` method implementation
                // https://tc39.github.io/ecma262/#sec-array.prototype.foreach
                module.exports = (!STRICT_METHOD || !USES_TO_LENGTH) ? function forEach(callbackfn /* , thisArg */) {
                    return $forEach(this, callbackfn, arguments.length > 1 ? arguments[1] : undefined);
                } : [].forEach;


                /***/
            }),

/***/ "./node_modules/core-js/internals/array-from.js":
/*!******************************************************!*\
  !*** ./node_modules/core-js/internals/array-from.js ***!
  \******************************************************/
/*! all exports used */
/***/ (function (module, exports, __webpack_require__) {

                "use strict";

                var bind = __webpack_require__(/*! ../internals/function-bind-context */ "./node_modules/core-js/internals/function-bind-context.js");
                var toObject = __webpack_require__(/*! ../internals/to-object */ "./node_modules/core-js/internals/to-object.js");
                var callWithSafeIterationClosing = __webpack_require__(/*! ../internals/call-with-safe-iteration-closing */ "./node_modules/core-js/internals/call-with-safe-iteration-closing.js");
                var isArrayIteratorMethod = __webpack_require__(/*! ../internals/is-array-iterator-method */ "./node_modules/core-js/internals/is-array-iterator-method.js");
                var toLength = __webpack_require__(/*! ../internals/to-length */ "./node_modules/core-js/internals/to-length.js");
                var createProperty = __webpack_require__(/*! ../internals/create-property */ "./node_modules/core-js/internals/create-property.js");
                var getIteratorMethod = __webpack_require__(/*! ../internals/get-iterator-method */ "./node_modules/core-js/internals/get-iterator-method.js");

                // `Array.from` method implementation
                // https://tc39.github.io/ecma262/#sec-array.from
                module.exports = function from(arrayLike /* , mapfn = undefined, thisArg = undefined */) {
                    var O = toObject(arrayLike);
                    var C = typeof this == 'function' ? this : Array;
                    var argumentsLength = arguments.length;
                    var mapfn = argumentsLength > 1 ? arguments[1] : undefined;
                    var mapping = mapfn !== undefined;
                    var iteratorMethod = getIteratorMethod(O);
                    var index = 0;
                    var length, result, step, iterator, next, value;
                    if (mapping) mapfn = bind(mapfn, argumentsLength > 2 ? arguments[2] : undefined, 2);
                    // if the target is not iterable or it's an array with the default iterator - use a simple case
                    if (iteratorMethod != undefined && !(C == Array && isArrayIteratorMethod(iteratorMethod))) {
                        iterator = iteratorMethod.call(O);
                        next = iterator.next;
                        result = new C();
                        for (; !(step = next.call(iterator)).done; index++) {
                            value = mapping ? callWithSafeIterationClosing(iterator, mapfn, [step.value, index], true) : step.value;
                            createProperty(result, index, value);
                        }
                    } else {
                        length = toLength(O.length);
                        result = new C(length);
                        for (; length > index; index++) {
                            value = mapping ? mapfn(O[index], index) : O[index];
                            createProperty(result, index, value);
                        }
                    }
                    result.length = index;
                    return result;
                };


                /***/
            }),

/***/ "./node_modules/core-js/internals/array-includes.js":
/*!**********************************************************!*\
  !*** ./node_modules/core-js/internals/array-includes.js ***!
  \**********************************************************/
/*! all exports used */
/***/ (function (module, exports, __webpack_require__) {

                var toIndexedObject = __webpack_require__(/*! ../internals/to-indexed-object */ "./node_modules/core-js/internals/to-indexed-object.js");
                var toLength = __webpack_require__(/*! ../internals/to-length */ "./node_modules/core-js/internals/to-length.js");
                var toAbsoluteIndex = __webpack_require__(/*! ../internals/to-absolute-index */ "./node_modules/core-js/internals/to-absolute-index.js");

                // `Array.prototype.{ indexOf, includes }` methods implementation
                var createMethod = function (IS_INCLUDES) {
                    return function ($this, el, fromIndex) {
                        var O = toIndexedObject($this);
                        var length = toLength(O.length);
                        var index = toAbsoluteIndex(fromIndex, length);
                        var value;
                        // Array#includes uses SameValueZero equality algorithm
                        // eslint-disable-next-line no-self-compare
                        if (IS_INCLUDES && el != el) while (length > index) {
                            value = O[index++];
                            // eslint-disable-next-line no-self-compare
                            if (value != value) return true;
                            // Array#indexOf ignores holes, Array#includes - not
                        } else for (; length > index; index++) {
                            if ((IS_INCLUDES || index in O) && O[index] === el) return IS_INCLUDES || index || 0;
                        } return !IS_INCLUDES && -1;
                    };
                };

                module.exports = {
                    // `Array.prototype.includes` method
                    // https://tc39.github.io/ecma262/#sec-array.prototype.includes
                    includes: createMethod(true),
                    // `Array.prototype.indexOf` method
                    // https://tc39.github.io/ecma262/#sec-array.prototype.indexof
                    indexOf: createMethod(false)
                };


                /***/
            }),

/***/ "./node_modules/core-js/internals/array-iteration.js":
/*!***********************************************************!*\
  !*** ./node_modules/core-js/internals/array-iteration.js ***!
  \***********************************************************/
/*! all exports used */
/***/ (function (module, exports, __webpack_require__) {

                var bind = __webpack_require__(/*! ../internals/function-bind-context */ "./node_modules/core-js/internals/function-bind-context.js");
                var IndexedObject = __webpack_require__(/*! ../internals/indexed-object */ "./node_modules/core-js/internals/indexed-object.js");
                var toObject = __webpack_require__(/*! ../internals/to-object */ "./node_modules/core-js/internals/to-object.js");
                var toLength = __webpack_require__(/*! ../internals/to-length */ "./node_modules/core-js/internals/to-length.js");
                var arraySpeciesCreate = __webpack_require__(/*! ../internals/array-species-create */ "./node_modules/core-js/internals/array-species-create.js");

                var push = [].push;

                // `Array.prototype.{ forEach, map, filter, some, every, find, findIndex }` methods implementation
                var createMethod = function (TYPE) {
                    var IS_MAP = TYPE == 1;
                    var IS_FILTER = TYPE == 2;
                    var IS_SOME = TYPE == 3;
                    var IS_EVERY = TYPE == 4;
                    var IS_FIND_INDEX = TYPE == 6;
                    var NO_HOLES = TYPE == 5 || IS_FIND_INDEX;
                    return function ($this, callbackfn, that, specificCreate) {
                        var O = toObject($this);
                        var self = IndexedObject(O);
                        var boundFunction = bind(callbackfn, that, 3);
                        var length = toLength(self.length);
                        var index = 0;
                        var create = specificCreate || arraySpeciesCreate;
                        var target = IS_MAP ? create($this, length) : IS_FILTER ? create($this, 0) : undefined;
                        var value, result;
                        for (; length > index; index++) if (NO_HOLES || index in self) {
                            value = self[index];
                            result = boundFunction(value, index, O);
                            if (TYPE) {
                                if (IS_MAP) target[index] = result; // map
                                else if (result) switch (TYPE) {
                                    case 3: return true;              // some
                                    case 5: return value;             // find
                                    case 6: return index;             // findIndex
                                    case 2: push.call(target, value); // filter
                                } else if (IS_EVERY) return false;  // every
                            }
                        }
                        return IS_FIND_INDEX ? -1 : IS_SOME || IS_EVERY ? IS_EVERY : target;
                    };
                };

                module.exports = {
                    // `Array.prototype.forEach` method
                    // https://tc39.github.io/ecma262/#sec-array.prototype.foreach
                    forEach: createMethod(0),
                    // `Array.prototype.map` method
                    // https://tc39.github.io/ecma262/#sec-array.prototype.map
                    map: createMethod(1),
                    // `Array.prototype.filter` method
                    // https://tc39.github.io/ecma262/#sec-array.prototype.filter
                    filter: createMethod(2),
                    // `Array.prototype.some` method
                    // https://tc39.github.io/ecma262/#sec-array.prototype.some
                    some: createMethod(3),
                    // `Array.prototype.every` method
                    // https://tc39.github.io/ecma262/#sec-array.prototype.every
                    every: createMethod(4),
                    // `Array.prototype.find` method
                    // https://tc39.github.io/ecma262/#sec-array.prototype.find
                    find: createMethod(5),
                    // `Array.prototype.findIndex` method
                    // https://tc39.github.io/ecma262/#sec-array.prototype.findIndex
                    findIndex: createMethod(6)
                };


                /***/
            }),

/***/ "./node_modules/core-js/internals/array-method-has-species-support.js":
/*!****************************************************************************!*\
  !*** ./node_modules/core-js/internals/array-method-has-species-support.js ***!
  \****************************************************************************/
/*! all exports used */
/***/ (function (module, exports, __webpack_require__) {

                var fails = __webpack_require__(/*! ../internals/fails */ "./node_modules/core-js/internals/fails.js");
                var wellKnownSymbol = __webpack_require__(/*! ../internals/well-known-symbol */ "./node_modules/core-js/internals/well-known-symbol.js");
                var V8_VERSION = __webpack_require__(/*! ../internals/engine-v8-version */ "./node_modules/core-js/internals/engine-v8-version.js");

                var SPECIES = wellKnownSymbol('species');

                module.exports = function (METHOD_NAME) {
                    // We can't use this feature detection in V8 since it causes
                    // deoptimization and serious performance degradation
                    // https://github.com/zloirock/core-js/issues/677
                    return V8_VERSION >= 51 || !fails(function () {
                        var array = [];
                        var constructor = array.constructor = {};
                        constructor[SPECIES] = function () {
                            return { foo: 1 };
                        };
                        return array[METHOD_NAME](Boolean).foo !== 1;
                    });
                };


                /***/
            }),

/***/ "./node_modules/core-js/internals/array-method-is-strict.js":
/*!******************************************************************!*\
  !*** ./node_modules/core-js/internals/array-method-is-strict.js ***!
  \******************************************************************/
/*! all exports used */
/***/ (function (module, exports, __webpack_require__) {

                "use strict";

                var fails = __webpack_require__(/*! ../internals/fails */ "./node_modules/core-js/internals/fails.js");

                module.exports = function (METHOD_NAME, argument) {
                    var method = [][METHOD_NAME];
                    return !!method && fails(function () {
                        // eslint-disable-next-line no-useless-call,no-throw-literal
                        method.call(null, argument || function () { throw 1; }, 1);
                    });
                };


                /***/
            }),

/***/ "./node_modules/core-js/internals/array-method-uses-to-length.js":
/*!***********************************************************************!*\
  !*** ./node_modules/core-js/internals/array-method-uses-to-length.js ***!
  \***********************************************************************/
/*! all exports used */
/***/ (function (module, exports, __webpack_require__) {

                var DESCRIPTORS = __webpack_require__(/*! ../internals/descriptors */ "./node_modules/core-js/internals/descriptors.js");
                var fails = __webpack_require__(/*! ../internals/fails */ "./node_modules/core-js/internals/fails.js");
                var has = __webpack_require__(/*! ../internals/has */ "./node_modules/core-js/internals/has.js");

                var defineProperty = Object.defineProperty;
                var cache = {};

                var thrower = function (it) { throw it; };

                module.exports = function (METHOD_NAME, options) {
                    if (has(cache, METHOD_NAME)) return cache[METHOD_NAME];
                    if (!options) options = {};
                    var method = [][METHOD_NAME];
                    var ACCESSORS = has(options, 'ACCESSORS') ? options.ACCESSORS : false;
                    var argument0 = has(options, 0) ? options[0] : thrower;
                    var argument1 = has(options, 1) ? options[1] : undefined;

                    return cache[METHOD_NAME] = !!method && !fails(function () {
                        if (ACCESSORS && !DESCRIPTORS) return true;
                        var O = { length: -1 };

                        if (ACCESSORS) defineProperty(O, 1, { enumerable: true, get: thrower });
                        else O[1] = 1;

                        method.call(O, argument0, argument1);
                    });
                };


                /***/
            }),

/***/ "./node_modules/core-js/internals/array-reduce.js":
/*!********************************************************!*\
  !*** ./node_modules/core-js/internals/array-reduce.js ***!
  \********************************************************/
/*! all exports used */
/***/ (function (module, exports, __webpack_require__) {

                var aFunction = __webpack_require__(/*! ../internals/a-function */ "./node_modules/core-js/internals/a-function.js");
                var toObject = __webpack_require__(/*! ../internals/to-object */ "./node_modules/core-js/internals/to-object.js");
                var IndexedObject = __webpack_require__(/*! ../internals/indexed-object */ "./node_modules/core-js/internals/indexed-object.js");
                var toLength = __webpack_require__(/*! ../internals/to-length */ "./node_modules/core-js/internals/to-length.js");

                // `Array.prototype.{ reduce, reduceRight }` methods implementation
                var createMethod = function (IS_RIGHT) {
                    return function (that, callbackfn, argumentsLength, memo) {
                        aFunction(callbackfn);
                        var O = toObject(that);
                        var self = IndexedObject(O);
                        var length = toLength(O.length);
                        var index = IS_RIGHT ? length - 1 : 0;
                        var i = IS_RIGHT ? -1 : 1;
                        if (argumentsLength < 2) while (true) {
                            if (index in self) {
                                memo = self[index];
                                index += i;
                                break;
                            }
                            index += i;
                            if (IS_RIGHT ? index < 0 : length <= index) {
                                throw TypeError('Reduce of empty array with no initial value');
                            }
                        }
                        for (; IS_RIGHT ? index >= 0 : length > index; index += i) if (index in self) {
                            memo = callbackfn(memo, self[index], index, O);
                        }
                        return memo;
                    };
                };

                module.exports = {
                    // `Array.prototype.reduce` method
                    // https://tc39.github.io/ecma262/#sec-array.prototype.reduce
                    left: createMethod(false),
                    // `Array.prototype.reduceRight` method
                    // https://tc39.github.io/ecma262/#sec-array.prototype.reduceright
                    right: createMethod(true)
                };


                /***/
            }),

/***/ "./node_modules/core-js/internals/array-species-create.js":
/*!****************************************************************!*\
  !*** ./node_modules/core-js/internals/array-species-create.js ***!
  \****************************************************************/
/*! all exports used */
/***/ (function (module, exports, __webpack_require__) {

                var isObject = __webpack_require__(/*! ../internals/is-object */ "./node_modules/core-js/internals/is-object.js");
                var isArray = __webpack_require__(/*! ../internals/is-array */ "./node_modules/core-js/internals/is-array.js");
                var wellKnownSymbol = __webpack_require__(/*! ../internals/well-known-symbol */ "./node_modules/core-js/internals/well-known-symbol.js");

                var SPECIES = wellKnownSymbol('species');

                // `ArraySpeciesCreate` abstract operation
                // https://tc39.github.io/ecma262/#sec-arrayspeciescreate
                module.exports = function (originalArray, length) {
                    var C;
                    if (isArray(originalArray)) {
                        C = originalArray.constructor;
                        // cross-realm fallback
                        if (typeof C == 'function' && (C === Array || isArray(C.prototype))) C = undefined;
                        else if (isObject(C)) {
                            C = C[SPECIES];
                            if (C === null) C = undefined;
                        }
                    } return new (C === undefined ? Array : C)(length === 0 ? 0 : length);
                };


                /***/
            }),

/***/ "./node_modules/core-js/internals/call-with-safe-iteration-closing.js":
/*!****************************************************************************!*\
  !*** ./node_modules/core-js/internals/call-with-safe-iteration-closing.js ***!
  \****************************************************************************/
/*! all exports used */
/***/ (function (module, exports, __webpack_require__) {

                var anObject = __webpack_require__(/*! ../internals/an-object */ "./node_modules/core-js/internals/an-object.js");

                // call something on iterator step with safe closing on error
                module.exports = function (iterator, fn, value, ENTRIES) {
                    try {
                        return ENTRIES ? fn(anObject(value)[0], value[1]) : fn(value);
                        // 7.4.6 IteratorClose(iterator, completion)
                    } catch (error) {
                        var returnMethod = iterator['return'];
                        if (returnMethod !== undefined) anObject(returnMethod.call(iterator));
                        throw error;
                    }
                };


                /***/
            }),

/***/ "./node_modules/core-js/internals/check-correctness-of-iteration.js":
/*!**************************************************************************!*\
  !*** ./node_modules/core-js/internals/check-correctness-of-iteration.js ***!
  \**************************************************************************/
/*! all exports used */
/***/ (function (module, exports, __webpack_require__) {

                var wellKnownSymbol = __webpack_require__(/*! ../internals/well-known-symbol */ "./node_modules/core-js/internals/well-known-symbol.js");

                var ITERATOR = wellKnownSymbol('iterator');
                var SAFE_CLOSING = false;

                try {
                    var called = 0;
                    var iteratorWithReturn = {
                        next: function () {
                            return { done: !!called++ };
                        },
                        'return': function () {
                            SAFE_CLOSING = true;
                        }
                    };
                    iteratorWithReturn[ITERATOR] = function () {
                        return this;
                    };
                    // eslint-disable-next-line no-throw-literal
                    Array.from(iteratorWithReturn, function () { throw 2; });
                } catch (error) { /* empty */ }

                module.exports = function (exec, SKIP_CLOSING) {
                    if (!SKIP_CLOSING && !SAFE_CLOSING) return false;
                    var ITERATION_SUPPORT = false;
                    try {
                        var object = {};
                        object[ITERATOR] = function () {
                            return {
                                next: function () {
                                    return { done: ITERATION_SUPPORT = true };
                                }
                            };
                        };
                        exec(object);
                    } catch (error) { /* empty */ }
                    return ITERATION_SUPPORT;
                };


                /***/
            }),

/***/ "./node_modules/core-js/internals/classof-raw.js":
/*!*******************************************************!*\
  !*** ./node_modules/core-js/internals/classof-raw.js ***!
  \*******************************************************/
/*! all exports used */
/***/ (function (module, exports) {

                var toString = {}.toString;

                module.exports = function (it) {
                    return toString.call(it).slice(8, -1);
                };


                /***/
            }),

/***/ "./node_modules/core-js/internals/classof.js":
/*!***************************************************!*\
  !*** ./node_modules/core-js/internals/classof.js ***!
  \***************************************************/
/*! all exports used */
/***/ (function (module, exports, __webpack_require__) {

                var TO_STRING_TAG_SUPPORT = __webpack_require__(/*! ../internals/to-string-tag-support */ "./node_modules/core-js/internals/to-string-tag-support.js");
                var classofRaw = __webpack_require__(/*! ../internals/classof-raw */ "./node_modules/core-js/internals/classof-raw.js");
                var wellKnownSymbol = __webpack_require__(/*! ../internals/well-known-symbol */ "./node_modules/core-js/internals/well-known-symbol.js");

                var TO_STRING_TAG = wellKnownSymbol('toStringTag');
                // ES3 wrong here
                var CORRECT_ARGUMENTS = classofRaw(function () { return arguments; }()) == 'Arguments';

                // fallback for IE11 Script Access Denied error
                var tryGet = function (it, key) {
                    try {
                        return it[key];
                    } catch (error) { /* empty */ }
                };

                // getting tag from ES6+ `Object.prototype.toString`
                module.exports = TO_STRING_TAG_SUPPORT ? classofRaw : function (it) {
                    var O, tag, result;
                    return it === undefined ? 'Undefined' : it === null ? 'Null'
                        // @@toStringTag case
                        : typeof (tag = tryGet(O = Object(it), TO_STRING_TAG)) == 'string' ? tag
                            // builtinTag case
                            : CORRECT_ARGUMENTS ? classofRaw(O)
                                // ES3 arguments fallback
                                : (result = classofRaw(O)) == 'Object' && typeof O.callee == 'function' ? 'Arguments' : result;
                };


                /***/
            }),

/***/ "./node_modules/core-js/internals/copy-constructor-properties.js":
/*!***********************************************************************!*\
  !*** ./node_modules/core-js/internals/copy-constructor-properties.js ***!
  \***********************************************************************/
/*! all exports used */
/***/ (function (module, exports, __webpack_require__) {

                var has = __webpack_require__(/*! ../internals/has */ "./node_modules/core-js/internals/has.js");
                var ownKeys = __webpack_require__(/*! ../internals/own-keys */ "./node_modules/core-js/internals/own-keys.js");
                var getOwnPropertyDescriptorModule = __webpack_require__(/*! ../internals/object-get-own-property-descriptor */ "./node_modules/core-js/internals/object-get-own-property-descriptor.js");
                var definePropertyModule = __webpack_require__(/*! ../internals/object-define-property */ "./node_modules/core-js/internals/object-define-property.js");

                module.exports = function (target, source) {
                    var keys = ownKeys(source);
                    var defineProperty = definePropertyModule.f;
                    var getOwnPropertyDescriptor = getOwnPropertyDescriptorModule.f;
                    for (var i = 0; i < keys.length; i++) {
                        var key = keys[i];
                        if (!has(target, key)) defineProperty(target, key, getOwnPropertyDescriptor(source, key));
                    }
                };


                /***/
            }),

/***/ "./node_modules/core-js/internals/correct-prototype-getter.js":
/*!********************************************************************!*\
  !*** ./node_modules/core-js/internals/correct-prototype-getter.js ***!
  \********************************************************************/
/*! all exports used */
/***/ (function (module, exports, __webpack_require__) {

                var fails = __webpack_require__(/*! ../internals/fails */ "./node_modules/core-js/internals/fails.js");

                module.exports = !fails(function () {
                    function F() { /* empty */ }
                    F.prototype.constructor = null;
                    return Object.getPrototypeOf(new F()) !== F.prototype;
                });


                /***/
            }),

/***/ "./node_modules/core-js/internals/create-html.js":
/*!*******************************************************!*\
  !*** ./node_modules/core-js/internals/create-html.js ***!
  \*******************************************************/
/*! all exports used */
/***/ (function (module, exports, __webpack_require__) {

                var requireObjectCoercible = __webpack_require__(/*! ../internals/require-object-coercible */ "./node_modules/core-js/internals/require-object-coercible.js");

                var quot = /"/g;

                // B.2.3.2.1 CreateHTML(string, tag, attribute, value)
                // https://tc39.github.io/ecma262/#sec-createhtml
                module.exports = function (string, tag, attribute, value) {
                    var S = String(requireObjectCoercible(string));
                    var p1 = '<' + tag;
                    if (attribute !== '') p1 += ' ' + attribute + '="' + String(value).replace(quot, '&quot;') + '"';
                    return p1 + '>' + S + '</' + tag + '>';
                };


                /***/
            }),

/***/ "./node_modules/core-js/internals/create-iterator-constructor.js":
/*!***********************************************************************!*\
  !*** ./node_modules/core-js/internals/create-iterator-constructor.js ***!
  \***********************************************************************/
/*! all exports used */
/***/ (function (module, exports, __webpack_require__) {

                "use strict";

                var IteratorPrototype = __webpack_require__(/*! ../internals/iterators-core */ "./node_modules/core-js/internals/iterators-core.js").IteratorPrototype;
                var create = __webpack_require__(/*! ../internals/object-create */ "./node_modules/core-js/internals/object-create.js");
                var createPropertyDescriptor = __webpack_require__(/*! ../internals/create-property-descriptor */ "./node_modules/core-js/internals/create-property-descriptor.js");
                var setToStringTag = __webpack_require__(/*! ../internals/set-to-string-tag */ "./node_modules/core-js/internals/set-to-string-tag.js");
                var Iterators = __webpack_require__(/*! ../internals/iterators */ "./node_modules/core-js/internals/iterators.js");

                var returnThis = function () { return this; };

                module.exports = function (IteratorConstructor, NAME, next) {
                    var TO_STRING_TAG = NAME + ' Iterator';
                    IteratorConstructor.prototype = create(IteratorPrototype, { next: createPropertyDescriptor(1, next) });
                    setToStringTag(IteratorConstructor, TO_STRING_TAG, false, true);
                    Iterators[TO_STRING_TAG] = returnThis;
                    return IteratorConstructor;
                };


                /***/
            }),

/***/ "./node_modules/core-js/internals/create-non-enumerable-property.js":
/*!**************************************************************************!*\
  !*** ./node_modules/core-js/internals/create-non-enumerable-property.js ***!
  \**************************************************************************/
/*! all exports used */
/***/ (function (module, exports, __webpack_require__) {

                var DESCRIPTORS = __webpack_require__(/*! ../internals/descriptors */ "./node_modules/core-js/internals/descriptors.js");
                var definePropertyModule = __webpack_require__(/*! ../internals/object-define-property */ "./node_modules/core-js/internals/object-define-property.js");
                var createPropertyDescriptor = __webpack_require__(/*! ../internals/create-property-descriptor */ "./node_modules/core-js/internals/create-property-descriptor.js");

                module.exports = DESCRIPTORS ? function (object, key, value) {
                    return definePropertyModule.f(object, key, createPropertyDescriptor(1, value));
                } : function (object, key, value) {
                    object[key] = value;
                    return object;
                };


                /***/
            }),

/***/ "./node_modules/core-js/internals/create-property-descriptor.js":
/*!**********************************************************************!*\
  !*** ./node_modules/core-js/internals/create-property-descriptor.js ***!
  \**********************************************************************/
/*! all exports used */
/***/ (function (module, exports) {

                module.exports = function (bitmap, value) {
                    return {
                        enumerable: !(bitmap & 1),
                        configurable: !(bitmap & 2),
                        writable: !(bitmap & 4),
                        value: value
                    };
                };


                /***/
            }),

/***/ "./node_modules/core-js/internals/create-property.js":
/*!***********************************************************!*\
  !*** ./node_modules/core-js/internals/create-property.js ***!
  \***********************************************************/
/*! all exports used */
/***/ (function (module, exports, __webpack_require__) {

                "use strict";

                var toPrimitive = __webpack_require__(/*! ../internals/to-primitive */ "./node_modules/core-js/internals/to-primitive.js");
                var definePropertyModule = __webpack_require__(/*! ../internals/object-define-property */ "./node_modules/core-js/internals/object-define-property.js");
                var createPropertyDescriptor = __webpack_require__(/*! ../internals/create-property-descriptor */ "./node_modules/core-js/internals/create-property-descriptor.js");

                module.exports = function (object, key, value) {
                    var propertyKey = toPrimitive(key);
                    if (propertyKey in object) definePropertyModule.f(object, propertyKey, createPropertyDescriptor(0, value));
                    else object[propertyKey] = value;
                };


                /***/
            }),

/***/ "./node_modules/core-js/internals/define-iterator.js":
/*!***********************************************************!*\
  !*** ./node_modules/core-js/internals/define-iterator.js ***!
  \***********************************************************/
/*! all exports used */
/***/ (function (module, exports, __webpack_require__) {

                "use strict";

                var $ = __webpack_require__(/*! ../internals/export */ "./node_modules/core-js/internals/export.js");
                var createIteratorConstructor = __webpack_require__(/*! ../internals/create-iterator-constructor */ "./node_modules/core-js/internals/create-iterator-constructor.js");
                var getPrototypeOf = __webpack_require__(/*! ../internals/object-get-prototype-of */ "./node_modules/core-js/internals/object-get-prototype-of.js");
                var setPrototypeOf = __webpack_require__(/*! ../internals/object-set-prototype-of */ "./node_modules/core-js/internals/object-set-prototype-of.js");
                var setToStringTag = __webpack_require__(/*! ../internals/set-to-string-tag */ "./node_modules/core-js/internals/set-to-string-tag.js");
                var createNonEnumerableProperty = __webpack_require__(/*! ../internals/create-non-enumerable-property */ "./node_modules/core-js/internals/create-non-enumerable-property.js");
                var redefine = __webpack_require__(/*! ../internals/redefine */ "./node_modules/core-js/internals/redefine.js");
                var wellKnownSymbol = __webpack_require__(/*! ../internals/well-known-symbol */ "./node_modules/core-js/internals/well-known-symbol.js");
                var IS_PURE = __webpack_require__(/*! ../internals/is-pure */ "./node_modules/core-js/internals/is-pure.js");
                var Iterators = __webpack_require__(/*! ../internals/iterators */ "./node_modules/core-js/internals/iterators.js");
                var IteratorsCore = __webpack_require__(/*! ../internals/iterators-core */ "./node_modules/core-js/internals/iterators-core.js");

                var IteratorPrototype = IteratorsCore.IteratorPrototype;
                var BUGGY_SAFARI_ITERATORS = IteratorsCore.BUGGY_SAFARI_ITERATORS;
                var ITERATOR = wellKnownSymbol('iterator');
                var KEYS = 'keys';
                var VALUES = 'values';
                var ENTRIES = 'entries';

                var returnThis = function () { return this; };

                module.exports = function (Iterable, NAME, IteratorConstructor, next, DEFAULT, IS_SET, FORCED) {
                    createIteratorConstructor(IteratorConstructor, NAME, next);

                    var getIterationMethod = function (KIND) {
                        if (KIND === DEFAULT && defaultIterator) return defaultIterator;
                        if (!BUGGY_SAFARI_ITERATORS && KIND in IterablePrototype) return IterablePrototype[KIND];
                        switch (KIND) {
                            case KEYS: return function keys() { return new IteratorConstructor(this, KIND); };
                            case VALUES: return function values() { return new IteratorConstructor(this, KIND); };
                            case ENTRIES: return function entries() { return new IteratorConstructor(this, KIND); };
                        } return function () { return new IteratorConstructor(this); };
                    };

                    var TO_STRING_TAG = NAME + ' Iterator';
                    var INCORRECT_VALUES_NAME = false;
                    var IterablePrototype = Iterable.prototype;
                    var nativeIterator = IterablePrototype[ITERATOR]
                        || IterablePrototype['@@iterator']
                        || DEFAULT && IterablePrototype[DEFAULT];
                    var defaultIterator = !BUGGY_SAFARI_ITERATORS && nativeIterator || getIterationMethod(DEFAULT);
                    var anyNativeIterator = NAME == 'Array' ? IterablePrototype.entries || nativeIterator : nativeIterator;
                    var CurrentIteratorPrototype, methods, KEY;

                    // fix native
                    if (anyNativeIterator) {
                        CurrentIteratorPrototype = getPrototypeOf(anyNativeIterator.call(new Iterable()));
                        if (IteratorPrototype !== Object.prototype && CurrentIteratorPrototype.next) {
                            if (!IS_PURE && getPrototypeOf(CurrentIteratorPrototype) !== IteratorPrototype) {
                                if (setPrototypeOf) {
                                    setPrototypeOf(CurrentIteratorPrototype, IteratorPrototype);
                                } else if (typeof CurrentIteratorPrototype[ITERATOR] != 'function') {
                                    createNonEnumerableProperty(CurrentIteratorPrototype, ITERATOR, returnThis);
                                }
                            }
                            // Set @@toStringTag to native iterators
                            setToStringTag(CurrentIteratorPrototype, TO_STRING_TAG, true, true);
                            if (IS_PURE) Iterators[TO_STRING_TAG] = returnThis;
                        }
                    }

                    // fix Array#{values, @@iterator}.name in V8 / FF
                    if (DEFAULT == VALUES && nativeIterator && nativeIterator.name !== VALUES) {
                        INCORRECT_VALUES_NAME = true;
                        defaultIterator = function values() { return nativeIterator.call(this); };
                    }

                    // define iterator
                    if ((!IS_PURE || FORCED) && IterablePrototype[ITERATOR] !== defaultIterator) {
                        createNonEnumerableProperty(IterablePrototype, ITERATOR, defaultIterator);
                    }
                    Iterators[NAME] = defaultIterator;

                    // export additional methods
                    if (DEFAULT) {
                        methods = {
                            values: getIterationMethod(VALUES),
                            keys: IS_SET ? defaultIterator : getIterationMethod(KEYS),
                            entries: getIterationMethod(ENTRIES)
                        };
                        if (FORCED) for (KEY in methods) {
                            if (BUGGY_SAFARI_ITERATORS || INCORRECT_VALUES_NAME || !(KEY in IterablePrototype)) {
                                redefine(IterablePrototype, KEY, methods[KEY]);
                            }
                        } else $({ target: NAME, proto: true, forced: BUGGY_SAFARI_ITERATORS || INCORRECT_VALUES_NAME }, methods);
                    }

                    return methods;
                };


                /***/
            }),

/***/ "./node_modules/core-js/internals/descriptors.js":
/*!*******************************************************!*\
  !*** ./node_modules/core-js/internals/descriptors.js ***!
  \*******************************************************/
/*! all exports used */
/***/ (function (module, exports, __webpack_require__) {

                var fails = __webpack_require__(/*! ../internals/fails */ "./node_modules/core-js/internals/fails.js");

                // Thank's IE8 for his funny defineProperty
                module.exports = !fails(function () {
                    return Object.defineProperty({}, 1, { get: function () { return 7; } })[1] != 7;
                });


                /***/
            }),

/***/ "./node_modules/core-js/internals/document-create-element.js":
/*!*******************************************************************!*\
  !*** ./node_modules/core-js/internals/document-create-element.js ***!
  \*******************************************************************/
/*! all exports used */
/***/ (function (module, exports, __webpack_require__) {

                var global = __webpack_require__(/*! ../internals/global */ "./node_modules/core-js/internals/global.js");
                var isObject = __webpack_require__(/*! ../internals/is-object */ "./node_modules/core-js/internals/is-object.js");

                var document = global.document;
                // typeof document.createElement is 'object' in old IE
                var EXISTS = isObject(document) && isObject(document.createElement);

                module.exports = function (it) {
                    return EXISTS ? document.createElement(it) : {};
                };


                /***/
            }),

/***/ "./node_modules/core-js/internals/dom-iterables.js":
/*!*********************************************************!*\
  !*** ./node_modules/core-js/internals/dom-iterables.js ***!
  \*********************************************************/
/*! all exports used */
/***/ (function (module, exports) {

                // iterable DOM collections
                // flag - `iterable` interface - 'entries', 'keys', 'values', 'forEach' methods
                module.exports = {
                    CSSRuleList: 0,
                    CSSStyleDeclaration: 0,
                    CSSValueList: 0,
                    ClientRectList: 0,
                    DOMRectList: 0,
                    DOMStringList: 0,
                    DOMTokenList: 1,
                    DataTransferItemList: 0,
                    FileList: 0,
                    HTMLAllCollection: 0,
                    HTMLCollection: 0,
                    HTMLFormElement: 0,
                    HTMLSelectElement: 0,
                    MediaList: 0,
                    MimeTypeArray: 0,
                    NamedNodeMap: 0,
                    NodeList: 1,
                    PaintRequestList: 0,
                    Plugin: 0,
                    PluginArray: 0,
                    SVGLengthList: 0,
                    SVGNumberList: 0,
                    SVGPathSegList: 0,
                    SVGPointList: 0,
                    SVGStringList: 0,
                    SVGTransformList: 0,
                    SourceBufferList: 0,
                    StyleSheetList: 0,
                    TextTrackCueList: 0,
                    TextTrackList: 0,
                    TouchList: 0
                };


                /***/
            }),

/***/ "./node_modules/core-js/internals/engine-is-ios.js":
/*!*********************************************************!*\
  !*** ./node_modules/core-js/internals/engine-is-ios.js ***!
  \*********************************************************/
/*! all exports used */
/***/ (function (module, exports, __webpack_require__) {

                var userAgent = __webpack_require__(/*! ../internals/engine-user-agent */ "./node_modules/core-js/internals/engine-user-agent.js");

                module.exports = /(iphone|ipod|ipad).*applewebkit/i.test(userAgent);


                /***/
            }),

/***/ "./node_modules/core-js/internals/engine-user-agent.js":
/*!*************************************************************!*\
  !*** ./node_modules/core-js/internals/engine-user-agent.js ***!
  \*************************************************************/
/*! all exports used */
/***/ (function (module, exports, __webpack_require__) {

                var getBuiltIn = __webpack_require__(/*! ../internals/get-built-in */ "./node_modules/core-js/internals/get-built-in.js");

                module.exports = getBuiltIn('navigator', 'userAgent') || '';


                /***/
            }),

/***/ "./node_modules/core-js/internals/engine-v8-version.js":
/*!*************************************************************!*\
  !*** ./node_modules/core-js/internals/engine-v8-version.js ***!
  \*************************************************************/
/*! all exports used */
/***/ (function (module, exports, __webpack_require__) {

                var global = __webpack_require__(/*! ../internals/global */ "./node_modules/core-js/internals/global.js");
                var userAgent = __webpack_require__(/*! ../internals/engine-user-agent */ "./node_modules/core-js/internals/engine-user-agent.js");

                var process = global.process;
                var versions = process && process.versions;
                var v8 = versions && versions.v8;
                var match, version;

                if (v8) {
                    match = v8.split('.');
                    version = match[0] + match[1];
                } else if (userAgent) {
                    match = userAgent.match(/Edge\/(\d+)/);
                    if (!match || match[1] >= 74) {
                        match = userAgent.match(/Chrome\/(\d+)/);
                        if (match) version = match[1];
                    }
                }

                module.exports = version && +version;


                /***/
            }),

/***/ "./node_modules/core-js/internals/enum-bug-keys.js":
/*!*********************************************************!*\
  !*** ./node_modules/core-js/internals/enum-bug-keys.js ***!
  \*********************************************************/
/*! all exports used */
/***/ (function (module, exports) {

                // IE8- don't enum bug keys
                module.exports = [
                    'constructor',
                    'hasOwnProperty',
                    'isPrototypeOf',
                    'propertyIsEnumerable',
                    'toLocaleString',
                    'toString',
                    'valueOf'
                ];


                /***/
            }),

/***/ "./node_modules/core-js/internals/export.js":
/*!**************************************************!*\
  !*** ./node_modules/core-js/internals/export.js ***!
  \**************************************************/
/*! all exports used */
/***/ (function (module, exports, __webpack_require__) {

                var global = __webpack_require__(/*! ../internals/global */ "./node_modules/core-js/internals/global.js");
                var getOwnPropertyDescriptor = __webpack_require__(/*! ../internals/object-get-own-property-descriptor */ "./node_modules/core-js/internals/object-get-own-property-descriptor.js").f;
                var createNonEnumerableProperty = __webpack_require__(/*! ../internals/create-non-enumerable-property */ "./node_modules/core-js/internals/create-non-enumerable-property.js");
                var redefine = __webpack_require__(/*! ../internals/redefine */ "./node_modules/core-js/internals/redefine.js");
                var setGlobal = __webpack_require__(/*! ../internals/set-global */ "./node_modules/core-js/internals/set-global.js");
                var copyConstructorProperties = __webpack_require__(/*! ../internals/copy-constructor-properties */ "./node_modules/core-js/internals/copy-constructor-properties.js");
                var isForced = __webpack_require__(/*! ../internals/is-forced */ "./node_modules/core-js/internals/is-forced.js");

                /*
                  options.target      - name of the target object
                  options.global      - target is the global object
                  options.stat        - export as static methods of target
                  options.proto       - export as prototype methods of target
                  options.real        - real prototype method for the `pure` version
                  options.forced      - export even if the native feature is available
                  options.bind        - bind methods to the target, required for the `pure` version
                  options.wrap        - wrap constructors to preventing global pollution, required for the `pure` version
                  options.unsafe      - use the simple assignment of property instead of delete + defineProperty
                  options.sham        - add a flag to not completely full polyfills
                  options.enumerable  - export as enumerable property
                  options.noTargetGet - prevent calling a getter on target
                */
                module.exports = function (options, source) {
                    var TARGET = options.target;
                    var GLOBAL = options.global;
                    var STATIC = options.stat;
                    var FORCED, target, key, targetProperty, sourceProperty, descriptor;
                    if (GLOBAL) {
                        target = global;
                    } else if (STATIC) {
                        target = global[TARGET] || setGlobal(TARGET, {});
                    } else {
                        target = (global[TARGET] || {}).prototype;
                    }
                    if (target) for (key in source) {
                        sourceProperty = source[key];
                        if (options.noTargetGet) {
                            descriptor = getOwnPropertyDescriptor(target, key);
                            targetProperty = descriptor && descriptor.value;
                        } else targetProperty = target[key];
                        FORCED = isForced(GLOBAL ? key : TARGET + (STATIC ? '.' : '#') + key, options.forced);
                        // contained in target
                        if (!FORCED && targetProperty !== undefined) {
                            if (typeof sourceProperty === typeof targetProperty) continue;
                            copyConstructorProperties(sourceProperty, targetProperty);
                        }
                        // add a flag to not completely full polyfills
                        if (options.sham || (targetProperty && targetProperty.sham)) {
                            createNonEnumerableProperty(sourceProperty, 'sham', true);
                        }
                        // extend global
                        redefine(target, key, sourceProperty, options);
                    }
                };


                /***/
            }),

/***/ "./node_modules/core-js/internals/fails.js":
/*!*************************************************!*\
  !*** ./node_modules/core-js/internals/fails.js ***!
  \*************************************************/
/*! all exports used */
/***/ (function (module, exports) {

                module.exports = function (exec) {
                    try {
                        return !!exec();
                    } catch (error) {
                        return true;
                    }
                };


                /***/
            }),

/***/ "./node_modules/core-js/internals/fix-regexp-well-known-symbol-logic.js":
/*!******************************************************************************!*\
  !*** ./node_modules/core-js/internals/fix-regexp-well-known-symbol-logic.js ***!
  \******************************************************************************/
/*! all exports used */
/***/ (function (module, exports, __webpack_require__) {

                "use strict";

                // TODO: Remove from `core-js@4` since it's moved to entry points
                __webpack_require__(/*! ../modules/es.regexp.exec */ "./node_modules/core-js/modules/es.regexp.exec.js");
                var redefine = __webpack_require__(/*! ../internals/redefine */ "./node_modules/core-js/internals/redefine.js");
                var fails = __webpack_require__(/*! ../internals/fails */ "./node_modules/core-js/internals/fails.js");
                var wellKnownSymbol = __webpack_require__(/*! ../internals/well-known-symbol */ "./node_modules/core-js/internals/well-known-symbol.js");
                var regexpExec = __webpack_require__(/*! ../internals/regexp-exec */ "./node_modules/core-js/internals/regexp-exec.js");
                var createNonEnumerableProperty = __webpack_require__(/*! ../internals/create-non-enumerable-property */ "./node_modules/core-js/internals/create-non-enumerable-property.js");

                var SPECIES = wellKnownSymbol('species');

                var REPLACE_SUPPORTS_NAMED_GROUPS = !fails(function () {
                    // #replace needs built-in support for named groups.
                    // #match works fine because it just return the exec results, even if it has
                    // a "grops" property.
                    var re = /./;
                    re.exec = function () {
                        var result = [];
                        result.groups = { a: '7' };
                        return result;
                    };
                    return ''.replace(re, '$<a>') !== '7';
                });

                // IE <= 11 replaces $0 with the whole match, as if it was $&
                // https://stackoverflow.com/questions/6024666/getting-ie-to-replace-a-regex-with-the-literal-string-0
                var REPLACE_KEEPS_$0 = (function () {
                    return 'a'.replace(/./, '$0') === '$0';
                })();

                var REPLACE = wellKnownSymbol('replace');
                // Safari <= 13.0.3(?) substitutes nth capture where n>m with an empty string
                var REGEXP_REPLACE_SUBSTITUTES_UNDEFINED_CAPTURE = (function () {
                    if (/./[REPLACE]) {
                        return /./[REPLACE]('a', '$0') === '';
                    }
                    return false;
                })();

                // Chrome 51 has a buggy "split" implementation when RegExp#exec !== nativeExec
                // Weex JS has frozen built-in prototypes, so use try / catch wrapper
                var SPLIT_WORKS_WITH_OVERWRITTEN_EXEC = !fails(function () {
                    var re = /(?:)/;
                    var originalExec = re.exec;
                    re.exec = function () { return originalExec.apply(this, arguments); };
                    var result = 'ab'.split(re);
                    return result.length !== 2 || result[0] !== 'a' || result[1] !== 'b';
                });

                module.exports = function (KEY, length, exec, sham) {
                    var SYMBOL = wellKnownSymbol(KEY);

                    var DELEGATES_TO_SYMBOL = !fails(function () {
                        // String methods call symbol-named RegEp methods
                        var O = {};
                        O[SYMBOL] = function () { return 7; };
                        return ''[KEY](O) != 7;
                    });

                    var DELEGATES_TO_EXEC = DELEGATES_TO_SYMBOL && !fails(function () {
                        // Symbol-named RegExp methods call .exec
                        var execCalled = false;
                        var re = /a/;

                        if (KEY === 'split') {
                            // We can't use real regex here since it causes deoptimization
                            // and serious performance degradation in V8
                            // https://github.com/zloirock/core-js/issues/306
                            re = {};
                            // RegExp[@@split] doesn't call the regex's exec method, but first creates
                            // a new one. We need to return the patched regex when creating the new one.
                            re.constructor = {};
                            re.constructor[SPECIES] = function () { return re; };
                            re.flags = '';
                            re[SYMBOL] = /./[SYMBOL];
                        }

                        re.exec = function () { execCalled = true; return null; };

                        re[SYMBOL]('');
                        return !execCalled;
                    });

                    if (
                        !DELEGATES_TO_SYMBOL ||
                        !DELEGATES_TO_EXEC ||
                        (KEY === 'replace' && !(
                            REPLACE_SUPPORTS_NAMED_GROUPS &&
                            REPLACE_KEEPS_$0 &&
                            !REGEXP_REPLACE_SUBSTITUTES_UNDEFINED_CAPTURE
                        )) ||
                        (KEY === 'split' && !SPLIT_WORKS_WITH_OVERWRITTEN_EXEC)
                    ) {
                        var nativeRegExpMethod = /./[SYMBOL];
                        var methods = exec(SYMBOL, ''[KEY], function (nativeMethod, regexp, str, arg2, forceStringMethod) {
                            if (regexp.exec === regexpExec) {
                                if (DELEGATES_TO_SYMBOL && !forceStringMethod) {
                                    // The native String method already delegates to @@method (this
                                    // polyfilled function), leasing to infinite recursion.
                                    // We avoid it by directly calling the native @@method method.
                                    return { done: true, value: nativeRegExpMethod.call(regexp, str, arg2) };
                                }
                                return { done: true, value: nativeMethod.call(str, regexp, arg2) };
                            }
                            return { done: false };
                        }, {
                            REPLACE_KEEPS_$0: REPLACE_KEEPS_$0,
                            REGEXP_REPLACE_SUBSTITUTES_UNDEFINED_CAPTURE: REGEXP_REPLACE_SUBSTITUTES_UNDEFINED_CAPTURE
                        });
                        var stringMethod = methods[0];
                        var regexMethod = methods[1];

                        redefine(String.prototype, KEY, stringMethod);
                        redefine(RegExp.prototype, SYMBOL, length == 2
                            // 21.2.5.8 RegExp.prototype[@@replace](string, replaceValue)
                            // 21.2.5.11 RegExp.prototype[@@split](string, limit)
                            ? function (string, arg) { return regexMethod.call(string, this, arg); }
                            // 21.2.5.6 RegExp.prototype[@@match](string)
                            // 21.2.5.9 RegExp.prototype[@@search](string)
                            : function (string) { return regexMethod.call(string, this); }
                        );
                    }

                    if (sham) createNonEnumerableProperty(RegExp.prototype[SYMBOL], 'sham', true);
                };


                /***/
            }),

/***/ "./node_modules/core-js/internals/flatten-into-array.js":
/*!**************************************************************!*\
  !*** ./node_modules/core-js/internals/flatten-into-array.js ***!
  \**************************************************************/
/*! all exports used */
/***/ (function (module, exports, __webpack_require__) {

                "use strict";

                var isArray = __webpack_require__(/*! ../internals/is-array */ "./node_modules/core-js/internals/is-array.js");
                var toLength = __webpack_require__(/*! ../internals/to-length */ "./node_modules/core-js/internals/to-length.js");
                var bind = __webpack_require__(/*! ../internals/function-bind-context */ "./node_modules/core-js/internals/function-bind-context.js");

                // `FlattenIntoArray` abstract operation
                // https://tc39.github.io/proposal-flatMap/#sec-FlattenIntoArray
                var flattenIntoArray = function (target, original, source, sourceLen, start, depth, mapper, thisArg) {
                    var targetIndex = start;
                    var sourceIndex = 0;
                    var mapFn = mapper ? bind(mapper, thisArg, 3) : false;
                    var element;

                    while (sourceIndex < sourceLen) {
                        if (sourceIndex in source) {
                            element = mapFn ? mapFn(source[sourceIndex], sourceIndex, original) : source[sourceIndex];

                            if (depth > 0 && isArray(element)) {
                                targetIndex = flattenIntoArray(target, original, element, toLength(element.length), targetIndex, depth - 1) - 1;
                            } else {
                                if (targetIndex >= 0x1FFFFFFFFFFFFF) throw TypeError('Exceed the acceptable array length');
                                target[targetIndex] = element;
                            }

                            targetIndex++;
                        }
                        sourceIndex++;
                    }
                    return targetIndex;
                };

                module.exports = flattenIntoArray;


                /***/
            }),

/***/ "./node_modules/core-js/internals/function-bind-context.js":
/*!*****************************************************************!*\
  !*** ./node_modules/core-js/internals/function-bind-context.js ***!
  \*****************************************************************/
/*! all exports used */
/***/ (function (module, exports, __webpack_require__) {

                var aFunction = __webpack_require__(/*! ../internals/a-function */ "./node_modules/core-js/internals/a-function.js");

                // optional / simple context binding
                module.exports = function (fn, that, length) {
                    aFunction(fn);
                    if (that === undefined) return fn;
                    switch (length) {
                        case 0: return function () {
                            return fn.call(that);
                        };
                        case 1: return function (a) {
                            return fn.call(that, a);
                        };
                        case 2: return function (a, b) {
                            return fn.call(that, a, b);
                        };
                        case 3: return function (a, b, c) {
                            return fn.call(that, a, b, c);
                        };
                    }
                    return function (/* ...args */) {
                        return fn.apply(that, arguments);
                    };
                };


                /***/
            }),

/***/ "./node_modules/core-js/internals/get-built-in.js":
/*!********************************************************!*\
  !*** ./node_modules/core-js/internals/get-built-in.js ***!
  \********************************************************/
/*! all exports used */
/***/ (function (module, exports, __webpack_require__) {

                var path = __webpack_require__(/*! ../internals/path */ "./node_modules/core-js/internals/path.js");
                var global = __webpack_require__(/*! ../internals/global */ "./node_modules/core-js/internals/global.js");

                var aFunction = function (variable) {
                    return typeof variable == 'function' ? variable : undefined;
                };

                module.exports = function (namespace, method) {
                    return arguments.length < 2 ? aFunction(path[namespace]) || aFunction(global[namespace])
                        : path[namespace] && path[namespace][method] || global[namespace] && global[namespace][method];
                };


                /***/
            }),

/***/ "./node_modules/core-js/internals/get-iterator-method.js":
/*!***************************************************************!*\
  !*** ./node_modules/core-js/internals/get-iterator-method.js ***!
  \***************************************************************/
/*! all exports used */
/***/ (function (module, exports, __webpack_require__) {

                var classof = __webpack_require__(/*! ../internals/classof */ "./node_modules/core-js/internals/classof.js");
                var Iterators = __webpack_require__(/*! ../internals/iterators */ "./node_modules/core-js/internals/iterators.js");
                var wellKnownSymbol = __webpack_require__(/*! ../internals/well-known-symbol */ "./node_modules/core-js/internals/well-known-symbol.js");

                var ITERATOR = wellKnownSymbol('iterator');

                module.exports = function (it) {
                    if (it != undefined) return it[ITERATOR]
                        || it['@@iterator']
                        || Iterators[classof(it)];
                };


                /***/
            }),

/***/ "./node_modules/core-js/internals/get-iterator.js":
/*!********************************************************!*\
  !*** ./node_modules/core-js/internals/get-iterator.js ***!
  \********************************************************/
/*! all exports used */
/***/ (function (module, exports, __webpack_require__) {

                var anObject = __webpack_require__(/*! ../internals/an-object */ "./node_modules/core-js/internals/an-object.js");
                var getIteratorMethod = __webpack_require__(/*! ../internals/get-iterator-method */ "./node_modules/core-js/internals/get-iterator-method.js");

                module.exports = function (it) {
                    var iteratorMethod = getIteratorMethod(it);
                    if (typeof iteratorMethod != 'function') {
                        throw TypeError(String(it) + ' is not iterable');
                    } return anObject(iteratorMethod.call(it));
                };


                /***/
            }),

/***/ "./node_modules/core-js/internals/global.js":
/*!**************************************************!*\
  !*** ./node_modules/core-js/internals/global.js ***!
  \**************************************************/
/*! all exports used */
/***/ (function (module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function (global) {
                    var check = function (it) {
                        return it && it.Math == Math && it;
                    };

                    // https://github.com/zloirock/core-js/issues/86#issuecomment-115759028
                    module.exports =
                        // eslint-disable-next-line no-undef
                        check(typeof globalThis == 'object' && globalThis) ||
                        check(typeof window == 'object' && window) ||
                        check(typeof self == 'object' && self) ||
                        check(typeof global == 'object' && global) ||
                        // eslint-disable-next-line no-new-func
                        Function('return this')();

                    /* WEBPACK VAR INJECTION */
                }.call(this, __webpack_require__(/*! ./../../webpack/buildin/global.js */ "./node_modules/webpack/buildin/global.js")))

                /***/
            }),

/***/ "./node_modules/core-js/internals/has.js":
/*!***********************************************!*\
  !*** ./node_modules/core-js/internals/has.js ***!
  \***********************************************/
/*! all exports used */
/***/ (function (module, exports) {

                var hasOwnProperty = {}.hasOwnProperty;

                module.exports = function (it, key) {
                    return hasOwnProperty.call(it, key);
                };


                /***/
            }),

/***/ "./node_modules/core-js/internals/hidden-keys.js":
/*!*******************************************************!*\
  !*** ./node_modules/core-js/internals/hidden-keys.js ***!
  \*******************************************************/
/*! all exports used */
/***/ (function (module, exports) {

                module.exports = {};


                /***/
            }),

/***/ "./node_modules/core-js/internals/host-report-errors.js":
/*!**************************************************************!*\
  !*** ./node_modules/core-js/internals/host-report-errors.js ***!
  \**************************************************************/
/*! all exports used */
/***/ (function (module, exports, __webpack_require__) {

                var global = __webpack_require__(/*! ../internals/global */ "./node_modules/core-js/internals/global.js");

                module.exports = function (a, b) {
                    var console = global.console;
                    if (console && console.error) {
                        arguments.length === 1 ? console.error(a) : console.error(a, b);
                    }
                };


                /***/
            }),

/***/ "./node_modules/core-js/internals/html.js":
/*!************************************************!*\
  !*** ./node_modules/core-js/internals/html.js ***!
  \************************************************/
/*! all exports used */
/***/ (function (module, exports, __webpack_require__) {

                var getBuiltIn = __webpack_require__(/*! ../internals/get-built-in */ "./node_modules/core-js/internals/get-built-in.js");

                module.exports = getBuiltIn('document', 'documentElement');


                /***/
            }),

/***/ "./node_modules/core-js/internals/ie8-dom-define.js":
/*!**********************************************************!*\
  !*** ./node_modules/core-js/internals/ie8-dom-define.js ***!
  \**********************************************************/
/*! all exports used */
/***/ (function (module, exports, __webpack_require__) {

                var DESCRIPTORS = __webpack_require__(/*! ../internals/descriptors */ "./node_modules/core-js/internals/descriptors.js");
                var fails = __webpack_require__(/*! ../internals/fails */ "./node_modules/core-js/internals/fails.js");
                var createElement = __webpack_require__(/*! ../internals/document-create-element */ "./node_modules/core-js/internals/document-create-element.js");

                // Thank's IE8 for his funny defineProperty
                module.exports = !DESCRIPTORS && !fails(function () {
                    return Object.defineProperty(createElement('div'), 'a', {
                        get: function () { return 7; }
                    }).a != 7;
                });


                /***/
            }),

/***/ "./node_modules/core-js/internals/indexed-object.js":
/*!**********************************************************!*\
  !*** ./node_modules/core-js/internals/indexed-object.js ***!
  \**********************************************************/
/*! all exports used */
/***/ (function (module, exports, __webpack_require__) {

                var fails = __webpack_require__(/*! ../internals/fails */ "./node_modules/core-js/internals/fails.js");
                var classof = __webpack_require__(/*! ../internals/classof-raw */ "./node_modules/core-js/internals/classof-raw.js");

                var split = ''.split;

                // fallback for non-array-like ES3 and non-enumerable old V8 strings
                module.exports = fails(function () {
                    // throws an error in rhino, see https://github.com/mozilla/rhino/issues/346
                    // eslint-disable-next-line no-prototype-builtins
                    return !Object('z').propertyIsEnumerable(0);
                }) ? function (it) {
                    return classof(it) == 'String' ? split.call(it, '') : Object(it);
                } : Object;


                /***/
            }),

/***/ "./node_modules/core-js/internals/inherit-if-required.js":
/*!***************************************************************!*\
  !*** ./node_modules/core-js/internals/inherit-if-required.js ***!
  \***************************************************************/
/*! all exports used */
/***/ (function (module, exports, __webpack_require__) {

                var isObject = __webpack_require__(/*! ../internals/is-object */ "./node_modules/core-js/internals/is-object.js");
                var setPrototypeOf = __webpack_require__(/*! ../internals/object-set-prototype-of */ "./node_modules/core-js/internals/object-set-prototype-of.js");

                // makes subclassing work correct for wrapped built-ins
                module.exports = function ($this, dummy, Wrapper) {
                    var NewTarget, NewTargetPrototype;
                    if (
                        // it can work only with native `setPrototypeOf`
                        setPrototypeOf &&
                        // we haven't completely correct pre-ES6 way for getting `new.target`, so use this
                        typeof (NewTarget = dummy.constructor) == 'function' &&
                        NewTarget !== Wrapper &&
                        isObject(NewTargetPrototype = NewTarget.prototype) &&
                        NewTargetPrototype !== Wrapper.prototype
                    ) setPrototypeOf($this, NewTargetPrototype);
                    return $this;
                };


                /***/
            }),

/***/ "./node_modules/core-js/internals/inspect-source.js":
/*!**********************************************************!*\
  !*** ./node_modules/core-js/internals/inspect-source.js ***!
  \**********************************************************/
/*! all exports used */
/***/ (function (module, exports, __webpack_require__) {

                var store = __webpack_require__(/*! ../internals/shared-store */ "./node_modules/core-js/internals/shared-store.js");

                var functionToString = Function.toString;

                // this helper broken in `3.4.1-3.4.4`, so we can't use `shared` helper
                if (typeof store.inspectSource != 'function') {
                    store.inspectSource = function (it) {
                        return functionToString.call(it);
                    };
                }

                module.exports = store.inspectSource;


                /***/
            }),

/***/ "./node_modules/core-js/internals/internal-state.js":
/*!**********************************************************!*\
  !*** ./node_modules/core-js/internals/internal-state.js ***!
  \**********************************************************/
/*! all exports used */
/***/ (function (module, exports, __webpack_require__) {

                var NATIVE_WEAK_MAP = __webpack_require__(/*! ../internals/native-weak-map */ "./node_modules/core-js/internals/native-weak-map.js");
                var global = __webpack_require__(/*! ../internals/global */ "./node_modules/core-js/internals/global.js");
                var isObject = __webpack_require__(/*! ../internals/is-object */ "./node_modules/core-js/internals/is-object.js");
                var createNonEnumerableProperty = __webpack_require__(/*! ../internals/create-non-enumerable-property */ "./node_modules/core-js/internals/create-non-enumerable-property.js");
                var objectHas = __webpack_require__(/*! ../internals/has */ "./node_modules/core-js/internals/has.js");
                var sharedKey = __webpack_require__(/*! ../internals/shared-key */ "./node_modules/core-js/internals/shared-key.js");
                var hiddenKeys = __webpack_require__(/*! ../internals/hidden-keys */ "./node_modules/core-js/internals/hidden-keys.js");

                var WeakMap = global.WeakMap;
                var set, get, has;

                var enforce = function (it) {
                    return has(it) ? get(it) : set(it, {});
                };

                var getterFor = function (TYPE) {
                    return function (it) {
                        var state;
                        if (!isObject(it) || (state = get(it)).type !== TYPE) {
                            throw TypeError('Incompatible receiver, ' + TYPE + ' required');
                        } return state;
                    };
                };

                if (NATIVE_WEAK_MAP) {
                    var store = new WeakMap();
                    var wmget = store.get;
                    var wmhas = store.has;
                    var wmset = store.set;
                    set = function (it, metadata) {
                        wmset.call(store, it, metadata);
                        return metadata;
                    };
                    get = function (it) {
                        return wmget.call(store, it) || {};
                    };
                    has = function (it) {
                        return wmhas.call(store, it);
                    };
                } else {
                    var STATE = sharedKey('state');
                    hiddenKeys[STATE] = true;
                    set = function (it, metadata) {
                        createNonEnumerableProperty(it, STATE, metadata);
                        return metadata;
                    };
                    get = function (it) {
                        return objectHas(it, STATE) ? it[STATE] : {};
                    };
                    has = function (it) {
                        return objectHas(it, STATE);
                    };
                }

                module.exports = {
                    set: set,
                    get: get,
                    has: has,
                    enforce: enforce,
                    getterFor: getterFor
                };


                /***/
            }),

/***/ "./node_modules/core-js/internals/is-array-iterator-method.js":
/*!********************************************************************!*\
  !*** ./node_modules/core-js/internals/is-array-iterator-method.js ***!
  \********************************************************************/
/*! all exports used */
/***/ (function (module, exports, __webpack_require__) {

                var wellKnownSymbol = __webpack_require__(/*! ../internals/well-known-symbol */ "./node_modules/core-js/internals/well-known-symbol.js");
                var Iterators = __webpack_require__(/*! ../internals/iterators */ "./node_modules/core-js/internals/iterators.js");

                var ITERATOR = wellKnownSymbol('iterator');
                var ArrayPrototype = Array.prototype;

                // check on default Array iterator
                module.exports = function (it) {
                    return it !== undefined && (Iterators.Array === it || ArrayPrototype[ITERATOR] === it);
                };


                /***/
            }),

/***/ "./node_modules/core-js/internals/is-array.js":
/*!****************************************************!*\
  !*** ./node_modules/core-js/internals/is-array.js ***!
  \****************************************************/
/*! all exports used */
/***/ (function (module, exports, __webpack_require__) {

                var classof = __webpack_require__(/*! ../internals/classof-raw */ "./node_modules/core-js/internals/classof-raw.js");

                // `IsArray` abstract operation
                // https://tc39.github.io/ecma262/#sec-isarray
                module.exports = Array.isArray || function isArray(arg) {
                    return classof(arg) == 'Array';
                };


                /***/
            }),

/***/ "./node_modules/core-js/internals/is-forced.js":
/*!*****************************************************!*\
  !*** ./node_modules/core-js/internals/is-forced.js ***!
  \*****************************************************/
/*! all exports used */
/***/ (function (module, exports, __webpack_require__) {

                var fails = __webpack_require__(/*! ../internals/fails */ "./node_modules/core-js/internals/fails.js");

                var replacement = /#|\.prototype\./;

                var isForced = function (feature, detection) {
                    var value = data[normalize(feature)];
                    return value == POLYFILL ? true
                        : value == NATIVE ? false
                            : typeof detection == 'function' ? fails(detection)
                                : !!detection;
                };

                var normalize = isForced.normalize = function (string) {
                    return String(string).replace(replacement, '.').toLowerCase();
                };

                var data = isForced.data = {};
                var NATIVE = isForced.NATIVE = 'N';
                var POLYFILL = isForced.POLYFILL = 'P';

                module.exports = isForced;


                /***/
            }),

/***/ "./node_modules/core-js/internals/is-object.js":
/*!*****************************************************!*\
  !*** ./node_modules/core-js/internals/is-object.js ***!
  \*****************************************************/
/*! all exports used */
/***/ (function (module, exports) {

                module.exports = function (it) {
                    return typeof it === 'object' ? it !== null : typeof it === 'function';
                };


                /***/
            }),

/***/ "./node_modules/core-js/internals/is-pure.js":
/*!***************************************************!*\
  !*** ./node_modules/core-js/internals/is-pure.js ***!
  \***************************************************/
/*! all exports used */
/***/ (function (module, exports) {

                module.exports = false;


                /***/
            }),

/***/ "./node_modules/core-js/internals/is-regexp.js":
/*!*****************************************************!*\
  !*** ./node_modules/core-js/internals/is-regexp.js ***!
  \*****************************************************/
/*! all exports used */
/***/ (function (module, exports, __webpack_require__) {

                var isObject = __webpack_require__(/*! ../internals/is-object */ "./node_modules/core-js/internals/is-object.js");
                var classof = __webpack_require__(/*! ../internals/classof-raw */ "./node_modules/core-js/internals/classof-raw.js");
                var wellKnownSymbol = __webpack_require__(/*! ../internals/well-known-symbol */ "./node_modules/core-js/internals/well-known-symbol.js");

                var MATCH = wellKnownSymbol('match');

                // `IsRegExp` abstract operation
                // https://tc39.github.io/ecma262/#sec-isregexp
                module.exports = function (it) {
                    var isRegExp;
                    return isObject(it) && ((isRegExp = it[MATCH]) !== undefined ? !!isRegExp : classof(it) == 'RegExp');
                };


                /***/
            }),

/***/ "./node_modules/core-js/internals/iterate.js":
/*!***************************************************!*\
  !*** ./node_modules/core-js/internals/iterate.js ***!
  \***************************************************/
/*! all exports used */
/***/ (function (module, exports, __webpack_require__) {

                var anObject = __webpack_require__(/*! ../internals/an-object */ "./node_modules/core-js/internals/an-object.js");
                var isArrayIteratorMethod = __webpack_require__(/*! ../internals/is-array-iterator-method */ "./node_modules/core-js/internals/is-array-iterator-method.js");
                var toLength = __webpack_require__(/*! ../internals/to-length */ "./node_modules/core-js/internals/to-length.js");
                var bind = __webpack_require__(/*! ../internals/function-bind-context */ "./node_modules/core-js/internals/function-bind-context.js");
                var getIteratorMethod = __webpack_require__(/*! ../internals/get-iterator-method */ "./node_modules/core-js/internals/get-iterator-method.js");
                var callWithSafeIterationClosing = __webpack_require__(/*! ../internals/call-with-safe-iteration-closing */ "./node_modules/core-js/internals/call-with-safe-iteration-closing.js");

                var Result = function (stopped, result) {
                    this.stopped = stopped;
                    this.result = result;
                };

                var iterate = module.exports = function (iterable, fn, that, AS_ENTRIES, IS_ITERATOR) {
                    var boundFunction = bind(fn, that, AS_ENTRIES ? 2 : 1);
                    var iterator, iterFn, index, length, result, next, step;

                    if (IS_ITERATOR) {
                        iterator = iterable;
                    } else {
                        iterFn = getIteratorMethod(iterable);
                        if (typeof iterFn != 'function') throw TypeError('Target is not iterable');
                        // optimisation for array iterators
                        if (isArrayIteratorMethod(iterFn)) {
                            for (index = 0, length = toLength(iterable.length); length > index; index++) {
                                result = AS_ENTRIES
                                    ? boundFunction(anObject(step = iterable[index])[0], step[1])
                                    : boundFunction(iterable[index]);
                                if (result && result instanceof Result) return result;
                            } return new Result(false);
                        }
                        iterator = iterFn.call(iterable);
                    }

                    next = iterator.next;
                    while (!(step = next.call(iterator)).done) {
                        result = callWithSafeIterationClosing(iterator, boundFunction, step.value, AS_ENTRIES);
                        if (typeof result == 'object' && result && result instanceof Result) return result;
                    } return new Result(false);
                };

                iterate.stop = function (result) {
                    return new Result(true, result);
                };


                /***/
            }),

/***/ "./node_modules/core-js/internals/iterators-core.js":
/*!**********************************************************!*\
  !*** ./node_modules/core-js/internals/iterators-core.js ***!
  \**********************************************************/
/*! all exports used */
/***/ (function (module, exports, __webpack_require__) {

                "use strict";

                var getPrototypeOf = __webpack_require__(/*! ../internals/object-get-prototype-of */ "./node_modules/core-js/internals/object-get-prototype-of.js");
                var createNonEnumerableProperty = __webpack_require__(/*! ../internals/create-non-enumerable-property */ "./node_modules/core-js/internals/create-non-enumerable-property.js");
                var has = __webpack_require__(/*! ../internals/has */ "./node_modules/core-js/internals/has.js");
                var wellKnownSymbol = __webpack_require__(/*! ../internals/well-known-symbol */ "./node_modules/core-js/internals/well-known-symbol.js");
                var IS_PURE = __webpack_require__(/*! ../internals/is-pure */ "./node_modules/core-js/internals/is-pure.js");

                var ITERATOR = wellKnownSymbol('iterator');
                var BUGGY_SAFARI_ITERATORS = false;

                var returnThis = function () { return this; };

                // `%IteratorPrototype%` object
                // https://tc39.github.io/ecma262/#sec-%iteratorprototype%-object
                var IteratorPrototype, PrototypeOfArrayIteratorPrototype, arrayIterator;

                if ([].keys) {
                    arrayIterator = [].keys();
                    // Safari 8 has buggy iterators w/o `next`
                    if (!('next' in arrayIterator)) BUGGY_SAFARI_ITERATORS = true;
                    else {
                        PrototypeOfArrayIteratorPrototype = getPrototypeOf(getPrototypeOf(arrayIterator));
                        if (PrototypeOfArrayIteratorPrototype !== Object.prototype) IteratorPrototype = PrototypeOfArrayIteratorPrototype;
                    }
                }

                if (IteratorPrototype == undefined) IteratorPrototype = {};

                // 25.1.2.1.1 %IteratorPrototype%[@@iterator]()
                if (!IS_PURE && !has(IteratorPrototype, ITERATOR)) {
                    createNonEnumerableProperty(IteratorPrototype, ITERATOR, returnThis);
                }

                module.exports = {
                    IteratorPrototype: IteratorPrototype,
                    BUGGY_SAFARI_ITERATORS: BUGGY_SAFARI_ITERATORS
                };


                /***/
            }),

/***/ "./node_modules/core-js/internals/iterators.js":
/*!*****************************************************!*\
  !*** ./node_modules/core-js/internals/iterators.js ***!
  \*****************************************************/
/*! all exports used */
/***/ (function (module, exports) {

                module.exports = {};


                /***/
            }),

/***/ "./node_modules/core-js/internals/microtask.js":
/*!*****************************************************!*\
  !*** ./node_modules/core-js/internals/microtask.js ***!
  \*****************************************************/
/*! all exports used */
/***/ (function (module, exports, __webpack_require__) {

                var global = __webpack_require__(/*! ../internals/global */ "./node_modules/core-js/internals/global.js");
                var getOwnPropertyDescriptor = __webpack_require__(/*! ../internals/object-get-own-property-descriptor */ "./node_modules/core-js/internals/object-get-own-property-descriptor.js").f;
                var classof = __webpack_require__(/*! ../internals/classof-raw */ "./node_modules/core-js/internals/classof-raw.js");
                var macrotask = __webpack_require__(/*! ../internals/task */ "./node_modules/core-js/internals/task.js").set;
                var IS_IOS = __webpack_require__(/*! ../internals/engine-is-ios */ "./node_modules/core-js/internals/engine-is-ios.js");

                var MutationObserver = global.MutationObserver || global.WebKitMutationObserver;
                var process = global.process;
                var Promise = global.Promise;
                var IS_NODE = classof(process) == 'process';
                // Node.js 11 shows ExperimentalWarning on getting `queueMicrotask`
                var queueMicrotaskDescriptor = getOwnPropertyDescriptor(global, 'queueMicrotask');
                var queueMicrotask = queueMicrotaskDescriptor && queueMicrotaskDescriptor.value;

                var flush, head, last, notify, toggle, node, promise, then;

                // modern engines have queueMicrotask method
                if (!queueMicrotask) {
                    flush = function () {
                        var parent, fn;
                        if (IS_NODE && (parent = process.domain)) parent.exit();
                        while (head) {
                            fn = head.fn;
                            head = head.next;
                            try {
                                fn();
                            } catch (error) {
                                if (head) notify();
                                else last = undefined;
                                throw error;
                            }
                        } last = undefined;
                        if (parent) parent.enter();
                    };

                    // Node.js
                    if (IS_NODE) {
                        notify = function () {
                            process.nextTick(flush);
                        };
                        // browsers with MutationObserver, except iOS - https://github.com/zloirock/core-js/issues/339
                    } else if (MutationObserver && !IS_IOS) {
                        toggle = true;
                        node = document.createTextNode('');
                        new MutationObserver(flush).observe(node, { characterData: true });
                        notify = function () {
                            node.data = toggle = !toggle;
                        };
                        // environments with maybe non-completely correct, but existent Promise
                    } else if (Promise && Promise.resolve) {
                        // Promise.resolve without an argument throws an error in LG WebOS 2
                        promise = Promise.resolve(undefined);
                        then = promise.then;
                        notify = function () {
                            then.call(promise, flush);
                        };
                        // for other environments - macrotask based on:
                        // - setImmediate
                        // - MessageChannel
                        // - window.postMessag
                        // - onreadystatechange
                        // - setTimeout
                    } else {
                        notify = function () {
                            // strange IE + webpack dev server bug - use .call(global)
                            macrotask.call(global, flush);
                        };
                    }
                }

                module.exports = queueMicrotask || function (fn) {
                    var task = { fn: fn, next: undefined };
                    if (last) last.next = task;
                    if (!head) {
                        head = task;
                        notify();
                    } last = task;
                };


                /***/
            }),

/***/ "./node_modules/core-js/internals/native-promise-constructor.js":
/*!**********************************************************************!*\
  !*** ./node_modules/core-js/internals/native-promise-constructor.js ***!
  \**********************************************************************/
/*! all exports used */
/***/ (function (module, exports, __webpack_require__) {

                var global = __webpack_require__(/*! ../internals/global */ "./node_modules/core-js/internals/global.js");

                module.exports = global.Promise;


                /***/
            }),

/***/ "./node_modules/core-js/internals/native-symbol.js":
/*!*********************************************************!*\
  !*** ./node_modules/core-js/internals/native-symbol.js ***!
  \*********************************************************/
/*! all exports used */
/***/ (function (module, exports, __webpack_require__) {

                var fails = __webpack_require__(/*! ../internals/fails */ "./node_modules/core-js/internals/fails.js");

                module.exports = !!Object.getOwnPropertySymbols && !fails(function () {
                    // Chrome 38 Symbol has incorrect toString conversion
                    // eslint-disable-next-line no-undef
                    return !String(Symbol());
                });


                /***/
            }),

/***/ "./node_modules/core-js/internals/native-url.js":
/*!******************************************************!*\
  !*** ./node_modules/core-js/internals/native-url.js ***!
  \******************************************************/
/*! all exports used */
/***/ (function (module, exports, __webpack_require__) {

                var fails = __webpack_require__(/*! ../internals/fails */ "./node_modules/core-js/internals/fails.js");
                var wellKnownSymbol = __webpack_require__(/*! ../internals/well-known-symbol */ "./node_modules/core-js/internals/well-known-symbol.js");
                var IS_PURE = __webpack_require__(/*! ../internals/is-pure */ "./node_modules/core-js/internals/is-pure.js");

                var ITERATOR = wellKnownSymbol('iterator');

                module.exports = !fails(function () {
                    var url = new URL('b?a=1&b=2&c=3', 'http://a');
                    var searchParams = url.searchParams;
                    var result = '';
                    url.pathname = 'c%20d';
                    searchParams.forEach(function (value, key) {
                        searchParams['delete']('b');
                        result += key + value;
                    });
                    return (IS_PURE && !url.toJSON)
                        || !searchParams.sort
                        || url.href !== 'http://a/c%20d?a=1&c=3'
                        || searchParams.get('c') !== '3'
                        || String(new URLSearchParams('?a=1')) !== 'a=1'
                        || !searchParams[ITERATOR]
                        // throws in Edge
                        || new URL('https://a@b').username !== 'a'
                        || new URLSearchParams(new URLSearchParams('a=b')).get('a') !== 'b'
                        // not punycoded in Edge
                        || new URL('http://тест').host !== 'xn--e1aybc'
                        // not escaped in Chrome 62-
                        || new URL('http://a#б').hash !== '#%D0%B1'
                        // fails in Chrome 66-
                        || result !== 'a1c3'
                        // throws in Safari
                        || new URL('http://x', undefined).host !== 'x';
                });


                /***/
            }),

/***/ "./node_modules/core-js/internals/native-weak-map.js":
/*!***********************************************************!*\
  !*** ./node_modules/core-js/internals/native-weak-map.js ***!
  \***********************************************************/
/*! all exports used */
/***/ (function (module, exports, __webpack_require__) {

                var global = __webpack_require__(/*! ../internals/global */ "./node_modules/core-js/internals/global.js");
                var inspectSource = __webpack_require__(/*! ../internals/inspect-source */ "./node_modules/core-js/internals/inspect-source.js");

                var WeakMap = global.WeakMap;

                module.exports = typeof WeakMap === 'function' && /native code/.test(inspectSource(WeakMap));


                /***/
            }),

/***/ "./node_modules/core-js/internals/new-promise-capability.js":
/*!******************************************************************!*\
  !*** ./node_modules/core-js/internals/new-promise-capability.js ***!
  \******************************************************************/
/*! all exports used */
/***/ (function (module, exports, __webpack_require__) {

                "use strict";

                var aFunction = __webpack_require__(/*! ../internals/a-function */ "./node_modules/core-js/internals/a-function.js");

                var PromiseCapability = function (C) {
                    var resolve, reject;
                    this.promise = new C(function ($$resolve, $$reject) {
                        if (resolve !== undefined || reject !== undefined) throw TypeError('Bad Promise constructor');
                        resolve = $$resolve;
                        reject = $$reject;
                    });
                    this.resolve = aFunction(resolve);
                    this.reject = aFunction(reject);
                };

                // 25.4.1.5 NewPromiseCapability(C)
                module.exports.f = function (C) {
                    return new PromiseCapability(C);
                };


                /***/
            }),

/***/ "./node_modules/core-js/internals/object-assign.js":
/*!*********************************************************!*\
  !*** ./node_modules/core-js/internals/object-assign.js ***!
  \*********************************************************/
/*! all exports used */
/***/ (function (module, exports, __webpack_require__) {

                "use strict";

                var DESCRIPTORS = __webpack_require__(/*! ../internals/descriptors */ "./node_modules/core-js/internals/descriptors.js");
                var fails = __webpack_require__(/*! ../internals/fails */ "./node_modules/core-js/internals/fails.js");
                var objectKeys = __webpack_require__(/*! ../internals/object-keys */ "./node_modules/core-js/internals/object-keys.js");
                var getOwnPropertySymbolsModule = __webpack_require__(/*! ../internals/object-get-own-property-symbols */ "./node_modules/core-js/internals/object-get-own-property-symbols.js");
                var propertyIsEnumerableModule = __webpack_require__(/*! ../internals/object-property-is-enumerable */ "./node_modules/core-js/internals/object-property-is-enumerable.js");
                var toObject = __webpack_require__(/*! ../internals/to-object */ "./node_modules/core-js/internals/to-object.js");
                var IndexedObject = __webpack_require__(/*! ../internals/indexed-object */ "./node_modules/core-js/internals/indexed-object.js");

                var nativeAssign = Object.assign;
                var defineProperty = Object.defineProperty;

                // `Object.assign` method
                // https://tc39.github.io/ecma262/#sec-object.assign
                module.exports = !nativeAssign || fails(function () {
                    // should have correct order of operations (Edge bug)
                    if (DESCRIPTORS && nativeAssign({ b: 1 }, nativeAssign(defineProperty({}, 'a', {
                        enumerable: true,
                        get: function () {
                            defineProperty(this, 'b', {
                                value: 3,
                                enumerable: false
                            });
                        }
                    }), { b: 2 })).b !== 1) return true;
                    // should work with symbols and should have deterministic property order (V8 bug)
                    var A = {};
                    var B = {};
                    // eslint-disable-next-line no-undef
                    var symbol = Symbol();
                    var alphabet = 'abcdefghijklmnopqrst';
                    A[symbol] = 7;
                    alphabet.split('').forEach(function (chr) { B[chr] = chr; });
                    return nativeAssign({}, A)[symbol] != 7 || objectKeys(nativeAssign({}, B)).join('') != alphabet;
                }) ? function assign(target, source) { // eslint-disable-line no-unused-vars
                    var T = toObject(target);
                    var argumentsLength = arguments.length;
                    var index = 1;
                    var getOwnPropertySymbols = getOwnPropertySymbolsModule.f;
                    var propertyIsEnumerable = propertyIsEnumerableModule.f;
                    while (argumentsLength > index) {
                        var S = IndexedObject(arguments[index++]);
                        var keys = getOwnPropertySymbols ? objectKeys(S).concat(getOwnPropertySymbols(S)) : objectKeys(S);
                        var length = keys.length;
                        var j = 0;
                        var key;
                        while (length > j) {
                            key = keys[j++];
                            if (!DESCRIPTORS || propertyIsEnumerable.call(S, key)) T[key] = S[key];
                        }
                    } return T;
                } : nativeAssign;


                /***/
            }),

/***/ "./node_modules/core-js/internals/object-create.js":
/*!*********************************************************!*\
  !*** ./node_modules/core-js/internals/object-create.js ***!
  \*********************************************************/
/*! all exports used */
/***/ (function (module, exports, __webpack_require__) {

                var anObject = __webpack_require__(/*! ../internals/an-object */ "./node_modules/core-js/internals/an-object.js");
                var defineProperties = __webpack_require__(/*! ../internals/object-define-properties */ "./node_modules/core-js/internals/object-define-properties.js");
                var enumBugKeys = __webpack_require__(/*! ../internals/enum-bug-keys */ "./node_modules/core-js/internals/enum-bug-keys.js");
                var hiddenKeys = __webpack_require__(/*! ../internals/hidden-keys */ "./node_modules/core-js/internals/hidden-keys.js");
                var html = __webpack_require__(/*! ../internals/html */ "./node_modules/core-js/internals/html.js");
                var documentCreateElement = __webpack_require__(/*! ../internals/document-create-element */ "./node_modules/core-js/internals/document-create-element.js");
                var sharedKey = __webpack_require__(/*! ../internals/shared-key */ "./node_modules/core-js/internals/shared-key.js");

                var GT = '>';
                var LT = '<';
                var PROTOTYPE = 'prototype';
                var SCRIPT = 'script';
                var IE_PROTO = sharedKey('IE_PROTO');

                var EmptyConstructor = function () { /* empty */ };

                var scriptTag = function (content) {
                    return LT + SCRIPT + GT + content + LT + '/' + SCRIPT + GT;
                };

                // Create object with fake `null` prototype: use ActiveX Object with cleared prototype
                var NullProtoObjectViaActiveX = function (activeXDocument) {
                    activeXDocument.write(scriptTag(''));
                    activeXDocument.close();
                    var temp = activeXDocument.parentWindow.Object;
                    activeXDocument = null; // avoid memory leak
                    return temp;
                };

                // Create object with fake `null` prototype: use iframe Object with cleared prototype
                var NullProtoObjectViaIFrame = function () {
                    // Thrash, waste and sodomy: IE GC bug
                    var iframe = documentCreateElement('iframe');
                    var JS = 'java' + SCRIPT + ':';
                    var iframeDocument;
                    iframe.style.display = 'none';
                    html.appendChild(iframe);
                    // https://github.com/zloirock/core-js/issues/475
                    iframe.src = String(JS);
                    iframeDocument = iframe.contentWindow.document;
                    iframeDocument.open();
                    iframeDocument.write(scriptTag('document.F=Object'));
                    iframeDocument.close();
                    return iframeDocument.F;
                };

                // Check for document.domain and active x support
                // No need to use active x approach when document.domain is not set
                // see https://github.com/es-shims/es5-shim/issues/150
                // variation of https://github.com/kitcambridge/es5-shim/commit/4f738ac066346
                // avoid IE GC bug
                var activeXDocument;
                var NullProtoObject = function () {
                    try {
                        /* global ActiveXObject */
                        activeXDocument = document.domain && new ActiveXObject('htmlfile');
                    } catch (error) { /* ignore */ }
                    NullProtoObject = activeXDocument ? NullProtoObjectViaActiveX(activeXDocument) : NullProtoObjectViaIFrame();
                    var length = enumBugKeys.length;
                    while (length--) delete NullProtoObject[PROTOTYPE][enumBugKeys[length]];
                    return NullProtoObject();
                };

                hiddenKeys[IE_PROTO] = true;

                // `Object.create` method
                // https://tc39.github.io/ecma262/#sec-object.create
                module.exports = Object.create || function create(O, Properties) {
                    var result;
                    if (O !== null) {
                        EmptyConstructor[PROTOTYPE] = anObject(O);
                        result = new EmptyConstructor();
                        EmptyConstructor[PROTOTYPE] = null;
                        // add "__proto__" for Object.getPrototypeOf polyfill
                        result[IE_PROTO] = O;
                    } else result = NullProtoObject();
                    return Properties === undefined ? result : defineProperties(result, Properties);
                };


                /***/
            }),

/***/ "./node_modules/core-js/internals/object-define-properties.js":
/*!********************************************************************!*\
  !*** ./node_modules/core-js/internals/object-define-properties.js ***!
  \********************************************************************/
/*! all exports used */
/***/ (function (module, exports, __webpack_require__) {

                var DESCRIPTORS = __webpack_require__(/*! ../internals/descriptors */ "./node_modules/core-js/internals/descriptors.js");
                var definePropertyModule = __webpack_require__(/*! ../internals/object-define-property */ "./node_modules/core-js/internals/object-define-property.js");
                var anObject = __webpack_require__(/*! ../internals/an-object */ "./node_modules/core-js/internals/an-object.js");
                var objectKeys = __webpack_require__(/*! ../internals/object-keys */ "./node_modules/core-js/internals/object-keys.js");

                // `Object.defineProperties` method
                // https://tc39.github.io/ecma262/#sec-object.defineproperties
                module.exports = DESCRIPTORS ? Object.defineProperties : function defineProperties(O, Properties) {
                    anObject(O);
                    var keys = objectKeys(Properties);
                    var length = keys.length;
                    var index = 0;
                    var key;
                    while (length > index) definePropertyModule.f(O, key = keys[index++], Properties[key]);
                    return O;
                };


                /***/
            }),

/***/ "./node_modules/core-js/internals/object-define-property.js":
/*!******************************************************************!*\
  !*** ./node_modules/core-js/internals/object-define-property.js ***!
  \******************************************************************/
/*! all exports used */
/***/ (function (module, exports, __webpack_require__) {

                var DESCRIPTORS = __webpack_require__(/*! ../internals/descriptors */ "./node_modules/core-js/internals/descriptors.js");
                var IE8_DOM_DEFINE = __webpack_require__(/*! ../internals/ie8-dom-define */ "./node_modules/core-js/internals/ie8-dom-define.js");
                var anObject = __webpack_require__(/*! ../internals/an-object */ "./node_modules/core-js/internals/an-object.js");
                var toPrimitive = __webpack_require__(/*! ../internals/to-primitive */ "./node_modules/core-js/internals/to-primitive.js");

                var nativeDefineProperty = Object.defineProperty;

                // `Object.defineProperty` method
                // https://tc39.github.io/ecma262/#sec-object.defineproperty
                exports.f = DESCRIPTORS ? nativeDefineProperty : function defineProperty(O, P, Attributes) {
                    anObject(O);
                    P = toPrimitive(P, true);
                    anObject(Attributes);
                    if (IE8_DOM_DEFINE) try {
                        return nativeDefineProperty(O, P, Attributes);
                    } catch (error) { /* empty */ }
                    if ('get' in Attributes || 'set' in Attributes) throw TypeError('Accessors not supported');
                    if ('value' in Attributes) O[P] = Attributes.value;
                    return O;
                };


                /***/
            }),

/***/ "./node_modules/core-js/internals/object-get-own-property-descriptor.js":
/*!******************************************************************************!*\
  !*** ./node_modules/core-js/internals/object-get-own-property-descriptor.js ***!
  \******************************************************************************/
/*! all exports used */
/***/ (function (module, exports, __webpack_require__) {

                var DESCRIPTORS = __webpack_require__(/*! ../internals/descriptors */ "./node_modules/core-js/internals/descriptors.js");
                var propertyIsEnumerableModule = __webpack_require__(/*! ../internals/object-property-is-enumerable */ "./node_modules/core-js/internals/object-property-is-enumerable.js");
                var createPropertyDescriptor = __webpack_require__(/*! ../internals/create-property-descriptor */ "./node_modules/core-js/internals/create-property-descriptor.js");
                var toIndexedObject = __webpack_require__(/*! ../internals/to-indexed-object */ "./node_modules/core-js/internals/to-indexed-object.js");
                var toPrimitive = __webpack_require__(/*! ../internals/to-primitive */ "./node_modules/core-js/internals/to-primitive.js");
                var has = __webpack_require__(/*! ../internals/has */ "./node_modules/core-js/internals/has.js");
                var IE8_DOM_DEFINE = __webpack_require__(/*! ../internals/ie8-dom-define */ "./node_modules/core-js/internals/ie8-dom-define.js");

                var nativeGetOwnPropertyDescriptor = Object.getOwnPropertyDescriptor;

                // `Object.getOwnPropertyDescriptor` method
                // https://tc39.github.io/ecma262/#sec-object.getownpropertydescriptor
                exports.f = DESCRIPTORS ? nativeGetOwnPropertyDescriptor : function getOwnPropertyDescriptor(O, P) {
                    O = toIndexedObject(O);
                    P = toPrimitive(P, true);
                    if (IE8_DOM_DEFINE) try {
                        return nativeGetOwnPropertyDescriptor(O, P);
                    } catch (error) { /* empty */ }
                    if (has(O, P)) return createPropertyDescriptor(!propertyIsEnumerableModule.f.call(O, P), O[P]);
                };


                /***/
            }),

/***/ "./node_modules/core-js/internals/object-get-own-property-names.js":
/*!*************************************************************************!*\
  !*** ./node_modules/core-js/internals/object-get-own-property-names.js ***!
  \*************************************************************************/
/*! all exports used */
/***/ (function (module, exports, __webpack_require__) {

                var internalObjectKeys = __webpack_require__(/*! ../internals/object-keys-internal */ "./node_modules/core-js/internals/object-keys-internal.js");
                var enumBugKeys = __webpack_require__(/*! ../internals/enum-bug-keys */ "./node_modules/core-js/internals/enum-bug-keys.js");

                var hiddenKeys = enumBugKeys.concat('length', 'prototype');

                // `Object.getOwnPropertyNames` method
                // https://tc39.github.io/ecma262/#sec-object.getownpropertynames
                exports.f = Object.getOwnPropertyNames || function getOwnPropertyNames(O) {
                    return internalObjectKeys(O, hiddenKeys);
                };


                /***/
            }),

/***/ "./node_modules/core-js/internals/object-get-own-property-symbols.js":
/*!***************************************************************************!*\
  !*** ./node_modules/core-js/internals/object-get-own-property-symbols.js ***!
  \***************************************************************************/
/*! all exports used */
/***/ (function (module, exports) {

                exports.f = Object.getOwnPropertySymbols;


                /***/
            }),

/***/ "./node_modules/core-js/internals/object-get-prototype-of.js":
/*!*******************************************************************!*\
  !*** ./node_modules/core-js/internals/object-get-prototype-of.js ***!
  \*******************************************************************/
/*! all exports used */
/***/ (function (module, exports, __webpack_require__) {

                var has = __webpack_require__(/*! ../internals/has */ "./node_modules/core-js/internals/has.js");
                var toObject = __webpack_require__(/*! ../internals/to-object */ "./node_modules/core-js/internals/to-object.js");
                var sharedKey = __webpack_require__(/*! ../internals/shared-key */ "./node_modules/core-js/internals/shared-key.js");
                var CORRECT_PROTOTYPE_GETTER = __webpack_require__(/*! ../internals/correct-prototype-getter */ "./node_modules/core-js/internals/correct-prototype-getter.js");

                var IE_PROTO = sharedKey('IE_PROTO');
                var ObjectPrototype = Object.prototype;

                // `Object.getPrototypeOf` method
                // https://tc39.github.io/ecma262/#sec-object.getprototypeof
                module.exports = CORRECT_PROTOTYPE_GETTER ? Object.getPrototypeOf : function (O) {
                    O = toObject(O);
                    if (has(O, IE_PROTO)) return O[IE_PROTO];
                    if (typeof O.constructor == 'function' && O instanceof O.constructor) {
                        return O.constructor.prototype;
                    } return O instanceof Object ? ObjectPrototype : null;
                };


                /***/
            }),

/***/ "./node_modules/core-js/internals/object-keys-internal.js":
/*!****************************************************************!*\
  !*** ./node_modules/core-js/internals/object-keys-internal.js ***!
  \****************************************************************/
/*! all exports used */
/***/ (function (module, exports, __webpack_require__) {

                var has = __webpack_require__(/*! ../internals/has */ "./node_modules/core-js/internals/has.js");
                var toIndexedObject = __webpack_require__(/*! ../internals/to-indexed-object */ "./node_modules/core-js/internals/to-indexed-object.js");
                var indexOf = __webpack_require__(/*! ../internals/array-includes */ "./node_modules/core-js/internals/array-includes.js").indexOf;
                var hiddenKeys = __webpack_require__(/*! ../internals/hidden-keys */ "./node_modules/core-js/internals/hidden-keys.js");

                module.exports = function (object, names) {
                    var O = toIndexedObject(object);
                    var i = 0;
                    var result = [];
                    var key;
                    for (key in O) !has(hiddenKeys, key) && has(O, key) && result.push(key);
                    // Don't enum bug & hidden keys
                    while (names.length > i) if (has(O, key = names[i++])) {
                        ~indexOf(result, key) || result.push(key);
                    }
                    return result;
                };


                /***/
            }),

/***/ "./node_modules/core-js/internals/object-keys.js":
/*!*******************************************************!*\
  !*** ./node_modules/core-js/internals/object-keys.js ***!
  \*******************************************************/
/*! all exports used */
/***/ (function (module, exports, __webpack_require__) {

                var internalObjectKeys = __webpack_require__(/*! ../internals/object-keys-internal */ "./node_modules/core-js/internals/object-keys-internal.js");
                var enumBugKeys = __webpack_require__(/*! ../internals/enum-bug-keys */ "./node_modules/core-js/internals/enum-bug-keys.js");

                // `Object.keys` method
                // https://tc39.github.io/ecma262/#sec-object.keys
                module.exports = Object.keys || function keys(O) {
                    return internalObjectKeys(O, enumBugKeys);
                };


                /***/
            }),

/***/ "./node_modules/core-js/internals/object-property-is-enumerable.js":
/*!*************************************************************************!*\
  !*** ./node_modules/core-js/internals/object-property-is-enumerable.js ***!
  \*************************************************************************/
/*! all exports used */
/***/ (function (module, exports, __webpack_require__) {

                "use strict";

                var nativePropertyIsEnumerable = {}.propertyIsEnumerable;
                var getOwnPropertyDescriptor = Object.getOwnPropertyDescriptor;

                // Nashorn ~ JDK8 bug
                var NASHORN_BUG = getOwnPropertyDescriptor && !nativePropertyIsEnumerable.call({ 1: 2 }, 1);

                // `Object.prototype.propertyIsEnumerable` method implementation
                // https://tc39.github.io/ecma262/#sec-object.prototype.propertyisenumerable
                exports.f = NASHORN_BUG ? function propertyIsEnumerable(V) {
                    var descriptor = getOwnPropertyDescriptor(this, V);
                    return !!descriptor && descriptor.enumerable;
                } : nativePropertyIsEnumerable;


                /***/
            }),

/***/ "./node_modules/core-js/internals/object-set-prototype-of.js":
/*!*******************************************************************!*\
  !*** ./node_modules/core-js/internals/object-set-prototype-of.js ***!
  \*******************************************************************/
/*! all exports used */
/***/ (function (module, exports, __webpack_require__) {

                var anObject = __webpack_require__(/*! ../internals/an-object */ "./node_modules/core-js/internals/an-object.js");
                var aPossiblePrototype = __webpack_require__(/*! ../internals/a-possible-prototype */ "./node_modules/core-js/internals/a-possible-prototype.js");

                // `Object.setPrototypeOf` method
                // https://tc39.github.io/ecma262/#sec-object.setprototypeof
                // Works with __proto__ only. Old v8 can't work with null proto objects.
                /* eslint-disable no-proto */
                module.exports = Object.setPrototypeOf || ('__proto__' in {} ? function () {
                    var CORRECT_SETTER = false;
                    var test = {};
                    var setter;
                    try {
                        setter = Object.getOwnPropertyDescriptor(Object.prototype, '__proto__').set;
                        setter.call(test, []);
                        CORRECT_SETTER = test instanceof Array;
                    } catch (error) { /* empty */ }
                    return function setPrototypeOf(O, proto) {
                        anObject(O);
                        aPossiblePrototype(proto);
                        if (CORRECT_SETTER) setter.call(O, proto);
                        else O.__proto__ = proto;
                        return O;
                    };
                }() : undefined);


                /***/
            }),

/***/ "./node_modules/core-js/internals/object-to-string.js":
/*!************************************************************!*\
  !*** ./node_modules/core-js/internals/object-to-string.js ***!
  \************************************************************/
/*! all exports used */
/***/ (function (module, exports, __webpack_require__) {

                "use strict";

                var TO_STRING_TAG_SUPPORT = __webpack_require__(/*! ../internals/to-string-tag-support */ "./node_modules/core-js/internals/to-string-tag-support.js");
                var classof = __webpack_require__(/*! ../internals/classof */ "./node_modules/core-js/internals/classof.js");

                // `Object.prototype.toString` method implementation
                // https://tc39.github.io/ecma262/#sec-object.prototype.tostring
                module.exports = TO_STRING_TAG_SUPPORT ? {}.toString : function toString() {
                    return '[object ' + classof(this) + ']';
                };


                /***/
            }),

/***/ "./node_modules/core-js/internals/own-keys.js":
/*!****************************************************!*\
  !*** ./node_modules/core-js/internals/own-keys.js ***!
  \****************************************************/
/*! all exports used */
/***/ (function (module, exports, __webpack_require__) {

                var getBuiltIn = __webpack_require__(/*! ../internals/get-built-in */ "./node_modules/core-js/internals/get-built-in.js");
                var getOwnPropertyNamesModule = __webpack_require__(/*! ../internals/object-get-own-property-names */ "./node_modules/core-js/internals/object-get-own-property-names.js");
                var getOwnPropertySymbolsModule = __webpack_require__(/*! ../internals/object-get-own-property-symbols */ "./node_modules/core-js/internals/object-get-own-property-symbols.js");
                var anObject = __webpack_require__(/*! ../internals/an-object */ "./node_modules/core-js/internals/an-object.js");

                // all object keys, includes non-enumerable and symbols
                module.exports = getBuiltIn('Reflect', 'ownKeys') || function ownKeys(it) {
                    var keys = getOwnPropertyNamesModule.f(anObject(it));
                    var getOwnPropertySymbols = getOwnPropertySymbolsModule.f;
                    return getOwnPropertySymbols ? keys.concat(getOwnPropertySymbols(it)) : keys;
                };


                /***/
            }),

/***/ "./node_modules/core-js/internals/path.js":
/*!************************************************!*\
  !*** ./node_modules/core-js/internals/path.js ***!
  \************************************************/
/*! all exports used */
/***/ (function (module, exports, __webpack_require__) {

                var global = __webpack_require__(/*! ../internals/global */ "./node_modules/core-js/internals/global.js");

                module.exports = global;


                /***/
            }),

/***/ "./node_modules/core-js/internals/perform.js":
/*!***************************************************!*\
  !*** ./node_modules/core-js/internals/perform.js ***!
  \***************************************************/
/*! all exports used */
/***/ (function (module, exports) {

                module.exports = function (exec) {
                    try {
                        return { error: false, value: exec() };
                    } catch (error) {
                        return { error: true, value: error };
                    }
                };


                /***/
            }),

/***/ "./node_modules/core-js/internals/promise-resolve.js":
/*!***********************************************************!*\
  !*** ./node_modules/core-js/internals/promise-resolve.js ***!
  \***********************************************************/
/*! all exports used */
/***/ (function (module, exports, __webpack_require__) {

                var anObject = __webpack_require__(/*! ../internals/an-object */ "./node_modules/core-js/internals/an-object.js");
                var isObject = __webpack_require__(/*! ../internals/is-object */ "./node_modules/core-js/internals/is-object.js");
                var newPromiseCapability = __webpack_require__(/*! ../internals/new-promise-capability */ "./node_modules/core-js/internals/new-promise-capability.js");

                module.exports = function (C, x) {
                    anObject(C);
                    if (isObject(x) && x.constructor === C) return x;
                    var promiseCapability = newPromiseCapability.f(C);
                    var resolve = promiseCapability.resolve;
                    resolve(x);
                    return promiseCapability.promise;
                };


                /***/
            }),

/***/ "./node_modules/core-js/internals/redefine-all.js":
/*!********************************************************!*\
  !*** ./node_modules/core-js/internals/redefine-all.js ***!
  \********************************************************/
/*! all exports used */
/***/ (function (module, exports, __webpack_require__) {

                var redefine = __webpack_require__(/*! ../internals/redefine */ "./node_modules/core-js/internals/redefine.js");

                module.exports = function (target, src, options) {
                    for (var key in src) redefine(target, key, src[key], options);
                    return target;
                };


                /***/
            }),

/***/ "./node_modules/core-js/internals/redefine.js":
/*!****************************************************!*\
  !*** ./node_modules/core-js/internals/redefine.js ***!
  \****************************************************/
/*! all exports used */
/***/ (function (module, exports, __webpack_require__) {

                var global = __webpack_require__(/*! ../internals/global */ "./node_modules/core-js/internals/global.js");
                var createNonEnumerableProperty = __webpack_require__(/*! ../internals/create-non-enumerable-property */ "./node_modules/core-js/internals/create-non-enumerable-property.js");
                var has = __webpack_require__(/*! ../internals/has */ "./node_modules/core-js/internals/has.js");
                var setGlobal = __webpack_require__(/*! ../internals/set-global */ "./node_modules/core-js/internals/set-global.js");
                var inspectSource = __webpack_require__(/*! ../internals/inspect-source */ "./node_modules/core-js/internals/inspect-source.js");
                var InternalStateModule = __webpack_require__(/*! ../internals/internal-state */ "./node_modules/core-js/internals/internal-state.js");

                var getInternalState = InternalStateModule.get;
                var enforceInternalState = InternalStateModule.enforce;
                var TEMPLATE = String(String).split('String');

                (module.exports = function (O, key, value, options) {
                    var unsafe = options ? !!options.unsafe : false;
                    var simple = options ? !!options.enumerable : false;
                    var noTargetGet = options ? !!options.noTargetGet : false;
                    if (typeof value == 'function') {
                        if (typeof key == 'string' && !has(value, 'name')) createNonEnumerableProperty(value, 'name', key);
                        enforceInternalState(value).source = TEMPLATE.join(typeof key == 'string' ? key : '');
                    }
                    if (O === global) {
                        if (simple) O[key] = value;
                        else setGlobal(key, value);
                        return;
                    } else if (!unsafe) {
                        delete O[key];
                    } else if (!noTargetGet && O[key]) {
                        simple = true;
                    }
                    if (simple) O[key] = value;
                    else createNonEnumerableProperty(O, key, value);
                    // add fake Function#toString for correct work wrapped methods / constructors with methods like LoDash isNative
                })(Function.prototype, 'toString', function toString() {
                    return typeof this == 'function' && getInternalState(this).source || inspectSource(this);
                });


                /***/
            }),

/***/ "./node_modules/core-js/internals/regexp-exec-abstract.js":
/*!****************************************************************!*\
  !*** ./node_modules/core-js/internals/regexp-exec-abstract.js ***!
  \****************************************************************/
/*! all exports used */
/***/ (function (module, exports, __webpack_require__) {

                var classof = __webpack_require__(/*! ./classof-raw */ "./node_modules/core-js/internals/classof-raw.js");
                var regexpExec = __webpack_require__(/*! ./regexp-exec */ "./node_modules/core-js/internals/regexp-exec.js");

                // `RegExpExec` abstract operation
                // https://tc39.github.io/ecma262/#sec-regexpexec
                module.exports = function (R, S) {
                    var exec = R.exec;
                    if (typeof exec === 'function') {
                        var result = exec.call(R, S);
                        if (typeof result !== 'object') {
                            throw TypeError('RegExp exec method returned something other than an Object or null');
                        }
                        return result;
                    }

                    if (classof(R) !== 'RegExp') {
                        throw TypeError('RegExp#exec called on incompatible receiver');
                    }

                    return regexpExec.call(R, S);
                };



                /***/
            }),

/***/ "./node_modules/core-js/internals/regexp-exec.js":
/*!*******************************************************!*\
  !*** ./node_modules/core-js/internals/regexp-exec.js ***!
  \*******************************************************/
/*! all exports used */
/***/ (function (module, exports, __webpack_require__) {

                "use strict";

                var regexpFlags = __webpack_require__(/*! ./regexp-flags */ "./node_modules/core-js/internals/regexp-flags.js");
                var stickyHelpers = __webpack_require__(/*! ./regexp-sticky-helpers */ "./node_modules/core-js/internals/regexp-sticky-helpers.js");

                var nativeExec = RegExp.prototype.exec;
                // This always refers to the native implementation, because the
                // String#replace polyfill uses ./fix-regexp-well-known-symbol-logic.js,
                // which loads this file before patching the method.
                var nativeReplace = String.prototype.replace;

                var patchedExec = nativeExec;

                var UPDATES_LAST_INDEX_WRONG = (function () {
                    var re1 = /a/;
                    var re2 = /b*/g;
                    nativeExec.call(re1, 'a');
                    nativeExec.call(re2, 'a');
                    return re1.lastIndex !== 0 || re2.lastIndex !== 0;
                })();

                var UNSUPPORTED_Y = stickyHelpers.UNSUPPORTED_Y || stickyHelpers.BROKEN_CARET;

                // nonparticipating capturing group, copied from es5-shim's String#split patch.
                var NPCG_INCLUDED = /()??/.exec('')[1] !== undefined;

                var PATCH = UPDATES_LAST_INDEX_WRONG || NPCG_INCLUDED || UNSUPPORTED_Y;

                if (PATCH) {
                    patchedExec = function exec(str) {
                        var re = this;
                        var lastIndex, reCopy, match, i;
                        var sticky = UNSUPPORTED_Y && re.sticky;
                        var flags = regexpFlags.call(re);
                        var source = re.source;
                        var charsAdded = 0;
                        var strCopy = str;

                        if (sticky) {
                            flags = flags.replace('y', '');
                            if (flags.indexOf('g') === -1) {
                                flags += 'g';
                            }

                            strCopy = String(str).slice(re.lastIndex);
                            // Support anchored sticky behavior.
                            if (re.lastIndex > 0 && (!re.multiline || re.multiline && str[re.lastIndex - 1] !== '\n')) {
                                source = '(?: ' + source + ')';
                                strCopy = ' ' + strCopy;
                                charsAdded++;
                            }
                            // ^(? + rx + ) is needed, in combination with some str slicing, to
                            // simulate the 'y' flag.
                            reCopy = new RegExp('^(?:' + source + ')', flags);
                        }

                        if (NPCG_INCLUDED) {
                            reCopy = new RegExp('^' + source + '$(?!\\s)', flags);
                        }
                        if (UPDATES_LAST_INDEX_WRONG) lastIndex = re.lastIndex;

                        match = nativeExec.call(sticky ? reCopy : re, strCopy);

                        if (sticky) {
                            if (match) {
                                match.input = match.input.slice(charsAdded);
                                match[0] = match[0].slice(charsAdded);
                                match.index = re.lastIndex;
                                re.lastIndex += match[0].length;
                            } else re.lastIndex = 0;
                        } else if (UPDATES_LAST_INDEX_WRONG && match) {
                            re.lastIndex = re.global ? match.index + match[0].length : lastIndex;
                        }
                        if (NPCG_INCLUDED && match && match.length > 1) {
                            // Fix browsers whose `exec` methods don't consistently return `undefined`
                            // for NPCG, like IE8. NOTE: This doesn' work for /(.?)?/
                            nativeReplace.call(match[0], reCopy, function () {
                                for (i = 1; i < arguments.length - 2; i++) {
                                    if (arguments[i] === undefined) match[i] = undefined;
                                }
                            });
                        }

                        return match;
                    };
                }

                module.exports = patchedExec;


                /***/
            }),

/***/ "./node_modules/core-js/internals/regexp-flags.js":
/*!********************************************************!*\
  !*** ./node_modules/core-js/internals/regexp-flags.js ***!
  \********************************************************/
/*! all exports used */
/***/ (function (module, exports, __webpack_require__) {

                "use strict";

                var anObject = __webpack_require__(/*! ../internals/an-object */ "./node_modules/core-js/internals/an-object.js");

                // `RegExp.prototype.flags` getter implementation
                // https://tc39.github.io/ecma262/#sec-get-regexp.prototype.flags
                module.exports = function () {
                    var that = anObject(this);
                    var result = '';
                    if (that.global) result += 'g';
                    if (that.ignoreCase) result += 'i';
                    if (that.multiline) result += 'm';
                    if (that.dotAll) result += 's';
                    if (that.unicode) result += 'u';
                    if (that.sticky) result += 'y';
                    return result;
                };


                /***/
            }),

/***/ "./node_modules/core-js/internals/regexp-sticky-helpers.js":
/*!*****************************************************************!*\
  !*** ./node_modules/core-js/internals/regexp-sticky-helpers.js ***!
  \*****************************************************************/
/*! all exports used */
/***/ (function (module, exports, __webpack_require__) {

                "use strict";


                var fails = __webpack_require__(/*! ./fails */ "./node_modules/core-js/internals/fails.js");

                // babel-minify transpiles RegExp('a', 'y') -> /a/y and it causes SyntaxError,
                // so we use an intermediate function.
                function RE(s, f) {
                    return RegExp(s, f);
                }

                exports.UNSUPPORTED_Y = fails(function () {
                    // babel-minify transpiles RegExp('a', 'y') -> /a/y and it causes SyntaxError
                    var re = RE('a', 'y');
                    re.lastIndex = 2;
                    return re.exec('abcd') != null;
                });

                exports.BROKEN_CARET = fails(function () {
                    // https://bugzilla.mozilla.org/show_bug.cgi?id=773687
                    var re = RE('^r', 'gy');
                    re.lastIndex = 2;
                    return re.exec('str') != null;
                });


                /***/
            }),

/***/ "./node_modules/core-js/internals/require-object-coercible.js":
/*!********************************************************************!*\
  !*** ./node_modules/core-js/internals/require-object-coercible.js ***!
  \********************************************************************/
/*! all exports used */
/***/ (function (module, exports) {

                // `RequireObjectCoercible` abstract operation
                // https://tc39.github.io/ecma262/#sec-requireobjectcoercible
                module.exports = function (it) {
                    if (it == undefined) throw TypeError("Can't call method on " + it);
                    return it;
                };


                /***/
            }),

/***/ "./node_modules/core-js/internals/same-value.js":
/*!******************************************************!*\
  !*** ./node_modules/core-js/internals/same-value.js ***!
  \******************************************************/
/*! all exports used */
/***/ (function (module, exports) {

                // `SameValue` abstract operation
                // https://tc39.github.io/ecma262/#sec-samevalue
                module.exports = Object.is || function is(x, y) {
                    // eslint-disable-next-line no-self-compare
                    return x === y ? x !== 0 || 1 / x === 1 / y : x != x && y != y;
                };


                /***/
            }),

/***/ "./node_modules/core-js/internals/set-global.js":
/*!******************************************************!*\
  !*** ./node_modules/core-js/internals/set-global.js ***!
  \******************************************************/
/*! all exports used */
/***/ (function (module, exports, __webpack_require__) {

                var global = __webpack_require__(/*! ../internals/global */ "./node_modules/core-js/internals/global.js");
                var createNonEnumerableProperty = __webpack_require__(/*! ../internals/create-non-enumerable-property */ "./node_modules/core-js/internals/create-non-enumerable-property.js");

                module.exports = function (key, value) {
                    try {
                        createNonEnumerableProperty(global, key, value);
                    } catch (error) {
                        global[key] = value;
                    } return value;
                };


                /***/
            }),

/***/ "./node_modules/core-js/internals/set-species.js":
/*!*******************************************************!*\
  !*** ./node_modules/core-js/internals/set-species.js ***!
  \*******************************************************/
/*! all exports used */
/***/ (function (module, exports, __webpack_require__) {

                "use strict";

                var getBuiltIn = __webpack_require__(/*! ../internals/get-built-in */ "./node_modules/core-js/internals/get-built-in.js");
                var definePropertyModule = __webpack_require__(/*! ../internals/object-define-property */ "./node_modules/core-js/internals/object-define-property.js");
                var wellKnownSymbol = __webpack_require__(/*! ../internals/well-known-symbol */ "./node_modules/core-js/internals/well-known-symbol.js");
                var DESCRIPTORS = __webpack_require__(/*! ../internals/descriptors */ "./node_modules/core-js/internals/descriptors.js");

                var SPECIES = wellKnownSymbol('species');

                module.exports = function (CONSTRUCTOR_NAME) {
                    var Constructor = getBuiltIn(CONSTRUCTOR_NAME);
                    var defineProperty = definePropertyModule.f;

                    if (DESCRIPTORS && Constructor && !Constructor[SPECIES]) {
                        defineProperty(Constructor, SPECIES, {
                            configurable: true,
                            get: function () { return this; }
                        });
                    }
                };


                /***/
            }),

/***/ "./node_modules/core-js/internals/set-to-string-tag.js":
/*!*************************************************************!*\
  !*** ./node_modules/core-js/internals/set-to-string-tag.js ***!
  \*************************************************************/
/*! all exports used */
/***/ (function (module, exports, __webpack_require__) {

                var defineProperty = __webpack_require__(/*! ../internals/object-define-property */ "./node_modules/core-js/internals/object-define-property.js").f;
                var has = __webpack_require__(/*! ../internals/has */ "./node_modules/core-js/internals/has.js");
                var wellKnownSymbol = __webpack_require__(/*! ../internals/well-known-symbol */ "./node_modules/core-js/internals/well-known-symbol.js");

                var TO_STRING_TAG = wellKnownSymbol('toStringTag');

                module.exports = function (it, TAG, STATIC) {
                    if (it && !has(it = STATIC ? it : it.prototype, TO_STRING_TAG)) {
                        defineProperty(it, TO_STRING_TAG, { configurable: true, value: TAG });
                    }
                };


                /***/
            }),

/***/ "./node_modules/core-js/internals/shared-key.js":
/*!******************************************************!*\
  !*** ./node_modules/core-js/internals/shared-key.js ***!
  \******************************************************/
/*! all exports used */
/***/ (function (module, exports, __webpack_require__) {

                var shared = __webpack_require__(/*! ../internals/shared */ "./node_modules/core-js/internals/shared.js");
                var uid = __webpack_require__(/*! ../internals/uid */ "./node_modules/core-js/internals/uid.js");

                var keys = shared('keys');

                module.exports = function (key) {
                    return keys[key] || (keys[key] = uid(key));
                };


                /***/
            }),

/***/ "./node_modules/core-js/internals/shared-store.js":
/*!********************************************************!*\
  !*** ./node_modules/core-js/internals/shared-store.js ***!
  \********************************************************/
/*! all exports used */
/***/ (function (module, exports, __webpack_require__) {

                var global = __webpack_require__(/*! ../internals/global */ "./node_modules/core-js/internals/global.js");
                var setGlobal = __webpack_require__(/*! ../internals/set-global */ "./node_modules/core-js/internals/set-global.js");

                var SHARED = '__core-js_shared__';
                var store = global[SHARED] || setGlobal(SHARED, {});

                module.exports = store;


                /***/
            }),

/***/ "./node_modules/core-js/internals/shared.js":
/*!**************************************************!*\
  !*** ./node_modules/core-js/internals/shared.js ***!
  \**************************************************/
/*! all exports used */
/***/ (function (module, exports, __webpack_require__) {

                var IS_PURE = __webpack_require__(/*! ../internals/is-pure */ "./node_modules/core-js/internals/is-pure.js");
                var store = __webpack_require__(/*! ../internals/shared-store */ "./node_modules/core-js/internals/shared-store.js");

                (module.exports = function (key, value) {
                    return store[key] || (store[key] = value !== undefined ? value : {});
                })('versions', []).push({
                    version: '3.6.5',
                    mode: IS_PURE ? 'pure' : 'global',
                    copyright: '© 2020 Denis Pushkarev (zloirock.ru)'
                });


                /***/
            }),

/***/ "./node_modules/core-js/internals/species-constructor.js":
/*!***************************************************************!*\
  !*** ./node_modules/core-js/internals/species-constructor.js ***!
  \***************************************************************/
/*! all exports used */
/***/ (function (module, exports, __webpack_require__) {

                var anObject = __webpack_require__(/*! ../internals/an-object */ "./node_modules/core-js/internals/an-object.js");
                var aFunction = __webpack_require__(/*! ../internals/a-function */ "./node_modules/core-js/internals/a-function.js");
                var wellKnownSymbol = __webpack_require__(/*! ../internals/well-known-symbol */ "./node_modules/core-js/internals/well-known-symbol.js");

                var SPECIES = wellKnownSymbol('species');

                // `SpeciesConstructor` abstract operation
                // https://tc39.github.io/ecma262/#sec-speciesconstructor
                module.exports = function (O, defaultConstructor) {
                    var C = anObject(O).constructor;
                    var S;
                    return C === undefined || (S = anObject(C)[SPECIES]) == undefined ? defaultConstructor : aFunction(S);
                };


                /***/
            }),

/***/ "./node_modules/core-js/internals/string-html-forced.js":
/*!**************************************************************!*\
  !*** ./node_modules/core-js/internals/string-html-forced.js ***!
  \**************************************************************/
/*! all exports used */
/***/ (function (module, exports, __webpack_require__) {

                var fails = __webpack_require__(/*! ../internals/fails */ "./node_modules/core-js/internals/fails.js");

                // check the existence of a method, lowercase
                // of a tag and escaping quotes in arguments
                module.exports = function (METHOD_NAME) {
                    return fails(function () {
                        var test = ''[METHOD_NAME]('"');
                        return test !== test.toLowerCase() || test.split('"').length > 3;
                    });
                };


                /***/
            }),

/***/ "./node_modules/core-js/internals/string-multibyte.js":
/*!************************************************************!*\
  !*** ./node_modules/core-js/internals/string-multibyte.js ***!
  \************************************************************/
/*! all exports used */
/***/ (function (module, exports, __webpack_require__) {

                var toInteger = __webpack_require__(/*! ../internals/to-integer */ "./node_modules/core-js/internals/to-integer.js");
                var requireObjectCoercible = __webpack_require__(/*! ../internals/require-object-coercible */ "./node_modules/core-js/internals/require-object-coercible.js");

                // `String.prototype.{ codePointAt, at }` methods implementation
                var createMethod = function (CONVERT_TO_STRING) {
                    return function ($this, pos) {
                        var S = String(requireObjectCoercible($this));
                        var position = toInteger(pos);
                        var size = S.length;
                        var first, second;
                        if (position < 0 || position >= size) return CONVERT_TO_STRING ? '' : undefined;
                        first = S.charCodeAt(position);
                        return first < 0xD800 || first > 0xDBFF || position + 1 === size
                            || (second = S.charCodeAt(position + 1)) < 0xDC00 || second > 0xDFFF
                            ? CONVERT_TO_STRING ? S.charAt(position) : first
                            : CONVERT_TO_STRING ? S.slice(position, position + 2) : (first - 0xD800 << 10) + (second - 0xDC00) + 0x10000;
                    };
                };

                module.exports = {
                    // `String.prototype.codePointAt` method
                    // https://tc39.github.io/ecma262/#sec-string.prototype.codepointat
                    codeAt: createMethod(false),
                    // `String.prototype.at` method
                    // https://github.com/mathiasbynens/String.prototype.at
                    charAt: createMethod(true)
                };


                /***/
            }),

/***/ "./node_modules/core-js/internals/string-punycode-to-ascii.js":
/*!********************************************************************!*\
  !*** ./node_modules/core-js/internals/string-punycode-to-ascii.js ***!
  \********************************************************************/
/*! all exports used */
/***/ (function (module, exports, __webpack_require__) {

                "use strict";

                // based on https://github.com/bestiejs/punycode.js/blob/master/punycode.js
                var maxInt = 2147483647; // aka. 0x7FFFFFFF or 2^31-1
                var base = 36;
                var tMin = 1;
                var tMax = 26;
                var skew = 38;
                var damp = 700;
                var initialBias = 72;
                var initialN = 128; // 0x80
                var delimiter = '-'; // '\x2D'
                var regexNonASCII = /[^\0-\u007E]/; // non-ASCII chars
                var regexSeparators = /[.\u3002\uFF0E\uFF61]/g; // RFC 3490 separators
                var OVERFLOW_ERROR = 'Overflow: input needs wider integers to process';
                var baseMinusTMin = base - tMin;
                var floor = Math.floor;
                var stringFromCharCode = String.fromCharCode;

                /**
                 * Creates an array containing the numeric code points of each Unicode
                 * character in the string. While JavaScript uses UCS-2 internally,
                 * this function will convert a pair of surrogate halves (each of which
                 * UCS-2 exposes as separate characters) into a single code point,
                 * matching UTF-16.
                 */
                var ucs2decode = function (string) {
                    var output = [];
                    var counter = 0;
                    var length = string.length;
                    while (counter < length) {
                        var value = string.charCodeAt(counter++);
                        if (value >= 0xD800 && value <= 0xDBFF && counter < length) {
                            // It's a high surrogate, and there is a next character.
                            var extra = string.charCodeAt(counter++);
                            if ((extra & 0xFC00) == 0xDC00) { // Low surrogate.
                                output.push(((value & 0x3FF) << 10) + (extra & 0x3FF) + 0x10000);
                            } else {
                                // It's an unmatched surrogate; only append this code unit, in case the
                                // next code unit is the high surrogate of a surrogate pair.
                                output.push(value);
                                counter--;
                            }
                        } else {
                            output.push(value);
                        }
                    }
                    return output;
                };

                /**
                 * Converts a digit/integer into a basic code point.
                 */
                var digitToBasic = function (digit) {
                    //  0..25 map to ASCII a..z or A..Z
                    // 26..35 map to ASCII 0..9
                    return digit + 22 + 75 * (digit < 26);
                };

                /**
                 * Bias adaptation function as per section 3.4 of RFC 3492.
                 * https://tools.ietf.org/html/rfc3492#section-3.4
                 */
                var adapt = function (delta, numPoints, firstTime) {
                    var k = 0;
                    delta = firstTime ? floor(delta / damp) : delta >> 1;
                    delta += floor(delta / numPoints);
                    for (; delta > baseMinusTMin * tMax >> 1; k += base) {
                        delta = floor(delta / baseMinusTMin);
                    }
                    return floor(k + (baseMinusTMin + 1) * delta / (delta + skew));
                };

                /**
                 * Converts a string of Unicode symbols (e.g. a domain name label) to a
                 * Punycode string of ASCII-only symbols.
                 */
                // eslint-disable-next-line  max-statements
                var encode = function (input) {
                    var output = [];

                    // Convert the input in UCS-2 to an array of Unicode code points.
                    input = ucs2decode(input);

                    // Cache the length.
                    var inputLength = input.length;

                    // Initialize the state.
                    var n = initialN;
                    var delta = 0;
                    var bias = initialBias;
                    var i, currentValue;

                    // Handle the basic code points.
                    for (i = 0; i < input.length; i++) {
                        currentValue = input[i];
                        if (currentValue < 0x80) {
                            output.push(stringFromCharCode(currentValue));
                        }
                    }

                    var basicLength = output.length; // number of basic code points.
                    var handledCPCount = basicLength; // number of code points that have been handled;

                    // Finish the basic string with a delimiter unless it's empty.
                    if (basicLength) {
                        output.push(delimiter);
                    }

                    // Main encoding loop:
                    while (handledCPCount < inputLength) {
                        // All non-basic code points < n have been handled already. Find the next larger one:
                        var m = maxInt;
                        for (i = 0; i < input.length; i++) {
                            currentValue = input[i];
                            if (currentValue >= n && currentValue < m) {
                                m = currentValue;
                            }
                        }

                        // Increase `delta` enough to advance the decoder's <n,i> state to <m,0>, but guard against overflow.
                        var handledCPCountPlusOne = handledCPCount + 1;
                        if (m - n > floor((maxInt - delta) / handledCPCountPlusOne)) {
                            throw RangeError(OVERFLOW_ERROR);
                        }

                        delta += (m - n) * handledCPCountPlusOne;
                        n = m;

                        for (i = 0; i < input.length; i++) {
                            currentValue = input[i];
                            if (currentValue < n && ++delta > maxInt) {
                                throw RangeError(OVERFLOW_ERROR);
                            }
                            if (currentValue == n) {
                                // Represent delta as a generalized variable-length integer.
                                var q = delta;
                                for (var k = base; /* no condition */; k += base) {
                                    var t = k <= bias ? tMin : (k >= bias + tMax ? tMax : k - bias);
                                    if (q < t) break;
                                    var qMinusT = q - t;
                                    var baseMinusT = base - t;
                                    output.push(stringFromCharCode(digitToBasic(t + qMinusT % baseMinusT)));
                                    q = floor(qMinusT / baseMinusT);
                                }

                                output.push(stringFromCharCode(digitToBasic(q)));
                                bias = adapt(delta, handledCPCountPlusOne, handledCPCount == basicLength);
                                delta = 0;
                                ++handledCPCount;
                            }
                        }

                        ++delta;
                        ++n;
                    }
                    return output.join('');
                };

                module.exports = function (input) {
                    var encoded = [];
                    var labels = input.toLowerCase().replace(regexSeparators, '\u002E').split('.');
                    var i, label;
                    for (i = 0; i < labels.length; i++) {
                        label = labels[i];
                        encoded.push(regexNonASCII.test(label) ? 'xn--' + encode(label) : label);
                    }
                    return encoded.join('.');
                };


                /***/
            }),

/***/ "./node_modules/core-js/internals/string-trim-forced.js":
/*!**************************************************************!*\
  !*** ./node_modules/core-js/internals/string-trim-forced.js ***!
  \**************************************************************/
/*! all exports used */
/***/ (function (module, exports, __webpack_require__) {

                var fails = __webpack_require__(/*! ../internals/fails */ "./node_modules/core-js/internals/fails.js");
                var whitespaces = __webpack_require__(/*! ../internals/whitespaces */ "./node_modules/core-js/internals/whitespaces.js");

                var non = '\u200B\u0085\u180E';

                // check that a method works with the correct list
                // of whitespaces and has a correct name
                module.exports = function (METHOD_NAME) {
                    return fails(function () {
                        return !!whitespaces[METHOD_NAME]() || non[METHOD_NAME]() != non || whitespaces[METHOD_NAME].name !== METHOD_NAME;
                    });
                };


                /***/
            }),

/***/ "./node_modules/core-js/internals/string-trim.js":
/*!*******************************************************!*\
  !*** ./node_modules/core-js/internals/string-trim.js ***!
  \*******************************************************/
/*! all exports used */
/***/ (function (module, exports, __webpack_require__) {

                var requireObjectCoercible = __webpack_require__(/*! ../internals/require-object-coercible */ "./node_modules/core-js/internals/require-object-coercible.js");
                var whitespaces = __webpack_require__(/*! ../internals/whitespaces */ "./node_modules/core-js/internals/whitespaces.js");

                var whitespace = '[' + whitespaces + ']';
                var ltrim = RegExp('^' + whitespace + whitespace + '*');
                var rtrim = RegExp(whitespace + whitespace + '*$');

                // `String.prototype.{ trim, trimStart, trimEnd, trimLeft, trimRight }` methods implementation
                var createMethod = function (TYPE) {
                    return function ($this) {
                        var string = String(requireObjectCoercible($this));
                        if (TYPE & 1) string = string.replace(ltrim, '');
                        if (TYPE & 2) string = string.replace(rtrim, '');
                        return string;
                    };
                };

                module.exports = {
                    // `String.prototype.{ trimLeft, trimStart }` methods
                    // https://tc39.github.io/ecma262/#sec-string.prototype.trimstart
                    start: createMethod(1),
                    // `String.prototype.{ trimRight, trimEnd }` methods
                    // https://tc39.github.io/ecma262/#sec-string.prototype.trimend
                    end: createMethod(2),
                    // `String.prototype.trim` method
                    // https://tc39.github.io/ecma262/#sec-string.prototype.trim
                    trim: createMethod(3)
                };


                /***/
            }),

/***/ "./node_modules/core-js/internals/task.js":
/*!************************************************!*\
  !*** ./node_modules/core-js/internals/task.js ***!
  \************************************************/
/*! all exports used */
/***/ (function (module, exports, __webpack_require__) {

                var global = __webpack_require__(/*! ../internals/global */ "./node_modules/core-js/internals/global.js");
                var fails = __webpack_require__(/*! ../internals/fails */ "./node_modules/core-js/internals/fails.js");
                var classof = __webpack_require__(/*! ../internals/classof-raw */ "./node_modules/core-js/internals/classof-raw.js");
                var bind = __webpack_require__(/*! ../internals/function-bind-context */ "./node_modules/core-js/internals/function-bind-context.js");
                var html = __webpack_require__(/*! ../internals/html */ "./node_modules/core-js/internals/html.js");
                var createElement = __webpack_require__(/*! ../internals/document-create-element */ "./node_modules/core-js/internals/document-create-element.js");
                var IS_IOS = __webpack_require__(/*! ../internals/engine-is-ios */ "./node_modules/core-js/internals/engine-is-ios.js");

                var location = global.location;
                var set = global.setImmediate;
                var clear = global.clearImmediate;
                var process = global.process;
                var MessageChannel = global.MessageChannel;
                var Dispatch = global.Dispatch;
                var counter = 0;
                var queue = {};
                var ONREADYSTATECHANGE = 'onreadystatechange';
                var defer, channel, port;

                var run = function (id) {
                    // eslint-disable-next-line no-prototype-builtins
                    if (queue.hasOwnProperty(id)) {
                        var fn = queue[id];
                        delete queue[id];
                        fn();
                    }
                };

                var runner = function (id) {
                    return function () {
                        run(id);
                    };
                };

                var listener = function (event) {
                    run(event.data);
                };

                var post = function (id) {
                    // old engines have not location.origin
                    global.postMessage(id + '', location.protocol + '//' + location.host);
                };

                // Node.js 0.9+ & IE10+ has setImmediate, otherwise:
                if (!set || !clear) {
                    set = function setImmediate(fn) {
                        var args = [];
                        var i = 1;
                        while (arguments.length > i) args.push(arguments[i++]);
                        queue[++counter] = function () {
                            // eslint-disable-next-line no-new-func
                            (typeof fn == 'function' ? fn : Function(fn)).apply(undefined, args);
                        };
                        defer(counter);
                        return counter;
                    };
                    clear = function clearImmediate(id) {
                        delete queue[id];
                    };
                    // Node.js 0.8-
                    if (classof(process) == 'process') {
                        defer = function (id) {
                            process.nextTick(runner(id));
                        };
                        // Sphere (JS game engine) Dispatch API
                    } else if (Dispatch && Dispatch.now) {
                        defer = function (id) {
                            Dispatch.now(runner(id));
                        };
                        // Browsers with MessageChannel, includes WebWorkers
                        // except iOS - https://github.com/zloirock/core-js/issues/624
                    } else if (MessageChannel && !IS_IOS) {
                        channel = new MessageChannel();
                        port = channel.port2;
                        channel.port1.onmessage = listener;
                        defer = bind(port.postMessage, port, 1);
                        // Browsers with postMessage, skip WebWorkers
                        // IE8 has postMessage, but it's sync & typeof its postMessage is 'object'
                    } else if (
                        global.addEventListener &&
                        typeof postMessage == 'function' &&
                        !global.importScripts &&
                        !fails(post) &&
                        location.protocol !== 'file:'
                    ) {
                        defer = post;
                        global.addEventListener('message', listener, false);
                        // IE8-
                    } else if (ONREADYSTATECHANGE in createElement('script')) {
                        defer = function (id) {
                            html.appendChild(createElement('script'))[ONREADYSTATECHANGE] = function () {
                                html.removeChild(this);
                                run(id);
                            };
                        };
                        // Rest old browsers
                    } else {
                        defer = function (id) {
                            setTimeout(runner(id), 0);
                        };
                    }
                }

                module.exports = {
                    set: set,
                    clear: clear
                };


                /***/
            }),

/***/ "./node_modules/core-js/internals/to-absolute-index.js":
/*!*************************************************************!*\
  !*** ./node_modules/core-js/internals/to-absolute-index.js ***!
  \*************************************************************/
/*! all exports used */
/***/ (function (module, exports, __webpack_require__) {

                var toInteger = __webpack_require__(/*! ../internals/to-integer */ "./node_modules/core-js/internals/to-integer.js");

                var max = Math.max;
                var min = Math.min;

                // Helper for a popular repeating case of the spec:
                // Let integer be ? ToInteger(index).
                // If integer < 0, let result be max((length + integer), 0); else let result be min(integer, length).
                module.exports = function (index, length) {
                    var integer = toInteger(index);
                    return integer < 0 ? max(integer + length, 0) : min(integer, length);
                };


                /***/
            }),

/***/ "./node_modules/core-js/internals/to-indexed-object.js":
/*!*************************************************************!*\
  !*** ./node_modules/core-js/internals/to-indexed-object.js ***!
  \*************************************************************/
/*! all exports used */
/***/ (function (module, exports, __webpack_require__) {

                // toObject with fallback for non-array-like ES3 strings
                var IndexedObject = __webpack_require__(/*! ../internals/indexed-object */ "./node_modules/core-js/internals/indexed-object.js");
                var requireObjectCoercible = __webpack_require__(/*! ../internals/require-object-coercible */ "./node_modules/core-js/internals/require-object-coercible.js");

                module.exports = function (it) {
                    return IndexedObject(requireObjectCoercible(it));
                };


                /***/
            }),

/***/ "./node_modules/core-js/internals/to-integer.js":
/*!******************************************************!*\
  !*** ./node_modules/core-js/internals/to-integer.js ***!
  \******************************************************/
/*! all exports used */
/***/ (function (module, exports) {

                var ceil = Math.ceil;
                var floor = Math.floor;

                // `ToInteger` abstract operation
                // https://tc39.github.io/ecma262/#sec-tointeger
                module.exports = function (argument) {
                    return isNaN(argument = +argument) ? 0 : (argument > 0 ? floor : ceil)(argument);
                };


                /***/
            }),

/***/ "./node_modules/core-js/internals/to-length.js":
/*!*****************************************************!*\
  !*** ./node_modules/core-js/internals/to-length.js ***!
  \*****************************************************/
/*! all exports used */
/***/ (function (module, exports, __webpack_require__) {

                var toInteger = __webpack_require__(/*! ../internals/to-integer */ "./node_modules/core-js/internals/to-integer.js");

                var min = Math.min;

                // `ToLength` abstract operation
                // https://tc39.github.io/ecma262/#sec-tolength
                module.exports = function (argument) {
                    return argument > 0 ? min(toInteger(argument), 0x1FFFFFFFFFFFFF) : 0; // 2 ** 53 - 1 == 9007199254740991
                };


                /***/
            }),

/***/ "./node_modules/core-js/internals/to-object.js":
/*!*****************************************************!*\
  !*** ./node_modules/core-js/internals/to-object.js ***!
  \*****************************************************/
/*! all exports used */
/***/ (function (module, exports, __webpack_require__) {

                var requireObjectCoercible = __webpack_require__(/*! ../internals/require-object-coercible */ "./node_modules/core-js/internals/require-object-coercible.js");

                // `ToObject` abstract operation
                // https://tc39.github.io/ecma262/#sec-toobject
                module.exports = function (argument) {
                    return Object(requireObjectCoercible(argument));
                };


                /***/
            }),

/***/ "./node_modules/core-js/internals/to-primitive.js":
/*!********************************************************!*\
  !*** ./node_modules/core-js/internals/to-primitive.js ***!
  \********************************************************/
/*! all exports used */
/***/ (function (module, exports, __webpack_require__) {

                var isObject = __webpack_require__(/*! ../internals/is-object */ "./node_modules/core-js/internals/is-object.js");

                // `ToPrimitive` abstract operation
                // https://tc39.github.io/ecma262/#sec-toprimitive
                // instead of the ES6 spec version, we didn't implement @@toPrimitive case
                // and the second argument - flag - preferred type is a string
                module.exports = function (input, PREFERRED_STRING) {
                    if (!isObject(input)) return input;
                    var fn, val;
                    if (PREFERRED_STRING && typeof (fn = input.toString) == 'function' && !isObject(val = fn.call(input))) return val;
                    if (typeof (fn = input.valueOf) == 'function' && !isObject(val = fn.call(input))) return val;
                    if (!PREFERRED_STRING && typeof (fn = input.toString) == 'function' && !isObject(val = fn.call(input))) return val;
                    throw TypeError("Can't convert object to primitive value");
                };


                /***/
            }),

/***/ "./node_modules/core-js/internals/to-string-tag-support.js":
/*!*****************************************************************!*\
  !*** ./node_modules/core-js/internals/to-string-tag-support.js ***!
  \*****************************************************************/
/*! all exports used */
/***/ (function (module, exports, __webpack_require__) {

                var wellKnownSymbol = __webpack_require__(/*! ../internals/well-known-symbol */ "./node_modules/core-js/internals/well-known-symbol.js");

                var TO_STRING_TAG = wellKnownSymbol('toStringTag');
                var test = {};

                test[TO_STRING_TAG] = 'z';

                module.exports = String(test) === '[object z]';


                /***/
            }),

/***/ "./node_modules/core-js/internals/uid.js":
/*!***********************************************!*\
  !*** ./node_modules/core-js/internals/uid.js ***!
  \***********************************************/
/*! all exports used */
/***/ (function (module, exports) {

                var id = 0;
                var postfix = Math.random();

                module.exports = function (key) {
                    return 'Symbol(' + String(key === undefined ? '' : key) + ')_' + (++id + postfix).toString(36);
                };


                /***/
            }),

/***/ "./node_modules/core-js/internals/use-symbol-as-uid.js":
/*!*************************************************************!*\
  !*** ./node_modules/core-js/internals/use-symbol-as-uid.js ***!
  \*************************************************************/
/*! all exports used */
/***/ (function (module, exports, __webpack_require__) {

                var NATIVE_SYMBOL = __webpack_require__(/*! ../internals/native-symbol */ "./node_modules/core-js/internals/native-symbol.js");

                module.exports = NATIVE_SYMBOL
                    // eslint-disable-next-line no-undef
                    && !Symbol.sham
                    // eslint-disable-next-line no-undef
                    && typeof Symbol.iterator == 'symbol';


                /***/
            }),

/***/ "./node_modules/core-js/internals/well-known-symbol.js":
/*!*************************************************************!*\
  !*** ./node_modules/core-js/internals/well-known-symbol.js ***!
  \*************************************************************/
/*! all exports used */
/***/ (function (module, exports, __webpack_require__) {

                var global = __webpack_require__(/*! ../internals/global */ "./node_modules/core-js/internals/global.js");
                var shared = __webpack_require__(/*! ../internals/shared */ "./node_modules/core-js/internals/shared.js");
                var has = __webpack_require__(/*! ../internals/has */ "./node_modules/core-js/internals/has.js");
                var uid = __webpack_require__(/*! ../internals/uid */ "./node_modules/core-js/internals/uid.js");
                var NATIVE_SYMBOL = __webpack_require__(/*! ../internals/native-symbol */ "./node_modules/core-js/internals/native-symbol.js");
                var USE_SYMBOL_AS_UID = __webpack_require__(/*! ../internals/use-symbol-as-uid */ "./node_modules/core-js/internals/use-symbol-as-uid.js");

                var WellKnownSymbolsStore = shared('wks');
                var Symbol = global.Symbol;
                var createWellKnownSymbol = USE_SYMBOL_AS_UID ? Symbol : Symbol && Symbol.withoutSetter || uid;

                module.exports = function (name) {
                    if (!has(WellKnownSymbolsStore, name)) {
                        if (NATIVE_SYMBOL && has(Symbol, name)) WellKnownSymbolsStore[name] = Symbol[name];
                        else WellKnownSymbolsStore[name] = createWellKnownSymbol('Symbol.' + name);
                    } return WellKnownSymbolsStore[name];
                };


                /***/
            }),

/***/ "./node_modules/core-js/internals/whitespaces.js":
/*!*******************************************************!*\
  !*** ./node_modules/core-js/internals/whitespaces.js ***!
  \*******************************************************/
/*! all exports used */
/***/ (function (module, exports) {

                // a string of all valid unicode whitespaces
                // eslint-disable-next-line max-len
                module.exports = '\u0009\u000A\u000B\u000C\u000D\u0020\u00A0\u1680\u2000\u2001\u2002\u2003\u2004\u2005\u2006\u2007\u2008\u2009\u200A\u202F\u205F\u3000\u2028\u2029\uFEFF';


                /***/
            }),

/***/ "./node_modules/core-js/modules/es.array.concat.js":
/*!*********************************************************!*\
  !*** ./node_modules/core-js/modules/es.array.concat.js ***!
  \*********************************************************/
/*! all exports used */
/***/ (function (module, exports, __webpack_require__) {

                "use strict";

                var $ = __webpack_require__(/*! ../internals/export */ "./node_modules/core-js/internals/export.js");
                var fails = __webpack_require__(/*! ../internals/fails */ "./node_modules/core-js/internals/fails.js");
                var isArray = __webpack_require__(/*! ../internals/is-array */ "./node_modules/core-js/internals/is-array.js");
                var isObject = __webpack_require__(/*! ../internals/is-object */ "./node_modules/core-js/internals/is-object.js");
                var toObject = __webpack_require__(/*! ../internals/to-object */ "./node_modules/core-js/internals/to-object.js");
                var toLength = __webpack_require__(/*! ../internals/to-length */ "./node_modules/core-js/internals/to-length.js");
                var createProperty = __webpack_require__(/*! ../internals/create-property */ "./node_modules/core-js/internals/create-property.js");
                var arraySpeciesCreate = __webpack_require__(/*! ../internals/array-species-create */ "./node_modules/core-js/internals/array-species-create.js");
                var arrayMethodHasSpeciesSupport = __webpack_require__(/*! ../internals/array-method-has-species-support */ "./node_modules/core-js/internals/array-method-has-species-support.js");
                var wellKnownSymbol = __webpack_require__(/*! ../internals/well-known-symbol */ "./node_modules/core-js/internals/well-known-symbol.js");
                var V8_VERSION = __webpack_require__(/*! ../internals/engine-v8-version */ "./node_modules/core-js/internals/engine-v8-version.js");

                var IS_CONCAT_SPREADABLE = wellKnownSymbol('isConcatSpreadable');
                var MAX_SAFE_INTEGER = 0x1FFFFFFFFFFFFF;
                var MAXIMUM_ALLOWED_INDEX_EXCEEDED = 'Maximum allowed index exceeded';

                // We can't use this feature detection in V8 since it causes
                // deoptimization and serious performance degradation
                // https://github.com/zloirock/core-js/issues/679
                var IS_CONCAT_SPREADABLE_SUPPORT = V8_VERSION >= 51 || !fails(function () {
                    var array = [];
                    array[IS_CONCAT_SPREADABLE] = false;
                    return array.concat()[0] !== array;
                });

                var SPECIES_SUPPORT = arrayMethodHasSpeciesSupport('concat');

                var isConcatSpreadable = function (O) {
                    if (!isObject(O)) return false;
                    var spreadable = O[IS_CONCAT_SPREADABLE];
                    return spreadable !== undefined ? !!spreadable : isArray(O);
                };

                var FORCED = !IS_CONCAT_SPREADABLE_SUPPORT || !SPECIES_SUPPORT;

                // `Array.prototype.concat` method
                // https://tc39.github.io/ecma262/#sec-array.prototype.concat
                // with adding support of @@isConcatSpreadable and @@species
                $({ target: 'Array', proto: true, forced: FORCED }, {
                    concat: function concat(arg) { // eslint-disable-line no-unused-vars
                        var O = toObject(this);
                        var A = arraySpeciesCreate(O, 0);
                        var n = 0;
                        var i, k, length, len, E;
                        for (i = -1, length = arguments.length; i < length; i++) {
                            E = i === -1 ? O : arguments[i];
                            if (isConcatSpreadable(E)) {
                                len = toLength(E.length);
                                if (n + len > MAX_SAFE_INTEGER) throw TypeError(MAXIMUM_ALLOWED_INDEX_EXCEEDED);
                                for (k = 0; k < len; k++, n++) if (k in E) createProperty(A, n, E[k]);
                            } else {
                                if (n >= MAX_SAFE_INTEGER) throw TypeError(MAXIMUM_ALLOWED_INDEX_EXCEEDED);
                                createProperty(A, n++, E);
                            }
                        }
                        A.length = n;
                        return A;
                    }
                });


                /***/
            }),

/***/ "./node_modules/core-js/modules/es.array.filter.js":
/*!*********************************************************!*\
  !*** ./node_modules/core-js/modules/es.array.filter.js ***!
  \*********************************************************/
/*! all exports used */
/***/ (function (module, exports, __webpack_require__) {

                "use strict";

                var $ = __webpack_require__(/*! ../internals/export */ "./node_modules/core-js/internals/export.js");
                var $filter = __webpack_require__(/*! ../internals/array-iteration */ "./node_modules/core-js/internals/array-iteration.js").filter;
                var arrayMethodHasSpeciesSupport = __webpack_require__(/*! ../internals/array-method-has-species-support */ "./node_modules/core-js/internals/array-method-has-species-support.js");
                var arrayMethodUsesToLength = __webpack_require__(/*! ../internals/array-method-uses-to-length */ "./node_modules/core-js/internals/array-method-uses-to-length.js");

                var HAS_SPECIES_SUPPORT = arrayMethodHasSpeciesSupport('filter');
                // Edge 14- issue
                var USES_TO_LENGTH = arrayMethodUsesToLength('filter');

                // `Array.prototype.filter` method
                // https://tc39.github.io/ecma262/#sec-array.prototype.filter
                // with adding support of @@species
                $({ target: 'Array', proto: true, forced: !HAS_SPECIES_SUPPORT || !USES_TO_LENGTH }, {
                    filter: function filter(callbackfn /* , thisArg */) {
                        return $filter(this, callbackfn, arguments.length > 1 ? arguments[1] : undefined);
                    }
                });


                /***/
            }),

/***/ "./node_modules/core-js/modules/es.array.find.js":
/*!*******************************************************!*\
  !*** ./node_modules/core-js/modules/es.array.find.js ***!
  \*******************************************************/
/*! all exports used */
/***/ (function (module, exports, __webpack_require__) {

                "use strict";

                var $ = __webpack_require__(/*! ../internals/export */ "./node_modules/core-js/internals/export.js");
                var $find = __webpack_require__(/*! ../internals/array-iteration */ "./node_modules/core-js/internals/array-iteration.js").find;
                var addToUnscopables = __webpack_require__(/*! ../internals/add-to-unscopables */ "./node_modules/core-js/internals/add-to-unscopables.js");
                var arrayMethodUsesToLength = __webpack_require__(/*! ../internals/array-method-uses-to-length */ "./node_modules/core-js/internals/array-method-uses-to-length.js");

                var FIND = 'find';
                var SKIPS_HOLES = true;

                var USES_TO_LENGTH = arrayMethodUsesToLength(FIND);

                // Shouldn't skip holes
                if (FIND in []) Array(1)[FIND](function () { SKIPS_HOLES = false; });

                // `Array.prototype.find` method
                // https://tc39.github.io/ecma262/#sec-array.prototype.find
                $({ target: 'Array', proto: true, forced: SKIPS_HOLES || !USES_TO_LENGTH }, {
                    find: function find(callbackfn /* , that = undefined */) {
                        return $find(this, callbackfn, arguments.length > 1 ? arguments[1] : undefined);
                    }
                });

                // https://tc39.github.io/ecma262/#sec-array.prototype-@@unscopables
                addToUnscopables(FIND);


                /***/
            }),

/***/ "./node_modules/core-js/modules/es.array.flat.js":
/*!*******************************************************!*\
  !*** ./node_modules/core-js/modules/es.array.flat.js ***!
  \*******************************************************/
/*! all exports used */
/***/ (function (module, exports, __webpack_require__) {

                "use strict";

                var $ = __webpack_require__(/*! ../internals/export */ "./node_modules/core-js/internals/export.js");
                var flattenIntoArray = __webpack_require__(/*! ../internals/flatten-into-array */ "./node_modules/core-js/internals/flatten-into-array.js");
                var toObject = __webpack_require__(/*! ../internals/to-object */ "./node_modules/core-js/internals/to-object.js");
                var toLength = __webpack_require__(/*! ../internals/to-length */ "./node_modules/core-js/internals/to-length.js");
                var toInteger = __webpack_require__(/*! ../internals/to-integer */ "./node_modules/core-js/internals/to-integer.js");
                var arraySpeciesCreate = __webpack_require__(/*! ../internals/array-species-create */ "./node_modules/core-js/internals/array-species-create.js");

                // `Array.prototype.flat` method
                // https://github.com/tc39/proposal-flatMap
                $({ target: 'Array', proto: true }, {
                    flat: function flat(/* depthArg = 1 */) {
                        var depthArg = arguments.length ? arguments[0] : undefined;
                        var O = toObject(this);
                        var sourceLen = toLength(O.length);
                        var A = arraySpeciesCreate(O, 0);
                        A.length = flattenIntoArray(A, O, O, sourceLen, 0, depthArg === undefined ? 1 : toInteger(depthArg));
                        return A;
                    }
                });


                /***/
            }),

/***/ "./node_modules/core-js/modules/es.array.for-each.js":
/*!***********************************************************!*\
  !*** ./node_modules/core-js/modules/es.array.for-each.js ***!
  \***********************************************************/
/*! all exports used */
/***/ (function (module, exports, __webpack_require__) {

                "use strict";

                var $ = __webpack_require__(/*! ../internals/export */ "./node_modules/core-js/internals/export.js");
                var forEach = __webpack_require__(/*! ../internals/array-for-each */ "./node_modules/core-js/internals/array-for-each.js");

                // `Array.prototype.forEach` method
                // https://tc39.github.io/ecma262/#sec-array.prototype.foreach
                $({ target: 'Array', proto: true, forced: [].forEach != forEach }, {
                    forEach: forEach
                });


                /***/
            }),

/***/ "./node_modules/core-js/modules/es.array.index-of.js":
/*!***********************************************************!*\
  !*** ./node_modules/core-js/modules/es.array.index-of.js ***!
  \***********************************************************/
/*! all exports used */
/***/ (function (module, exports, __webpack_require__) {

                "use strict";

                var $ = __webpack_require__(/*! ../internals/export */ "./node_modules/core-js/internals/export.js");
                var $indexOf = __webpack_require__(/*! ../internals/array-includes */ "./node_modules/core-js/internals/array-includes.js").indexOf;
                var arrayMethodIsStrict = __webpack_require__(/*! ../internals/array-method-is-strict */ "./node_modules/core-js/internals/array-method-is-strict.js");
                var arrayMethodUsesToLength = __webpack_require__(/*! ../internals/array-method-uses-to-length */ "./node_modules/core-js/internals/array-method-uses-to-length.js");

                var nativeIndexOf = [].indexOf;

                var NEGATIVE_ZERO = !!nativeIndexOf && 1 / [1].indexOf(1, -0) < 0;
                var STRICT_METHOD = arrayMethodIsStrict('indexOf');
                var USES_TO_LENGTH = arrayMethodUsesToLength('indexOf', { ACCESSORS: true, 1: 0 });

                // `Array.prototype.indexOf` method
                // https://tc39.github.io/ecma262/#sec-array.prototype.indexof
                $({ target: 'Array', proto: true, forced: NEGATIVE_ZERO || !STRICT_METHOD || !USES_TO_LENGTH }, {
                    indexOf: function indexOf(searchElement /* , fromIndex = 0 */) {
                        return NEGATIVE_ZERO
                            // convert -0 to +0
                            ? nativeIndexOf.apply(this, arguments) || 0
                            : $indexOf(this, searchElement, arguments.length > 1 ? arguments[1] : undefined);
                    }
                });


                /***/
            }),

/***/ "./node_modules/core-js/modules/es.array.iterator.js":
/*!***********************************************************!*\
  !*** ./node_modules/core-js/modules/es.array.iterator.js ***!
  \***********************************************************/
/*! all exports used */
/***/ (function (module, exports, __webpack_require__) {

                "use strict";

                var toIndexedObject = __webpack_require__(/*! ../internals/to-indexed-object */ "./node_modules/core-js/internals/to-indexed-object.js");
                var addToUnscopables = __webpack_require__(/*! ../internals/add-to-unscopables */ "./node_modules/core-js/internals/add-to-unscopables.js");
                var Iterators = __webpack_require__(/*! ../internals/iterators */ "./node_modules/core-js/internals/iterators.js");
                var InternalStateModule = __webpack_require__(/*! ../internals/internal-state */ "./node_modules/core-js/internals/internal-state.js");
                var defineIterator = __webpack_require__(/*! ../internals/define-iterator */ "./node_modules/core-js/internals/define-iterator.js");

                var ARRAY_ITERATOR = 'Array Iterator';
                var setInternalState = InternalStateModule.set;
                var getInternalState = InternalStateModule.getterFor(ARRAY_ITERATOR);

                // `Array.prototype.entries` method
                // https://tc39.github.io/ecma262/#sec-array.prototype.entries
                // `Array.prototype.keys` method
                // https://tc39.github.io/ecma262/#sec-array.prototype.keys
                // `Array.prototype.values` method
                // https://tc39.github.io/ecma262/#sec-array.prototype.values
                // `Array.prototype[@@iterator]` method
                // https://tc39.github.io/ecma262/#sec-array.prototype-@@iterator
                // `CreateArrayIterator` internal method
                // https://tc39.github.io/ecma262/#sec-createarrayiterator
                module.exports = defineIterator(Array, 'Array', function (iterated, kind) {
                    setInternalState(this, {
                        type: ARRAY_ITERATOR,
                        target: toIndexedObject(iterated), // target
                        index: 0,                          // next index
                        kind: kind                         // kind
                    });
                    // `%ArrayIteratorPrototype%.next` method
                    // https://tc39.github.io/ecma262/#sec-%arrayiteratorprototype%.next
                }, function () {
                    var state = getInternalState(this);
                    var target = state.target;
                    var kind = state.kind;
                    var index = state.index++;
                    if (!target || index >= target.length) {
                        state.target = undefined;
                        return { value: undefined, done: true };
                    }
                    if (kind == 'keys') return { value: index, done: false };
                    if (kind == 'values') return { value: target[index], done: false };
                    return { value: [index, target[index]], done: false };
                }, 'values');

                // argumentsList[@@iterator] is %ArrayProto_values%
                // https://tc39.github.io/ecma262/#sec-createunmappedargumentsobject
                // https://tc39.github.io/ecma262/#sec-createmappedargumentsobject
                Iterators.Arguments = Iterators.Array;

                // https://tc39.github.io/ecma262/#sec-array.prototype-@@unscopables
                addToUnscopables('keys');
                addToUnscopables('values');
                addToUnscopables('entries');


                /***/
            }),

/***/ "./node_modules/core-js/modules/es.array.join.js":
/*!*******************************************************!*\
  !*** ./node_modules/core-js/modules/es.array.join.js ***!
  \*******************************************************/
/*! all exports used */
/***/ (function (module, exports, __webpack_require__) {

                "use strict";

                var $ = __webpack_require__(/*! ../internals/export */ "./node_modules/core-js/internals/export.js");
                var IndexedObject = __webpack_require__(/*! ../internals/indexed-object */ "./node_modules/core-js/internals/indexed-object.js");
                var toIndexedObject = __webpack_require__(/*! ../internals/to-indexed-object */ "./node_modules/core-js/internals/to-indexed-object.js");
                var arrayMethodIsStrict = __webpack_require__(/*! ../internals/array-method-is-strict */ "./node_modules/core-js/internals/array-method-is-strict.js");

                var nativeJoin = [].join;

                var ES3_STRINGS = IndexedObject != Object;
                var STRICT_METHOD = arrayMethodIsStrict('join', ',');

                // `Array.prototype.join` method
                // https://tc39.github.io/ecma262/#sec-array.prototype.join
                $({ target: 'Array', proto: true, forced: ES3_STRINGS || !STRICT_METHOD }, {
                    join: function join(separator) {
                        return nativeJoin.call(toIndexedObject(this), separator === undefined ? ',' : separator);
                    }
                });


                /***/
            }),

/***/ "./node_modules/core-js/modules/es.array.map.js":
/*!******************************************************!*\
  !*** ./node_modules/core-js/modules/es.array.map.js ***!
  \******************************************************/
/*! all exports used */
/***/ (function (module, exports, __webpack_require__) {

                "use strict";

                var $ = __webpack_require__(/*! ../internals/export */ "./node_modules/core-js/internals/export.js");
                var $map = __webpack_require__(/*! ../internals/array-iteration */ "./node_modules/core-js/internals/array-iteration.js").map;
                var arrayMethodHasSpeciesSupport = __webpack_require__(/*! ../internals/array-method-has-species-support */ "./node_modules/core-js/internals/array-method-has-species-support.js");
                var arrayMethodUsesToLength = __webpack_require__(/*! ../internals/array-method-uses-to-length */ "./node_modules/core-js/internals/array-method-uses-to-length.js");

                var HAS_SPECIES_SUPPORT = arrayMethodHasSpeciesSupport('map');
                // FF49- issue
                var USES_TO_LENGTH = arrayMethodUsesToLength('map');

                // `Array.prototype.map` method
                // https://tc39.github.io/ecma262/#sec-array.prototype.map
                // with adding support of @@species
                $({ target: 'Array', proto: true, forced: !HAS_SPECIES_SUPPORT || !USES_TO_LENGTH }, {
                    map: function map(callbackfn /* , thisArg */) {
                        return $map(this, callbackfn, arguments.length > 1 ? arguments[1] : undefined);
                    }
                });


                /***/
            }),

/***/ "./node_modules/core-js/modules/es.array.reduce.js":
/*!*********************************************************!*\
  !*** ./node_modules/core-js/modules/es.array.reduce.js ***!
  \*********************************************************/
/*! all exports used */
/***/ (function (module, exports, __webpack_require__) {

                "use strict";

                var $ = __webpack_require__(/*! ../internals/export */ "./node_modules/core-js/internals/export.js");
                var $reduce = __webpack_require__(/*! ../internals/array-reduce */ "./node_modules/core-js/internals/array-reduce.js").left;
                var arrayMethodIsStrict = __webpack_require__(/*! ../internals/array-method-is-strict */ "./node_modules/core-js/internals/array-method-is-strict.js");
                var arrayMethodUsesToLength = __webpack_require__(/*! ../internals/array-method-uses-to-length */ "./node_modules/core-js/internals/array-method-uses-to-length.js");

                var STRICT_METHOD = arrayMethodIsStrict('reduce');
                var USES_TO_LENGTH = arrayMethodUsesToLength('reduce', { 1: 0 });

                // `Array.prototype.reduce` method
                // https://tc39.github.io/ecma262/#sec-array.prototype.reduce
                $({ target: 'Array', proto: true, forced: !STRICT_METHOD || !USES_TO_LENGTH }, {
                    reduce: function reduce(callbackfn /* , initialValue */) {
                        return $reduce(this, callbackfn, arguments.length, arguments.length > 1 ? arguments[1] : undefined);
                    }
                });


                /***/
            }),

/***/ "./node_modules/core-js/modules/es.array.splice.js":
/*!*********************************************************!*\
  !*** ./node_modules/core-js/modules/es.array.splice.js ***!
  \*********************************************************/
/*! all exports used */
/***/ (function (module, exports, __webpack_require__) {

                "use strict";

                var $ = __webpack_require__(/*! ../internals/export */ "./node_modules/core-js/internals/export.js");
                var toAbsoluteIndex = __webpack_require__(/*! ../internals/to-absolute-index */ "./node_modules/core-js/internals/to-absolute-index.js");
                var toInteger = __webpack_require__(/*! ../internals/to-integer */ "./node_modules/core-js/internals/to-integer.js");
                var toLength = __webpack_require__(/*! ../internals/to-length */ "./node_modules/core-js/internals/to-length.js");
                var toObject = __webpack_require__(/*! ../internals/to-object */ "./node_modules/core-js/internals/to-object.js");
                var arraySpeciesCreate = __webpack_require__(/*! ../internals/array-species-create */ "./node_modules/core-js/internals/array-species-create.js");
                var createProperty = __webpack_require__(/*! ../internals/create-property */ "./node_modules/core-js/internals/create-property.js");
                var arrayMethodHasSpeciesSupport = __webpack_require__(/*! ../internals/array-method-has-species-support */ "./node_modules/core-js/internals/array-method-has-species-support.js");
                var arrayMethodUsesToLength = __webpack_require__(/*! ../internals/array-method-uses-to-length */ "./node_modules/core-js/internals/array-method-uses-to-length.js");

                var HAS_SPECIES_SUPPORT = arrayMethodHasSpeciesSupport('splice');
                var USES_TO_LENGTH = arrayMethodUsesToLength('splice', { ACCESSORS: true, 0: 0, 1: 2 });

                var max = Math.max;
                var min = Math.min;
                var MAX_SAFE_INTEGER = 0x1FFFFFFFFFFFFF;
                var MAXIMUM_ALLOWED_LENGTH_EXCEEDED = 'Maximum allowed length exceeded';

                // `Array.prototype.splice` method
                // https://tc39.github.io/ecma262/#sec-array.prototype.splice
                // with adding support of @@species
                $({ target: 'Array', proto: true, forced: !HAS_SPECIES_SUPPORT || !USES_TO_LENGTH }, {
                    splice: function splice(start, deleteCount /* , ...items */) {
                        var O = toObject(this);
                        var len = toLength(O.length);
                        var actualStart = toAbsoluteIndex(start, len);
                        var argumentsLength = arguments.length;
                        var insertCount, actualDeleteCount, A, k, from, to;
                        if (argumentsLength === 0) {
                            insertCount = actualDeleteCount = 0;
                        } else if (argumentsLength === 1) {
                            insertCount = 0;
                            actualDeleteCount = len - actualStart;
                        } else {
                            insertCount = argumentsLength - 2;
                            actualDeleteCount = min(max(toInteger(deleteCount), 0), len - actualStart);
                        }
                        if (len + insertCount - actualDeleteCount > MAX_SAFE_INTEGER) {
                            throw TypeError(MAXIMUM_ALLOWED_LENGTH_EXCEEDED);
                        }
                        A = arraySpeciesCreate(O, actualDeleteCount);
                        for (k = 0; k < actualDeleteCount; k++) {
                            from = actualStart + k;
                            if (from in O) createProperty(A, k, O[from]);
                        }
                        A.length = actualDeleteCount;
                        if (insertCount < actualDeleteCount) {
                            for (k = actualStart; k < len - actualDeleteCount; k++) {
                                from = k + actualDeleteCount;
                                to = k + insertCount;
                                if (from in O) O[to] = O[from];
                                else delete O[to];
                            }
                            for (k = len; k > len - actualDeleteCount + insertCount; k--) delete O[k - 1];
                        } else if (insertCount > actualDeleteCount) {
                            for (k = len - actualDeleteCount; k > actualStart; k--) {
                                from = k + actualDeleteCount - 1;
                                to = k + insertCount - 1;
                                if (from in O) O[to] = O[from];
                                else delete O[to];
                            }
                        }
                        for (k = 0; k < insertCount; k++) {
                            O[k + actualStart] = arguments[k + 2];
                        }
                        O.length = len - actualDeleteCount + insertCount;
                        return A;
                    }
                });


                /***/
            }),

/***/ "./node_modules/core-js/modules/es.array.unscopables.flat.js":
/*!*******************************************************************!*\
  !*** ./node_modules/core-js/modules/es.array.unscopables.flat.js ***!
  \*******************************************************************/
/*! all exports used */
/***/ (function (module, exports, __webpack_require__) {

                // this method was added to unscopables after implementation
                // in popular engines, so it's moved to a separate module
                var addToUnscopables = __webpack_require__(/*! ../internals/add-to-unscopables */ "./node_modules/core-js/internals/add-to-unscopables.js");

                addToUnscopables('flat');


                /***/
            }),

/***/ "./node_modules/core-js/modules/es.function.name.js":
/*!**********************************************************!*\
  !*** ./node_modules/core-js/modules/es.function.name.js ***!
  \**********************************************************/
/*! all exports used */
/***/ (function (module, exports, __webpack_require__) {

                var DESCRIPTORS = __webpack_require__(/*! ../internals/descriptors */ "./node_modules/core-js/internals/descriptors.js");
                var defineProperty = __webpack_require__(/*! ../internals/object-define-property */ "./node_modules/core-js/internals/object-define-property.js").f;

                var FunctionPrototype = Function.prototype;
                var FunctionPrototypeToString = FunctionPrototype.toString;
                var nameRE = /^\s*function ([^ (]*)/;
                var NAME = 'name';

                // Function instances `.name` property
                // https://tc39.github.io/ecma262/#sec-function-instances-name
                if (DESCRIPTORS && !(NAME in FunctionPrototype)) {
                    defineProperty(FunctionPrototype, NAME, {
                        configurable: true,
                        get: function () {
                            try {
                                return FunctionPrototypeToString.call(this).match(nameRE)[1];
                            } catch (error) {
                                return '';
                            }
                        }
                    });
                }


                /***/
            }),

/***/ "./node_modules/core-js/modules/es.number.constructor.js":
/*!***************************************************************!*\
  !*** ./node_modules/core-js/modules/es.number.constructor.js ***!
  \***************************************************************/
/*! all exports used */
/***/ (function (module, exports, __webpack_require__) {

                "use strict";

                var DESCRIPTORS = __webpack_require__(/*! ../internals/descriptors */ "./node_modules/core-js/internals/descriptors.js");
                var global = __webpack_require__(/*! ../internals/global */ "./node_modules/core-js/internals/global.js");
                var isForced = __webpack_require__(/*! ../internals/is-forced */ "./node_modules/core-js/internals/is-forced.js");
                var redefine = __webpack_require__(/*! ../internals/redefine */ "./node_modules/core-js/internals/redefine.js");
                var has = __webpack_require__(/*! ../internals/has */ "./node_modules/core-js/internals/has.js");
                var classof = __webpack_require__(/*! ../internals/classof-raw */ "./node_modules/core-js/internals/classof-raw.js");
                var inheritIfRequired = __webpack_require__(/*! ../internals/inherit-if-required */ "./node_modules/core-js/internals/inherit-if-required.js");
                var toPrimitive = __webpack_require__(/*! ../internals/to-primitive */ "./node_modules/core-js/internals/to-primitive.js");
                var fails = __webpack_require__(/*! ../internals/fails */ "./node_modules/core-js/internals/fails.js");
                var create = __webpack_require__(/*! ../internals/object-create */ "./node_modules/core-js/internals/object-create.js");
                var getOwnPropertyNames = __webpack_require__(/*! ../internals/object-get-own-property-names */ "./node_modules/core-js/internals/object-get-own-property-names.js").f;
                var getOwnPropertyDescriptor = __webpack_require__(/*! ../internals/object-get-own-property-descriptor */ "./node_modules/core-js/internals/object-get-own-property-descriptor.js").f;
                var defineProperty = __webpack_require__(/*! ../internals/object-define-property */ "./node_modules/core-js/internals/object-define-property.js").f;
                var trim = __webpack_require__(/*! ../internals/string-trim */ "./node_modules/core-js/internals/string-trim.js").trim;

                var NUMBER = 'Number';
                var NativeNumber = global[NUMBER];
                var NumberPrototype = NativeNumber.prototype;

                // Opera ~12 has broken Object#toString
                var BROKEN_CLASSOF = classof(create(NumberPrototype)) == NUMBER;

                // `ToNumber` abstract operation
                // https://tc39.github.io/ecma262/#sec-tonumber
                var toNumber = function (argument) {
                    var it = toPrimitive(argument, false);
                    var first, third, radix, maxCode, digits, length, index, code;
                    if (typeof it == 'string' && it.length > 2) {
                        it = trim(it);
                        first = it.charCodeAt(0);
                        if (first === 43 || first === 45) {
                            third = it.charCodeAt(2);
                            if (third === 88 || third === 120) return NaN; // Number('+0x1') should be NaN, old V8 fix
                        } else if (first === 48) {
                            switch (it.charCodeAt(1)) {
                                case 66: case 98: radix = 2; maxCode = 49; break; // fast equal of /^0b[01]+$/i
                                case 79: case 111: radix = 8; maxCode = 55; break; // fast equal of /^0o[0-7]+$/i
                                default: return +it;
                            }
                            digits = it.slice(2);
                            length = digits.length;
                            for (index = 0; index < length; index++) {
                                code = digits.charCodeAt(index);
                                // parseInt parses a string to a first unavailable symbol
                                // but ToNumber should return NaN if a string contains unavailable symbols
                                if (code < 48 || code > maxCode) return NaN;
                            } return parseInt(digits, radix);
                        }
                    } return +it;
                };

                // `Number` constructor
                // https://tc39.github.io/ecma262/#sec-number-constructor
                if (isForced(NUMBER, !NativeNumber(' 0o1') || !NativeNumber('0b1') || NativeNumber('+0x1'))) {
                    var NumberWrapper = function Number(value) {
                        var it = arguments.length < 1 ? 0 : value;
                        var dummy = this;
                        return dummy instanceof NumberWrapper
                            // check on 1..constructor(foo) case
                            && (BROKEN_CLASSOF ? fails(function () { NumberPrototype.valueOf.call(dummy); }) : classof(dummy) != NUMBER)
                            ? inheritIfRequired(new NativeNumber(toNumber(it)), dummy, NumberWrapper) : toNumber(it);
                    };
                    for (var keys = DESCRIPTORS ? getOwnPropertyNames(NativeNumber) : (
                        // ES3:
                        'MAX_VALUE,MIN_VALUE,NaN,NEGATIVE_INFINITY,POSITIVE_INFINITY,' +
                        // ES2015 (in case, if modules with ES2015 Number statics required before):
                        'EPSILON,isFinite,isInteger,isNaN,isSafeInteger,MAX_SAFE_INTEGER,' +
                        'MIN_SAFE_INTEGER,parseFloat,parseInt,isInteger'
                    ).split(','), j = 0, key; keys.length > j; j++) {
                        if (has(NativeNumber, key = keys[j]) && !has(NumberWrapper, key)) {
                            defineProperty(NumberWrapper, key, getOwnPropertyDescriptor(NativeNumber, key));
                        }
                    }
                    NumberWrapper.prototype = NumberPrototype;
                    NumberPrototype.constructor = NumberWrapper;
                    redefine(global, NUMBER, NumberWrapper);
                }


                /***/
            }),

/***/ "./node_modules/core-js/modules/es.object.assign.js":
/*!**********************************************************!*\
  !*** ./node_modules/core-js/modules/es.object.assign.js ***!
  \**********************************************************/
/*! all exports used */
/***/ (function (module, exports, __webpack_require__) {

                var $ = __webpack_require__(/*! ../internals/export */ "./node_modules/core-js/internals/export.js");
                var assign = __webpack_require__(/*! ../internals/object-assign */ "./node_modules/core-js/internals/object-assign.js");

                // `Object.assign` method
                // https://tc39.github.io/ecma262/#sec-object.assign
                $({ target: 'Object', stat: true, forced: Object.assign !== assign }, {
                    assign: assign
                });


                /***/
            }),

/***/ "./node_modules/core-js/modules/es.object.keys.js":
/*!********************************************************!*\
  !*** ./node_modules/core-js/modules/es.object.keys.js ***!
  \********************************************************/
/*! all exports used */
/***/ (function (module, exports, __webpack_require__) {

                var $ = __webpack_require__(/*! ../internals/export */ "./node_modules/core-js/internals/export.js");
                var toObject = __webpack_require__(/*! ../internals/to-object */ "./node_modules/core-js/internals/to-object.js");
                var nativeKeys = __webpack_require__(/*! ../internals/object-keys */ "./node_modules/core-js/internals/object-keys.js");
                var fails = __webpack_require__(/*! ../internals/fails */ "./node_modules/core-js/internals/fails.js");

                var FAILS_ON_PRIMITIVES = fails(function () { nativeKeys(1); });

                // `Object.keys` method
                // https://tc39.github.io/ecma262/#sec-object.keys
                $({ target: 'Object', stat: true, forced: FAILS_ON_PRIMITIVES }, {
                    keys: function keys(it) {
                        return nativeKeys(toObject(it));
                    }
                });


                /***/
            }),

/***/ "./node_modules/core-js/modules/es.object.to-string.js":
/*!*************************************************************!*\
  !*** ./node_modules/core-js/modules/es.object.to-string.js ***!
  \*************************************************************/
/*! all exports used */
/***/ (function (module, exports, __webpack_require__) {

                var TO_STRING_TAG_SUPPORT = __webpack_require__(/*! ../internals/to-string-tag-support */ "./node_modules/core-js/internals/to-string-tag-support.js");
                var redefine = __webpack_require__(/*! ../internals/redefine */ "./node_modules/core-js/internals/redefine.js");
                var toString = __webpack_require__(/*! ../internals/object-to-string */ "./node_modules/core-js/internals/object-to-string.js");

                // `Object.prototype.toString` method
                // https://tc39.github.io/ecma262/#sec-object.prototype.tostring
                if (!TO_STRING_TAG_SUPPORT) {
                    redefine(Object.prototype, 'toString', toString, { unsafe: true });
                }


                /***/
            }),

/***/ "./node_modules/core-js/modules/es.promise.finally.js":
/*!************************************************************!*\
  !*** ./node_modules/core-js/modules/es.promise.finally.js ***!
  \************************************************************/
/*! all exports used */
/***/ (function (module, exports, __webpack_require__) {

                "use strict";

                var $ = __webpack_require__(/*! ../internals/export */ "./node_modules/core-js/internals/export.js");
                var IS_PURE = __webpack_require__(/*! ../internals/is-pure */ "./node_modules/core-js/internals/is-pure.js");
                var NativePromise = __webpack_require__(/*! ../internals/native-promise-constructor */ "./node_modules/core-js/internals/native-promise-constructor.js");
                var fails = __webpack_require__(/*! ../internals/fails */ "./node_modules/core-js/internals/fails.js");
                var getBuiltIn = __webpack_require__(/*! ../internals/get-built-in */ "./node_modules/core-js/internals/get-built-in.js");
                var speciesConstructor = __webpack_require__(/*! ../internals/species-constructor */ "./node_modules/core-js/internals/species-constructor.js");
                var promiseResolve = __webpack_require__(/*! ../internals/promise-resolve */ "./node_modules/core-js/internals/promise-resolve.js");
                var redefine = __webpack_require__(/*! ../internals/redefine */ "./node_modules/core-js/internals/redefine.js");

                // Safari bug https://bugs.webkit.org/show_bug.cgi?id=200829
                var NON_GENERIC = !!NativePromise && fails(function () {
                    NativePromise.prototype['finally'].call({ then: function () { /* empty */ } }, function () { /* empty */ });
                });

                // `Promise.prototype.finally` method
                // https://tc39.github.io/ecma262/#sec-promise.prototype.finally
                $({ target: 'Promise', proto: true, real: true, forced: NON_GENERIC }, {
                    'finally': function (onFinally) {
                        var C = speciesConstructor(this, getBuiltIn('Promise'));
                        var isFunction = typeof onFinally == 'function';
                        return this.then(
                            isFunction ? function (x) {
                                return promiseResolve(C, onFinally()).then(function () { return x; });
                            } : onFinally,
                            isFunction ? function (e) {
                                return promiseResolve(C, onFinally()).then(function () { throw e; });
                            } : onFinally
                        );
                    }
                });

                // patch native Promise.prototype for native async functions
                if (!IS_PURE && typeof NativePromise == 'function' && !NativePromise.prototype['finally']) {
                    redefine(NativePromise.prototype, 'finally', getBuiltIn('Promise').prototype['finally']);
                }


                /***/
            }),

/***/ "./node_modules/core-js/modules/es.promise.js":
/*!****************************************************!*\
  !*** ./node_modules/core-js/modules/es.promise.js ***!
  \****************************************************/
/*! all exports used */
/***/ (function (module, exports, __webpack_require__) {

                "use strict";

                var $ = __webpack_require__(/*! ../internals/export */ "./node_modules/core-js/internals/export.js");
                var IS_PURE = __webpack_require__(/*! ../internals/is-pure */ "./node_modules/core-js/internals/is-pure.js");
                var global = __webpack_require__(/*! ../internals/global */ "./node_modules/core-js/internals/global.js");
                var getBuiltIn = __webpack_require__(/*! ../internals/get-built-in */ "./node_modules/core-js/internals/get-built-in.js");
                var NativePromise = __webpack_require__(/*! ../internals/native-promise-constructor */ "./node_modules/core-js/internals/native-promise-constructor.js");
                var redefine = __webpack_require__(/*! ../internals/redefine */ "./node_modules/core-js/internals/redefine.js");
                var redefineAll = __webpack_require__(/*! ../internals/redefine-all */ "./node_modules/core-js/internals/redefine-all.js");
                var setToStringTag = __webpack_require__(/*! ../internals/set-to-string-tag */ "./node_modules/core-js/internals/set-to-string-tag.js");
                var setSpecies = __webpack_require__(/*! ../internals/set-species */ "./node_modules/core-js/internals/set-species.js");
                var isObject = __webpack_require__(/*! ../internals/is-object */ "./node_modules/core-js/internals/is-object.js");
                var aFunction = __webpack_require__(/*! ../internals/a-function */ "./node_modules/core-js/internals/a-function.js");
                var anInstance = __webpack_require__(/*! ../internals/an-instance */ "./node_modules/core-js/internals/an-instance.js");
                var classof = __webpack_require__(/*! ../internals/classof-raw */ "./node_modules/core-js/internals/classof-raw.js");
                var inspectSource = __webpack_require__(/*! ../internals/inspect-source */ "./node_modules/core-js/internals/inspect-source.js");
                var iterate = __webpack_require__(/*! ../internals/iterate */ "./node_modules/core-js/internals/iterate.js");
                var checkCorrectnessOfIteration = __webpack_require__(/*! ../internals/check-correctness-of-iteration */ "./node_modules/core-js/internals/check-correctness-of-iteration.js");
                var speciesConstructor = __webpack_require__(/*! ../internals/species-constructor */ "./node_modules/core-js/internals/species-constructor.js");
                var task = __webpack_require__(/*! ../internals/task */ "./node_modules/core-js/internals/task.js").set;
                var microtask = __webpack_require__(/*! ../internals/microtask */ "./node_modules/core-js/internals/microtask.js");
                var promiseResolve = __webpack_require__(/*! ../internals/promise-resolve */ "./node_modules/core-js/internals/promise-resolve.js");
                var hostReportErrors = __webpack_require__(/*! ../internals/host-report-errors */ "./node_modules/core-js/internals/host-report-errors.js");
                var newPromiseCapabilityModule = __webpack_require__(/*! ../internals/new-promise-capability */ "./node_modules/core-js/internals/new-promise-capability.js");
                var perform = __webpack_require__(/*! ../internals/perform */ "./node_modules/core-js/internals/perform.js");
                var InternalStateModule = __webpack_require__(/*! ../internals/internal-state */ "./node_modules/core-js/internals/internal-state.js");
                var isForced = __webpack_require__(/*! ../internals/is-forced */ "./node_modules/core-js/internals/is-forced.js");
                var wellKnownSymbol = __webpack_require__(/*! ../internals/well-known-symbol */ "./node_modules/core-js/internals/well-known-symbol.js");
                var V8_VERSION = __webpack_require__(/*! ../internals/engine-v8-version */ "./node_modules/core-js/internals/engine-v8-version.js");

                var SPECIES = wellKnownSymbol('species');
                var PROMISE = 'Promise';
                var getInternalState = InternalStateModule.get;
                var setInternalState = InternalStateModule.set;
                var getInternalPromiseState = InternalStateModule.getterFor(PROMISE);
                var PromiseConstructor = NativePromise;
                var TypeError = global.TypeError;
                var document = global.document;
                var process = global.process;
                var $fetch = getBuiltIn('fetch');
                var newPromiseCapability = newPromiseCapabilityModule.f;
                var newGenericPromiseCapability = newPromiseCapability;
                var IS_NODE = classof(process) == 'process';
                var DISPATCH_EVENT = !!(document && document.createEvent && global.dispatchEvent);
                var UNHANDLED_REJECTION = 'unhandledrejection';
                var REJECTION_HANDLED = 'rejectionhandled';
                var PENDING = 0;
                var FULFILLED = 1;
                var REJECTED = 2;
                var HANDLED = 1;
                var UNHANDLED = 2;
                var Internal, OwnPromiseCapability, PromiseWrapper, nativeThen;

                var FORCED = isForced(PROMISE, function () {
                    var GLOBAL_CORE_JS_PROMISE = inspectSource(PromiseConstructor) !== String(PromiseConstructor);
                    if (!GLOBAL_CORE_JS_PROMISE) {
                        // V8 6.6 (Node 10 and Chrome 66) have a bug with resolving custom thenables
                        // https://bugs.chromium.org/p/chromium/issues/detail?id=830565
                        // We can't detect it synchronously, so just check versions
                        if (V8_VERSION === 66) return true;
                        // Unhandled rejections tracking support, NodeJS Promise without it fails @@species test
                        if (!IS_NODE && typeof PromiseRejectionEvent != 'function') return true;
                    }
                    // We need Promise#finally in the pure version for preventing prototype pollution
                    if (IS_PURE && !PromiseConstructor.prototype['finally']) return true;
                    // We can't use @@species feature detection in V8 since it causes
                    // deoptimization and performance degradation
                    // https://github.com/zloirock/core-js/issues/679
                    if (V8_VERSION >= 51 && /native code/.test(PromiseConstructor)) return false;
                    // Detect correctness of subclassing with @@species support
                    var promise = PromiseConstructor.resolve(1);
                    var FakePromise = function (exec) {
                        exec(function () { /* empty */ }, function () { /* empty */ });
                    };
                    var constructor = promise.constructor = {};
                    constructor[SPECIES] = FakePromise;
                    return !(promise.then(function () { /* empty */ }) instanceof FakePromise);
                });

                var INCORRECT_ITERATION = FORCED || !checkCorrectnessOfIteration(function (iterable) {
                    PromiseConstructor.all(iterable)['catch'](function () { /* empty */ });
                });

                // helpers
                var isThenable = function (it) {
                    var then;
                    return isObject(it) && typeof (then = it.then) == 'function' ? then : false;
                };

                var notify = function (promise, state, isReject) {
                    if (state.notified) return;
                    state.notified = true;
                    var chain = state.reactions;
                    microtask(function () {
                        var value = state.value;
                        var ok = state.state == FULFILLED;
                        var index = 0;
                        // variable length - can't use forEach
                        while (chain.length > index) {
                            var reaction = chain[index++];
                            var handler = ok ? reaction.ok : reaction.fail;
                            var resolve = reaction.resolve;
                            var reject = reaction.reject;
                            var domain = reaction.domain;
                            var result, then, exited;
                            try {
                                if (handler) {
                                    if (!ok) {
                                        if (state.rejection === UNHANDLED) onHandleUnhandled(promise, state);
                                        state.rejection = HANDLED;
                                    }
                                    if (handler === true) result = value;
                                    else {
                                        if (domain) domain.enter();
                                        result = handler(value); // can throw
                                        if (domain) {
                                            domain.exit();
                                            exited = true;
                                        }
                                    }
                                    if (result === reaction.promise) {
                                        reject(TypeError('Promise-chain cycle'));
                                    } else if (then = isThenable(result)) {
                                        then.call(result, resolve, reject);
                                    } else resolve(result);
                                } else reject(value);
                            } catch (error) {
                                if (domain && !exited) domain.exit();
                                reject(error);
                            }
                        }
                        state.reactions = [];
                        state.notified = false;
                        if (isReject && !state.rejection) onUnhandled(promise, state);
                    });
                };

                var dispatchEvent = function (name, promise, reason) {
                    var event, handler;
                    if (DISPATCH_EVENT) {
                        event = document.createEvent('Event');
                        event.promise = promise;
                        event.reason = reason;
                        event.initEvent(name, false, true);
                        global.dispatchEvent(event);
                    } else event = { promise: promise, reason: reason };
                    if (handler = global['on' + name]) handler(event);
                    else if (name === UNHANDLED_REJECTION) hostReportErrors('Unhandled promise rejection', reason);
                };

                var onUnhandled = function (promise, state) {
                    task.call(global, function () {
                        var value = state.value;
                        var IS_UNHANDLED = isUnhandled(state);
                        var result;
                        if (IS_UNHANDLED) {
                            result = perform(function () {
                                if (IS_NODE) {
                                    process.emit('unhandledRejection', value, promise);
                                } else dispatchEvent(UNHANDLED_REJECTION, promise, value);
                            });
                            // Browsers should not trigger `rejectionHandled` event if it was handled here, NodeJS - should
                            state.rejection = IS_NODE || isUnhandled(state) ? UNHANDLED : HANDLED;
                            if (result.error) throw result.value;
                        }
                    });
                };

                var isUnhandled = function (state) {
                    return state.rejection !== HANDLED && !state.parent;
                };

                var onHandleUnhandled = function (promise, state) {
                    task.call(global, function () {
                        if (IS_NODE) {
                            process.emit('rejectionHandled', promise);
                        } else dispatchEvent(REJECTION_HANDLED, promise, state.value);
                    });
                };

                var bind = function (fn, promise, state, unwrap) {
                    return function (value) {
                        fn(promise, state, value, unwrap);
                    };
                };

                var internalReject = function (promise, state, value, unwrap) {
                    if (state.done) return;
                    state.done = true;
                    if (unwrap) state = unwrap;
                    state.value = value;
                    state.state = REJECTED;
                    notify(promise, state, true);
                };

                var internalResolve = function (promise, state, value, unwrap) {
                    if (state.done) return;
                    state.done = true;
                    if (unwrap) state = unwrap;
                    try {
                        if (promise === value) throw TypeError("Promise can't be resolved itself");
                        var then = isThenable(value);
                        if (then) {
                            microtask(function () {
                                var wrapper = { done: false };
                                try {
                                    then.call(value,
                                        bind(internalResolve, promise, wrapper, state),
                                        bind(internalReject, promise, wrapper, state)
                                    );
                                } catch (error) {
                                    internalReject(promise, wrapper, error, state);
                                }
                            });
                        } else {
                            state.value = value;
                            state.state = FULFILLED;
                            notify(promise, state, false);
                        }
                    } catch (error) {
                        internalReject(promise, { done: false }, error, state);
                    }
                };

                // constructor polyfill
                if (FORCED) {
                    // 25.4.3.1 Promise(executor)
                    PromiseConstructor = function Promise(executor) {
                        anInstance(this, PromiseConstructor, PROMISE);
                        aFunction(executor);
                        Internal.call(this);
                        var state = getInternalState(this);
                        try {
                            executor(bind(internalResolve, this, state), bind(internalReject, this, state));
                        } catch (error) {
                            internalReject(this, state, error);
                        }
                    };
                    // eslint-disable-next-line no-unused-vars
                    Internal = function Promise(executor) {
                        setInternalState(this, {
                            type: PROMISE,
                            done: false,
                            notified: false,
                            parent: false,
                            reactions: [],
                            rejection: false,
                            state: PENDING,
                            value: undefined
                        });
                    };
                    Internal.prototype = redefineAll(PromiseConstructor.prototype, {
                        // `Promise.prototype.then` method
                        // https://tc39.github.io/ecma262/#sec-promise.prototype.then
                        then: function then(onFulfilled, onRejected) {
                            var state = getInternalPromiseState(this);
                            var reaction = newPromiseCapability(speciesConstructor(this, PromiseConstructor));
                            reaction.ok = typeof onFulfilled == 'function' ? onFulfilled : true;
                            reaction.fail = typeof onRejected == 'function' && onRejected;
                            reaction.domain = IS_NODE ? process.domain : undefined;
                            state.parent = true;
                            state.reactions.push(reaction);
                            if (state.state != PENDING) notify(this, state, false);
                            return reaction.promise;
                        },
                        // `Promise.prototype.catch` method
                        // https://tc39.github.io/ecma262/#sec-promise.prototype.catch
                        'catch': function (onRejected) {
                            return this.then(undefined, onRejected);
                        }
                    });
                    OwnPromiseCapability = function () {
                        var promise = new Internal();
                        var state = getInternalState(promise);
                        this.promise = promise;
                        this.resolve = bind(internalResolve, promise, state);
                        this.reject = bind(internalReject, promise, state);
                    };
                    newPromiseCapabilityModule.f = newPromiseCapability = function (C) {
                        return C === PromiseConstructor || C === PromiseWrapper
                            ? new OwnPromiseCapability(C)
                            : newGenericPromiseCapability(C);
                    };

                    if (!IS_PURE && typeof NativePromise == 'function') {
                        nativeThen = NativePromise.prototype.then;

                        // wrap native Promise#then for native async functions
                        redefine(NativePromise.prototype, 'then', function then(onFulfilled, onRejected) {
                            var that = this;
                            return new PromiseConstructor(function (resolve, reject) {
                                nativeThen.call(that, resolve, reject);
                            }).then(onFulfilled, onRejected);
                            // https://github.com/zloirock/core-js/issues/640
                        }, { unsafe: true });

                        // wrap fetch result
                        if (typeof $fetch == 'function') $({ global: true, enumerable: true, forced: true }, {
                            // eslint-disable-next-line no-unused-vars
                            fetch: function fetch(input /* , init */) {
                                return promiseResolve(PromiseConstructor, $fetch.apply(global, arguments));
                            }
                        });
                    }
                }

                $({ global: true, wrap: true, forced: FORCED }, {
                    Promise: PromiseConstructor
                });

                setToStringTag(PromiseConstructor, PROMISE, false, true);
                setSpecies(PROMISE);

                PromiseWrapper = getBuiltIn(PROMISE);

                // statics
                $({ target: PROMISE, stat: true, forced: FORCED }, {
                    // `Promise.reject` method
                    // https://tc39.github.io/ecma262/#sec-promise.reject
                    reject: function reject(r) {
                        var capability = newPromiseCapability(this);
                        capability.reject.call(undefined, r);
                        return capability.promise;
                    }
                });

                $({ target: PROMISE, stat: true, forced: IS_PURE || FORCED }, {
                    // `Promise.resolve` method
                    // https://tc39.github.io/ecma262/#sec-promise.resolve
                    resolve: function resolve(x) {
                        return promiseResolve(IS_PURE && this === PromiseWrapper ? PromiseConstructor : this, x);
                    }
                });

                $({ target: PROMISE, stat: true, forced: INCORRECT_ITERATION }, {
                    // `Promise.all` method
                    // https://tc39.github.io/ecma262/#sec-promise.all
                    all: function all(iterable) {
                        var C = this;
                        var capability = newPromiseCapability(C);
                        var resolve = capability.resolve;
                        var reject = capability.reject;
                        var result = perform(function () {
                            var $promiseResolve = aFunction(C.resolve);
                            var values = [];
                            var counter = 0;
                            var remaining = 1;
                            iterate(iterable, function (promise) {
                                var index = counter++;
                                var alreadyCalled = false;
                                values.push(undefined);
                                remaining++;
                                $promiseResolve.call(C, promise).then(function (value) {
                                    if (alreadyCalled) return;
                                    alreadyCalled = true;
                                    values[index] = value;
                                    --remaining || resolve(values);
                                }, reject);
                            });
                            --remaining || resolve(values);
                        });
                        if (result.error) reject(result.value);
                        return capability.promise;
                    },
                    // `Promise.race` method
                    // https://tc39.github.io/ecma262/#sec-promise.race
                    race: function race(iterable) {
                        var C = this;
                        var capability = newPromiseCapability(C);
                        var reject = capability.reject;
                        var result = perform(function () {
                            var $promiseResolve = aFunction(C.resolve);
                            iterate(iterable, function (promise) {
                                $promiseResolve.call(C, promise).then(capability.resolve, reject);
                            });
                        });
                        if (result.error) reject(result.value);
                        return capability.promise;
                    }
                });


                /***/
            }),

/***/ "./node_modules/core-js/modules/es.regexp.constructor.js":
/*!***************************************************************!*\
  !*** ./node_modules/core-js/modules/es.regexp.constructor.js ***!
  \***************************************************************/
/*! all exports used */
/***/ (function (module, exports, __webpack_require__) {

                var DESCRIPTORS = __webpack_require__(/*! ../internals/descriptors */ "./node_modules/core-js/internals/descriptors.js");
                var global = __webpack_require__(/*! ../internals/global */ "./node_modules/core-js/internals/global.js");
                var isForced = __webpack_require__(/*! ../internals/is-forced */ "./node_modules/core-js/internals/is-forced.js");
                var inheritIfRequired = __webpack_require__(/*! ../internals/inherit-if-required */ "./node_modules/core-js/internals/inherit-if-required.js");
                var defineProperty = __webpack_require__(/*! ../internals/object-define-property */ "./node_modules/core-js/internals/object-define-property.js").f;
                var getOwnPropertyNames = __webpack_require__(/*! ../internals/object-get-own-property-names */ "./node_modules/core-js/internals/object-get-own-property-names.js").f;
                var isRegExp = __webpack_require__(/*! ../internals/is-regexp */ "./node_modules/core-js/internals/is-regexp.js");
                var getFlags = __webpack_require__(/*! ../internals/regexp-flags */ "./node_modules/core-js/internals/regexp-flags.js");
                var stickyHelpers = __webpack_require__(/*! ../internals/regexp-sticky-helpers */ "./node_modules/core-js/internals/regexp-sticky-helpers.js");
                var redefine = __webpack_require__(/*! ../internals/redefine */ "./node_modules/core-js/internals/redefine.js");
                var fails = __webpack_require__(/*! ../internals/fails */ "./node_modules/core-js/internals/fails.js");
                var setInternalState = __webpack_require__(/*! ../internals/internal-state */ "./node_modules/core-js/internals/internal-state.js").set;
                var setSpecies = __webpack_require__(/*! ../internals/set-species */ "./node_modules/core-js/internals/set-species.js");
                var wellKnownSymbol = __webpack_require__(/*! ../internals/well-known-symbol */ "./node_modules/core-js/internals/well-known-symbol.js");

                var MATCH = wellKnownSymbol('match');
                var NativeRegExp = global.RegExp;
                var RegExpPrototype = NativeRegExp.prototype;
                var re1 = /a/g;
                var re2 = /a/g;

                // "new" should create a new object, old webkit bug
                var CORRECT_NEW = new NativeRegExp(re1) !== re1;

                var UNSUPPORTED_Y = stickyHelpers.UNSUPPORTED_Y;

                var FORCED = DESCRIPTORS && isForced('RegExp', (!CORRECT_NEW || UNSUPPORTED_Y || fails(function () {
                    re2[MATCH] = false;
                    // RegExp constructor can alter flags and IsRegExp works correct with @@match
                    return NativeRegExp(re1) != re1 || NativeRegExp(re2) == re2 || NativeRegExp(re1, 'i') != '/a/i';
                })));

                // `RegExp` constructor
                // https://tc39.github.io/ecma262/#sec-regexp-constructor
                if (FORCED) {
                    var RegExpWrapper = function RegExp(pattern, flags) {
                        var thisIsRegExp = this instanceof RegExpWrapper;
                        var patternIsRegExp = isRegExp(pattern);
                        var flagsAreUndefined = flags === undefined;
                        var sticky;

                        if (!thisIsRegExp && patternIsRegExp && pattern.constructor === RegExpWrapper && flagsAreUndefined) {
                            return pattern;
                        }

                        if (CORRECT_NEW) {
                            if (patternIsRegExp && !flagsAreUndefined) pattern = pattern.source;
                        } else if (pattern instanceof RegExpWrapper) {
                            if (flagsAreUndefined) flags = getFlags.call(pattern);
                            pattern = pattern.source;
                        }

                        if (UNSUPPORTED_Y) {
                            sticky = !!flags && flags.indexOf('y') > -1;
                            if (sticky) flags = flags.replace(/y/g, '');
                        }

                        var result = inheritIfRequired(
                            CORRECT_NEW ? new NativeRegExp(pattern, flags) : NativeRegExp(pattern, flags),
                            thisIsRegExp ? this : RegExpPrototype,
                            RegExpWrapper
                        );

                        if (UNSUPPORTED_Y && sticky) setInternalState(result, { sticky: sticky });

                        return result;
                    };
                    var proxy = function (key) {
                        key in RegExpWrapper || defineProperty(RegExpWrapper, key, {
                            configurable: true,
                            get: function () { return NativeRegExp[key]; },
                            set: function (it) { NativeRegExp[key] = it; }
                        });
                    };
                    var keys = getOwnPropertyNames(NativeRegExp);
                    var index = 0;
                    while (keys.length > index) proxy(keys[index++]);
                    RegExpPrototype.constructor = RegExpWrapper;
                    RegExpWrapper.prototype = RegExpPrototype;
                    redefine(global, 'RegExp', RegExpWrapper);
                }

                // https://tc39.github.io/ecma262/#sec-get-regexp-@@species
                setSpecies('RegExp');


                /***/
            }),

/***/ "./node_modules/core-js/modules/es.regexp.exec.js":
/*!********************************************************!*\
  !*** ./node_modules/core-js/modules/es.regexp.exec.js ***!
  \********************************************************/
/*! all exports used */
/***/ (function (module, exports, __webpack_require__) {

                "use strict";

                var $ = __webpack_require__(/*! ../internals/export */ "./node_modules/core-js/internals/export.js");
                var exec = __webpack_require__(/*! ../internals/regexp-exec */ "./node_modules/core-js/internals/regexp-exec.js");

                $({ target: 'RegExp', proto: true, forced: /./.exec !== exec }, {
                    exec: exec
                });


                /***/
            }),

/***/ "./node_modules/core-js/modules/es.regexp.to-string.js":
/*!*************************************************************!*\
  !*** ./node_modules/core-js/modules/es.regexp.to-string.js ***!
  \*************************************************************/
/*! all exports used */
/***/ (function (module, exports, __webpack_require__) {

                "use strict";

                var redefine = __webpack_require__(/*! ../internals/redefine */ "./node_modules/core-js/internals/redefine.js");
                var anObject = __webpack_require__(/*! ../internals/an-object */ "./node_modules/core-js/internals/an-object.js");
                var fails = __webpack_require__(/*! ../internals/fails */ "./node_modules/core-js/internals/fails.js");
                var flags = __webpack_require__(/*! ../internals/regexp-flags */ "./node_modules/core-js/internals/regexp-flags.js");

                var TO_STRING = 'toString';
                var RegExpPrototype = RegExp.prototype;
                var nativeToString = RegExpPrototype[TO_STRING];

                var NOT_GENERIC = fails(function () { return nativeToString.call({ source: 'a', flags: 'b' }) != '/a/b'; });
                // FF44- RegExp#toString has a wrong name
                var INCORRECT_NAME = nativeToString.name != TO_STRING;

                // `RegExp.prototype.toString` method
                // https://tc39.github.io/ecma262/#sec-regexp.prototype.tostring
                if (NOT_GENERIC || INCORRECT_NAME) {
                    redefine(RegExp.prototype, TO_STRING, function toString() {
                        var R = anObject(this);
                        var p = String(R.source);
                        var rf = R.flags;
                        var f = String(rf === undefined && R instanceof RegExp && !('flags' in RegExpPrototype) ? flags.call(R) : rf);
                        return '/' + p + '/' + f;
                    }, { unsafe: true });
                }


                /***/
            }),

/***/ "./node_modules/core-js/modules/es.string.iterator.js":
/*!************************************************************!*\
  !*** ./node_modules/core-js/modules/es.string.iterator.js ***!
  \************************************************************/
/*! all exports used */
/***/ (function (module, exports, __webpack_require__) {

                "use strict";

                var charAt = __webpack_require__(/*! ../internals/string-multibyte */ "./node_modules/core-js/internals/string-multibyte.js").charAt;
                var InternalStateModule = __webpack_require__(/*! ../internals/internal-state */ "./node_modules/core-js/internals/internal-state.js");
                var defineIterator = __webpack_require__(/*! ../internals/define-iterator */ "./node_modules/core-js/internals/define-iterator.js");

                var STRING_ITERATOR = 'String Iterator';
                var setInternalState = InternalStateModule.set;
                var getInternalState = InternalStateModule.getterFor(STRING_ITERATOR);

                // `String.prototype[@@iterator]` method
                // https://tc39.github.io/ecma262/#sec-string.prototype-@@iterator
                defineIterator(String, 'String', function (iterated) {
                    setInternalState(this, {
                        type: STRING_ITERATOR,
                        string: String(iterated),
                        index: 0
                    });
                    // `%StringIteratorPrototype%.next` method
                    // https://tc39.github.io/ecma262/#sec-%stringiteratorprototype%.next
                }, function next() {
                    var state = getInternalState(this);
                    var string = state.string;
                    var index = state.index;
                    var point;
                    if (index >= string.length) return { value: undefined, done: true };
                    point = charAt(string, index);
                    state.index += point.length;
                    return { value: point, done: false };
                });


                /***/
            }),

/***/ "./node_modules/core-js/modules/es.string.link.js":
/*!********************************************************!*\
  !*** ./node_modules/core-js/modules/es.string.link.js ***!
  \********************************************************/
/*! all exports used */
/***/ (function (module, exports, __webpack_require__) {

                "use strict";

                var $ = __webpack_require__(/*! ../internals/export */ "./node_modules/core-js/internals/export.js");
                var createHTML = __webpack_require__(/*! ../internals/create-html */ "./node_modules/core-js/internals/create-html.js");
                var forcedStringHTMLMethod = __webpack_require__(/*! ../internals/string-html-forced */ "./node_modules/core-js/internals/string-html-forced.js");

                // `String.prototype.link` method
                // https://tc39.github.io/ecma262/#sec-string.prototype.link
                $({ target: 'String', proto: true, forced: forcedStringHTMLMethod('link') }, {
                    link: function link(url) {
                        return createHTML(this, 'a', 'href', url);
                    }
                });


                /***/
            }),

/***/ "./node_modules/core-js/modules/es.string.match.js":
/*!*********************************************************!*\
  !*** ./node_modules/core-js/modules/es.string.match.js ***!
  \*********************************************************/
/*! all exports used */
/***/ (function (module, exports, __webpack_require__) {

                "use strict";

                var fixRegExpWellKnownSymbolLogic = __webpack_require__(/*! ../internals/fix-regexp-well-known-symbol-logic */ "./node_modules/core-js/internals/fix-regexp-well-known-symbol-logic.js");
                var anObject = __webpack_require__(/*! ../internals/an-object */ "./node_modules/core-js/internals/an-object.js");
                var toLength = __webpack_require__(/*! ../internals/to-length */ "./node_modules/core-js/internals/to-length.js");
                var requireObjectCoercible = __webpack_require__(/*! ../internals/require-object-coercible */ "./node_modules/core-js/internals/require-object-coercible.js");
                var advanceStringIndex = __webpack_require__(/*! ../internals/advance-string-index */ "./node_modules/core-js/internals/advance-string-index.js");
                var regExpExec = __webpack_require__(/*! ../internals/regexp-exec-abstract */ "./node_modules/core-js/internals/regexp-exec-abstract.js");

                // @@match logic
                fixRegExpWellKnownSymbolLogic('match', 1, function (MATCH, nativeMatch, maybeCallNative) {
                    return [
                        // `String.prototype.match` method
                        // https://tc39.github.io/ecma262/#sec-string.prototype.match
                        function match(regexp) {
                            var O = requireObjectCoercible(this);
                            var matcher = regexp == undefined ? undefined : regexp[MATCH];
                            return matcher !== undefined ? matcher.call(regexp, O) : new RegExp(regexp)[MATCH](String(O));
                        },
                        // `RegExp.prototype[@@match]` method
                        // https://tc39.github.io/ecma262/#sec-regexp.prototype-@@match
                        function (regexp) {
                            var res = maybeCallNative(nativeMatch, regexp, this);
                            if (res.done) return res.value;

                            var rx = anObject(regexp);
                            var S = String(this);

                            if (!rx.global) return regExpExec(rx, S);

                            var fullUnicode = rx.unicode;
                            rx.lastIndex = 0;
                            var A = [];
                            var n = 0;
                            var result;
                            while ((result = regExpExec(rx, S)) !== null) {
                                var matchStr = String(result[0]);
                                A[n] = matchStr;
                                if (matchStr === '') rx.lastIndex = advanceStringIndex(S, toLength(rx.lastIndex), fullUnicode);
                                n++;
                            }
                            return n === 0 ? null : A;
                        }
                    ];
                });


                /***/
            }),

/***/ "./node_modules/core-js/modules/es.string.replace.js":
/*!***********************************************************!*\
  !*** ./node_modules/core-js/modules/es.string.replace.js ***!
  \***********************************************************/
/*! all exports used */
/***/ (function (module, exports, __webpack_require__) {

                "use strict";

                var fixRegExpWellKnownSymbolLogic = __webpack_require__(/*! ../internals/fix-regexp-well-known-symbol-logic */ "./node_modules/core-js/internals/fix-regexp-well-known-symbol-logic.js");
                var anObject = __webpack_require__(/*! ../internals/an-object */ "./node_modules/core-js/internals/an-object.js");
                var toObject = __webpack_require__(/*! ../internals/to-object */ "./node_modules/core-js/internals/to-object.js");
                var toLength = __webpack_require__(/*! ../internals/to-length */ "./node_modules/core-js/internals/to-length.js");
                var toInteger = __webpack_require__(/*! ../internals/to-integer */ "./node_modules/core-js/internals/to-integer.js");
                var requireObjectCoercible = __webpack_require__(/*! ../internals/require-object-coercible */ "./node_modules/core-js/internals/require-object-coercible.js");
                var advanceStringIndex = __webpack_require__(/*! ../internals/advance-string-index */ "./node_modules/core-js/internals/advance-string-index.js");
                var regExpExec = __webpack_require__(/*! ../internals/regexp-exec-abstract */ "./node_modules/core-js/internals/regexp-exec-abstract.js");

                var max = Math.max;
                var min = Math.min;
                var floor = Math.floor;
                var SUBSTITUTION_SYMBOLS = /\$([$&'`]|\d\d?|<[^>]*>)/g;
                var SUBSTITUTION_SYMBOLS_NO_NAMED = /\$([$&'`]|\d\d?)/g;

                var maybeToString = function (it) {
                    return it === undefined ? it : String(it);
                };

                // @@replace logic
                fixRegExpWellKnownSymbolLogic('replace', 2, function (REPLACE, nativeReplace, maybeCallNative, reason) {
                    var REGEXP_REPLACE_SUBSTITUTES_UNDEFINED_CAPTURE = reason.REGEXP_REPLACE_SUBSTITUTES_UNDEFINED_CAPTURE;
                    var REPLACE_KEEPS_$0 = reason.REPLACE_KEEPS_$0;
                    var UNSAFE_SUBSTITUTE = REGEXP_REPLACE_SUBSTITUTES_UNDEFINED_CAPTURE ? '$' : '$0';

                    return [
                        // `String.prototype.replace` method
                        // https://tc39.github.io/ecma262/#sec-string.prototype.replace
                        function replace(searchValue, replaceValue) {
                            var O = requireObjectCoercible(this);
                            var replacer = searchValue == undefined ? undefined : searchValue[REPLACE];
                            return replacer !== undefined
                                ? replacer.call(searchValue, O, replaceValue)
                                : nativeReplace.call(String(O), searchValue, replaceValue);
                        },
                        // `RegExp.prototype[@@replace]` method
                        // https://tc39.github.io/ecma262/#sec-regexp.prototype-@@replace
                        function (regexp, replaceValue) {
                            if (
                                (!REGEXP_REPLACE_SUBSTITUTES_UNDEFINED_CAPTURE && REPLACE_KEEPS_$0) ||
                                (typeof replaceValue === 'string' && replaceValue.indexOf(UNSAFE_SUBSTITUTE) === -1)
                            ) {
                                var res = maybeCallNative(nativeReplace, regexp, this, replaceValue);
                                if (res.done) return res.value;
                            }

                            var rx = anObject(regexp);
                            var S = String(this);

                            var functionalReplace = typeof replaceValue === 'function';
                            if (!functionalReplace) replaceValue = String(replaceValue);

                            var global = rx.global;
                            if (global) {
                                var fullUnicode = rx.unicode;
                                rx.lastIndex = 0;
                            }
                            var results = [];
                            while (true) {
                                var result = regExpExec(rx, S);
                                if (result === null) break;

                                results.push(result);
                                if (!global) break;

                                var matchStr = String(result[0]);
                                if (matchStr === '') rx.lastIndex = advanceStringIndex(S, toLength(rx.lastIndex), fullUnicode);
                            }

                            var accumulatedResult = '';
                            var nextSourcePosition = 0;
                            for (var i = 0; i < results.length; i++) {
                                result = results[i];

                                var matched = String(result[0]);
                                var position = max(min(toInteger(result.index), S.length), 0);
                                var captures = [];
                                // NOTE: This is equivalent to
                                //   captures = result.slice(1).map(maybeToString)
                                // but for some reason `nativeSlice.call(result, 1, result.length)` (called in
                                // the slice polyfill when slicing native arrays) "doesn't work" in safari 9 and
                                // causes a crash (https://pastebin.com/N21QzeQA) when trying to debug it.
                                for (var j = 1; j < result.length; j++) captures.push(maybeToString(result[j]));
                                var namedCaptures = result.groups;
                                if (functionalReplace) {
                                    var replacerArgs = [matched].concat(captures, position, S);
                                    if (namedCaptures !== undefined) replacerArgs.push(namedCaptures);
                                    var replacement = String(replaceValue.apply(undefined, replacerArgs));
                                } else {
                                    replacement = getSubstitution(matched, S, position, captures, namedCaptures, replaceValue);
                                }
                                if (position >= nextSourcePosition) {
                                    accumulatedResult += S.slice(nextSourcePosition, position) + replacement;
                                    nextSourcePosition = position + matched.length;
                                }
                            }
                            return accumulatedResult + S.slice(nextSourcePosition);
                        }
                    ];

                    // https://tc39.github.io/ecma262/#sec-getsubstitution
                    function getSubstitution(matched, str, position, captures, namedCaptures, replacement) {
                        var tailPos = position + matched.length;
                        var m = captures.length;
                        var symbols = SUBSTITUTION_SYMBOLS_NO_NAMED;
                        if (namedCaptures !== undefined) {
                            namedCaptures = toObject(namedCaptures);
                            symbols = SUBSTITUTION_SYMBOLS;
                        }
                        return nativeReplace.call(replacement, symbols, function (match, ch) {
                            var capture;
                            switch (ch.charAt(0)) {
                                case '$': return '$';
                                case '&': return matched;
                                case '`': return str.slice(0, position);
                                case "'": return str.slice(tailPos);
                                case '<':
                                    capture = namedCaptures[ch.slice(1, -1)];
                                    break;
                                default: // \d\d?
                                    var n = +ch;
                                    if (n === 0) return match;
                                    if (n > m) {
                                        var f = floor(n / 10);
                                        if (f === 0) return match;
                                        if (f <= m) return captures[f - 1] === undefined ? ch.charAt(1) : captures[f - 1] + ch.charAt(1);
                                        return match;
                                    }
                                    capture = captures[n - 1];
                            }
                            return capture === undefined ? '' : capture;
                        });
                    }
                });


                /***/
            }),

/***/ "./node_modules/core-js/modules/es.string.search.js":
/*!**********************************************************!*\
  !*** ./node_modules/core-js/modules/es.string.search.js ***!
  \**********************************************************/
/*! all exports used */
/***/ (function (module, exports, __webpack_require__) {

                "use strict";

                var fixRegExpWellKnownSymbolLogic = __webpack_require__(/*! ../internals/fix-regexp-well-known-symbol-logic */ "./node_modules/core-js/internals/fix-regexp-well-known-symbol-logic.js");
                var anObject = __webpack_require__(/*! ../internals/an-object */ "./node_modules/core-js/internals/an-object.js");
                var requireObjectCoercible = __webpack_require__(/*! ../internals/require-object-coercible */ "./node_modules/core-js/internals/require-object-coercible.js");
                var sameValue = __webpack_require__(/*! ../internals/same-value */ "./node_modules/core-js/internals/same-value.js");
                var regExpExec = __webpack_require__(/*! ../internals/regexp-exec-abstract */ "./node_modules/core-js/internals/regexp-exec-abstract.js");

                // @@search logic
                fixRegExpWellKnownSymbolLogic('search', 1, function (SEARCH, nativeSearch, maybeCallNative) {
                    return [
                        // `String.prototype.search` method
                        // https://tc39.github.io/ecma262/#sec-string.prototype.search
                        function search(regexp) {
                            var O = requireObjectCoercible(this);
                            var searcher = regexp == undefined ? undefined : regexp[SEARCH];
                            return searcher !== undefined ? searcher.call(regexp, O) : new RegExp(regexp)[SEARCH](String(O));
                        },
                        // `RegExp.prototype[@@search]` method
                        // https://tc39.github.io/ecma262/#sec-regexp.prototype-@@search
                        function (regexp) {
                            var res = maybeCallNative(nativeSearch, regexp, this);
                            if (res.done) return res.value;

                            var rx = anObject(regexp);
                            var S = String(this);

                            var previousLastIndex = rx.lastIndex;
                            if (!sameValue(previousLastIndex, 0)) rx.lastIndex = 0;
                            var result = regExpExec(rx, S);
                            if (!sameValue(rx.lastIndex, previousLastIndex)) rx.lastIndex = previousLastIndex;
                            return result === null ? -1 : result.index;
                        }
                    ];
                });


                /***/
            }),

/***/ "./node_modules/core-js/modules/es.string.split.js":
/*!*********************************************************!*\
  !*** ./node_modules/core-js/modules/es.string.split.js ***!
  \*********************************************************/
/*! all exports used */
/***/ (function (module, exports, __webpack_require__) {

                "use strict";

                var fixRegExpWellKnownSymbolLogic = __webpack_require__(/*! ../internals/fix-regexp-well-known-symbol-logic */ "./node_modules/core-js/internals/fix-regexp-well-known-symbol-logic.js");
                var isRegExp = __webpack_require__(/*! ../internals/is-regexp */ "./node_modules/core-js/internals/is-regexp.js");
                var anObject = __webpack_require__(/*! ../internals/an-object */ "./node_modules/core-js/internals/an-object.js");
                var requireObjectCoercible = __webpack_require__(/*! ../internals/require-object-coercible */ "./node_modules/core-js/internals/require-object-coercible.js");
                var speciesConstructor = __webpack_require__(/*! ../internals/species-constructor */ "./node_modules/core-js/internals/species-constructor.js");
                var advanceStringIndex = __webpack_require__(/*! ../internals/advance-string-index */ "./node_modules/core-js/internals/advance-string-index.js");
                var toLength = __webpack_require__(/*! ../internals/to-length */ "./node_modules/core-js/internals/to-length.js");
                var callRegExpExec = __webpack_require__(/*! ../internals/regexp-exec-abstract */ "./node_modules/core-js/internals/regexp-exec-abstract.js");
                var regexpExec = __webpack_require__(/*! ../internals/regexp-exec */ "./node_modules/core-js/internals/regexp-exec.js");
                var fails = __webpack_require__(/*! ../internals/fails */ "./node_modules/core-js/internals/fails.js");

                var arrayPush = [].push;
                var min = Math.min;
                var MAX_UINT32 = 0xFFFFFFFF;

                // babel-minify transpiles RegExp('x', 'y') -> /x/y and it causes SyntaxError
                var SUPPORTS_Y = !fails(function () { return !RegExp(MAX_UINT32, 'y'); });

                // @@split logic
                fixRegExpWellKnownSymbolLogic('split', 2, function (SPLIT, nativeSplit, maybeCallNative) {
                    var internalSplit;
                    if (
                        'abbc'.split(/(b)*/)[1] == 'c' ||
                        'test'.split(/(?:)/, -1).length != 4 ||
                        'ab'.split(/(?:ab)*/).length != 2 ||
                        '.'.split(/(.?)(.?)/).length != 4 ||
                        '.'.split(/()()/).length > 1 ||
                        ''.split(/.?/).length
                    ) {
                        // based on es5-shim implementation, need to rework it
                        internalSplit = function (separator, limit) {
                            var string = String(requireObjectCoercible(this));
                            var lim = limit === undefined ? MAX_UINT32 : limit >>> 0;
                            if (lim === 0) return [];
                            if (separator === undefined) return [string];
                            // If `separator` is not a regex, use native split
                            if (!isRegExp(separator)) {
                                return nativeSplit.call(string, separator, lim);
                            }
                            var output = [];
                            var flags = (separator.ignoreCase ? 'i' : '') +
                                (separator.multiline ? 'm' : '') +
                                (separator.unicode ? 'u' : '') +
                                (separator.sticky ? 'y' : '');
                            var lastLastIndex = 0;
                            // Make `global` and avoid `lastIndex` issues by working with a copy
                            var separatorCopy = new RegExp(separator.source, flags + 'g');
                            var match, lastIndex, lastLength;
                            while (match = regexpExec.call(separatorCopy, string)) {
                                lastIndex = separatorCopy.lastIndex;
                                if (lastIndex > lastLastIndex) {
                                    output.push(string.slice(lastLastIndex, match.index));
                                    if (match.length > 1 && match.index < string.length) arrayPush.apply(output, match.slice(1));
                                    lastLength = match[0].length;
                                    lastLastIndex = lastIndex;
                                    if (output.length >= lim) break;
                                }
                                if (separatorCopy.lastIndex === match.index) separatorCopy.lastIndex++; // Avoid an infinite loop
                            }
                            if (lastLastIndex === string.length) {
                                if (lastLength || !separatorCopy.test('')) output.push('');
                            } else output.push(string.slice(lastLastIndex));
                            return output.length > lim ? output.slice(0, lim) : output;
                        };
                        // Chakra, V8
                    } else if ('0'.split(undefined, 0).length) {
                        internalSplit = function (separator, limit) {
                            return separator === undefined && limit === 0 ? [] : nativeSplit.call(this, separator, limit);
                        };
                    } else internalSplit = nativeSplit;

                    return [
                        // `String.prototype.split` method
                        // https://tc39.github.io/ecma262/#sec-string.prototype.split
                        function split(separator, limit) {
                            var O = requireObjectCoercible(this);
                            var splitter = separator == undefined ? undefined : separator[SPLIT];
                            return splitter !== undefined
                                ? splitter.call(separator, O, limit)
                                : internalSplit.call(String(O), separator, limit);
                        },
                        // `RegExp.prototype[@@split]` method
                        // https://tc39.github.io/ecma262/#sec-regexp.prototype-@@split
                        //
                        // NOTE: This cannot be properly polyfilled in engines that don't support
                        // the 'y' flag.
                        function (regexp, limit) {
                            var res = maybeCallNative(internalSplit, regexp, this, limit, internalSplit !== nativeSplit);
                            if (res.done) return res.value;

                            var rx = anObject(regexp);
                            var S = String(this);
                            var C = speciesConstructor(rx, RegExp);

                            var unicodeMatching = rx.unicode;
                            var flags = (rx.ignoreCase ? 'i' : '') +
                                (rx.multiline ? 'm' : '') +
                                (rx.unicode ? 'u' : '') +
                                (SUPPORTS_Y ? 'y' : 'g');

                            // ^(? + rx + ) is needed, in combination with some S slicing, to
                            // simulate the 'y' flag.
                            var splitter = new C(SUPPORTS_Y ? rx : '^(?:' + rx.source + ')', flags);
                            var lim = limit === undefined ? MAX_UINT32 : limit >>> 0;
                            if (lim === 0) return [];
                            if (S.length === 0) return callRegExpExec(splitter, S) === null ? [S] : [];
                            var p = 0;
                            var q = 0;
                            var A = [];
                            while (q < S.length) {
                                splitter.lastIndex = SUPPORTS_Y ? q : 0;
                                var z = callRegExpExec(splitter, SUPPORTS_Y ? S : S.slice(q));
                                var e;
                                if (
                                    z === null ||
                                    (e = min(toLength(splitter.lastIndex + (SUPPORTS_Y ? 0 : q)), S.length)) === p
                                ) {
                                    q = advanceStringIndex(S, q, unicodeMatching);
                                } else {
                                    A.push(S.slice(p, q));
                                    if (A.length === lim) return A;
                                    for (var i = 1; i <= z.length - 1; i++) {
                                        A.push(z[i]);
                                        if (A.length === lim) return A;
                                    }
                                    q = p = e;
                                }
                            }
                            A.push(S.slice(p));
                            return A;
                        }
                    ];
                }, !SUPPORTS_Y);


                /***/
            }),

/***/ "./node_modules/core-js/modules/es.string.trim.js":
/*!********************************************************!*\
  !*** ./node_modules/core-js/modules/es.string.trim.js ***!
  \********************************************************/
/*! all exports used */
/***/ (function (module, exports, __webpack_require__) {

                "use strict";

                var $ = __webpack_require__(/*! ../internals/export */ "./node_modules/core-js/internals/export.js");
                var $trim = __webpack_require__(/*! ../internals/string-trim */ "./node_modules/core-js/internals/string-trim.js").trim;
                var forcedStringTrimMethod = __webpack_require__(/*! ../internals/string-trim-forced */ "./node_modules/core-js/internals/string-trim-forced.js");

                // `String.prototype.trim` method
                // https://tc39.github.io/ecma262/#sec-string.prototype.trim
                $({ target: 'String', proto: true, forced: forcedStringTrimMethod('trim') }, {
                    trim: function trim() {
                        return $trim(this);
                    }
                });


                /***/
            }),

/***/ "./node_modules/core-js/modules/web.dom-collections.for-each.js":
/*!**********************************************************************!*\
  !*** ./node_modules/core-js/modules/web.dom-collections.for-each.js ***!
  \**********************************************************************/
/*! all exports used */
/***/ (function (module, exports, __webpack_require__) {

                var global = __webpack_require__(/*! ../internals/global */ "./node_modules/core-js/internals/global.js");
                var DOMIterables = __webpack_require__(/*! ../internals/dom-iterables */ "./node_modules/core-js/internals/dom-iterables.js");
                var forEach = __webpack_require__(/*! ../internals/array-for-each */ "./node_modules/core-js/internals/array-for-each.js");
                var createNonEnumerableProperty = __webpack_require__(/*! ../internals/create-non-enumerable-property */ "./node_modules/core-js/internals/create-non-enumerable-property.js");

                for (var COLLECTION_NAME in DOMIterables) {
                    var Collection = global[COLLECTION_NAME];
                    var CollectionPrototype = Collection && Collection.prototype;
                    // some Chrome versions have non-configurable methods on DOMTokenList
                    if (CollectionPrototype && CollectionPrototype.forEach !== forEach) try {
                        createNonEnumerableProperty(CollectionPrototype, 'forEach', forEach);
                    } catch (error) {
                        CollectionPrototype.forEach = forEach;
                    }
                }


                /***/
            }),

/***/ "./node_modules/core-js/modules/web.dom-collections.iterator.js":
/*!**********************************************************************!*\
  !*** ./node_modules/core-js/modules/web.dom-collections.iterator.js ***!
  \**********************************************************************/
/*! all exports used */
/***/ (function (module, exports, __webpack_require__) {

                var global = __webpack_require__(/*! ../internals/global */ "./node_modules/core-js/internals/global.js");
                var DOMIterables = __webpack_require__(/*! ../internals/dom-iterables */ "./node_modules/core-js/internals/dom-iterables.js");
                var ArrayIteratorMethods = __webpack_require__(/*! ../modules/es.array.iterator */ "./node_modules/core-js/modules/es.array.iterator.js");
                var createNonEnumerableProperty = __webpack_require__(/*! ../internals/create-non-enumerable-property */ "./node_modules/core-js/internals/create-non-enumerable-property.js");
                var wellKnownSymbol = __webpack_require__(/*! ../internals/well-known-symbol */ "./node_modules/core-js/internals/well-known-symbol.js");

                var ITERATOR = wellKnownSymbol('iterator');
                var TO_STRING_TAG = wellKnownSymbol('toStringTag');
                var ArrayValues = ArrayIteratorMethods.values;

                for (var COLLECTION_NAME in DOMIterables) {
                    var Collection = global[COLLECTION_NAME];
                    var CollectionPrototype = Collection && Collection.prototype;
                    if (CollectionPrototype) {
                        // some Chrome versions have non-configurable methods on DOMTokenList
                        if (CollectionPrototype[ITERATOR] !== ArrayValues) try {
                            createNonEnumerableProperty(CollectionPrototype, ITERATOR, ArrayValues);
                        } catch (error) {
                            CollectionPrototype[ITERATOR] = ArrayValues;
                        }
                        if (!CollectionPrototype[TO_STRING_TAG]) {
                            createNonEnumerableProperty(CollectionPrototype, TO_STRING_TAG, COLLECTION_NAME);
                        }
                        if (DOMIterables[COLLECTION_NAME]) for (var METHOD_NAME in ArrayIteratorMethods) {
                            // some Chrome versions have non-configurable methods on DOMTokenList
                            if (CollectionPrototype[METHOD_NAME] !== ArrayIteratorMethods[METHOD_NAME]) try {
                                createNonEnumerableProperty(CollectionPrototype, METHOD_NAME, ArrayIteratorMethods[METHOD_NAME]);
                            } catch (error) {
                                CollectionPrototype[METHOD_NAME] = ArrayIteratorMethods[METHOD_NAME];
                            }
                        }
                    }
                }


                /***/
            }),

/***/ "./node_modules/core-js/modules/web.url-search-params.js":
/*!***************************************************************!*\
  !*** ./node_modules/core-js/modules/web.url-search-params.js ***!
  \***************************************************************/
/*! all exports used */
/***/ (function (module, exports, __webpack_require__) {

                "use strict";

                // TODO: in core-js@4, move /modules/ dependencies to public entries for better optimization by tools like `preset-env`
                __webpack_require__(/*! ../modules/es.array.iterator */ "./node_modules/core-js/modules/es.array.iterator.js");
                var $ = __webpack_require__(/*! ../internals/export */ "./node_modules/core-js/internals/export.js");
                var getBuiltIn = __webpack_require__(/*! ../internals/get-built-in */ "./node_modules/core-js/internals/get-built-in.js");
                var USE_NATIVE_URL = __webpack_require__(/*! ../internals/native-url */ "./node_modules/core-js/internals/native-url.js");
                var redefine = __webpack_require__(/*! ../internals/redefine */ "./node_modules/core-js/internals/redefine.js");
                var redefineAll = __webpack_require__(/*! ../internals/redefine-all */ "./node_modules/core-js/internals/redefine-all.js");
                var setToStringTag = __webpack_require__(/*! ../internals/set-to-string-tag */ "./node_modules/core-js/internals/set-to-string-tag.js");
                var createIteratorConstructor = __webpack_require__(/*! ../internals/create-iterator-constructor */ "./node_modules/core-js/internals/create-iterator-constructor.js");
                var InternalStateModule = __webpack_require__(/*! ../internals/internal-state */ "./node_modules/core-js/internals/internal-state.js");
                var anInstance = __webpack_require__(/*! ../internals/an-instance */ "./node_modules/core-js/internals/an-instance.js");
                var hasOwn = __webpack_require__(/*! ../internals/has */ "./node_modules/core-js/internals/has.js");
                var bind = __webpack_require__(/*! ../internals/function-bind-context */ "./node_modules/core-js/internals/function-bind-context.js");
                var classof = __webpack_require__(/*! ../internals/classof */ "./node_modules/core-js/internals/classof.js");
                var anObject = __webpack_require__(/*! ../internals/an-object */ "./node_modules/core-js/internals/an-object.js");
                var isObject = __webpack_require__(/*! ../internals/is-object */ "./node_modules/core-js/internals/is-object.js");
                var create = __webpack_require__(/*! ../internals/object-create */ "./node_modules/core-js/internals/object-create.js");
                var createPropertyDescriptor = __webpack_require__(/*! ../internals/create-property-descriptor */ "./node_modules/core-js/internals/create-property-descriptor.js");
                var getIterator = __webpack_require__(/*! ../internals/get-iterator */ "./node_modules/core-js/internals/get-iterator.js");
                var getIteratorMethod = __webpack_require__(/*! ../internals/get-iterator-method */ "./node_modules/core-js/internals/get-iterator-method.js");
                var wellKnownSymbol = __webpack_require__(/*! ../internals/well-known-symbol */ "./node_modules/core-js/internals/well-known-symbol.js");

                var $fetch = getBuiltIn('fetch');
                var Headers = getBuiltIn('Headers');
                var ITERATOR = wellKnownSymbol('iterator');
                var URL_SEARCH_PARAMS = 'URLSearchParams';
                var URL_SEARCH_PARAMS_ITERATOR = URL_SEARCH_PARAMS + 'Iterator';
                var setInternalState = InternalStateModule.set;
                var getInternalParamsState = InternalStateModule.getterFor(URL_SEARCH_PARAMS);
                var getInternalIteratorState = InternalStateModule.getterFor(URL_SEARCH_PARAMS_ITERATOR);

                var plus = /\+/g;
                var sequences = Array(4);

                var percentSequence = function (bytes) {
                    return sequences[bytes - 1] || (sequences[bytes - 1] = RegExp('((?:%[\\da-f]{2}){' + bytes + '})', 'gi'));
                };

                var percentDecode = function (sequence) {
                    try {
                        return decodeURIComponent(sequence);
                    } catch (error) {
                        return sequence;
                    }
                };

                var deserialize = function (it) {
                    var result = it.replace(plus, ' ');
                    var bytes = 4;
                    try {
                        return decodeURIComponent(result);
                    } catch (error) {
                        while (bytes) {
                            result = result.replace(percentSequence(bytes--), percentDecode);
                        }
                        return result;
                    }
                };

                var find = /[!'()~]|%20/g;

                var replace = {
                    '!': '%21',
                    "'": '%27',
                    '(': '%28',
                    ')': '%29',
                    '~': '%7E',
                    '%20': '+'
                };

                var replacer = function (match) {
                    return replace[match];
                };

                var serialize = function (it) {
                    return encodeURIComponent(it).replace(find, replacer);
                };

                var parseSearchParams = function (result, query) {
                    if (query) {
                        var attributes = query.split('&');
                        var index = 0;
                        var attribute, entry;
                        while (index < attributes.length) {
                            attribute = attributes[index++];
                            if (attribute.length) {
                                entry = attribute.split('=');
                                result.push({
                                    key: deserialize(entry.shift()),
                                    value: deserialize(entry.join('='))
                                });
                            }
                        }
                    }
                };

                var updateSearchParams = function (query) {
                    this.entries.length = 0;
                    parseSearchParams(this.entries, query);
                };

                var validateArgumentsLength = function (passed, required) {
                    if (passed < required) throw TypeError('Not enough arguments');
                };

                var URLSearchParamsIterator = createIteratorConstructor(function Iterator(params, kind) {
                    setInternalState(this, {
                        type: URL_SEARCH_PARAMS_ITERATOR,
                        iterator: getIterator(getInternalParamsState(params).entries),
                        kind: kind
                    });
                }, 'Iterator', function next() {
                    var state = getInternalIteratorState(this);
                    var kind = state.kind;
                    var step = state.iterator.next();
                    var entry = step.value;
                    if (!step.done) {
                        step.value = kind === 'keys' ? entry.key : kind === 'values' ? entry.value : [entry.key, entry.value];
                    } return step;
                });

                // `URLSearchParams` constructor
                // https://url.spec.whatwg.org/#interface-urlsearchparams
                var URLSearchParamsConstructor = function URLSearchParams(/* init */) {
                    anInstance(this, URLSearchParamsConstructor, URL_SEARCH_PARAMS);
                    var init = arguments.length > 0 ? arguments[0] : undefined;
                    var that = this;
                    var entries = [];
                    var iteratorMethod, iterator, next, step, entryIterator, entryNext, first, second, key;

                    setInternalState(that, {
                        type: URL_SEARCH_PARAMS,
                        entries: entries,
                        updateURL: function () { /* empty */ },
                        updateSearchParams: updateSearchParams
                    });

                    if (init !== undefined) {
                        if (isObject(init)) {
                            iteratorMethod = getIteratorMethod(init);
                            if (typeof iteratorMethod === 'function') {
                                iterator = iteratorMethod.call(init);
                                next = iterator.next;
                                while (!(step = next.call(iterator)).done) {
                                    entryIterator = getIterator(anObject(step.value));
                                    entryNext = entryIterator.next;
                                    if (
                                        (first = entryNext.call(entryIterator)).done ||
                                        (second = entryNext.call(entryIterator)).done ||
                                        !entryNext.call(entryIterator).done
                                    ) throw TypeError('Expected sequence with length 2');
                                    entries.push({ key: first.value + '', value: second.value + '' });
                                }
                            } else for (key in init) if (hasOwn(init, key)) entries.push({ key: key, value: init[key] + '' });
                        } else {
                            parseSearchParams(entries, typeof init === 'string' ? init.charAt(0) === '?' ? init.slice(1) : init : init + '');
                        }
                    }
                };

                var URLSearchParamsPrototype = URLSearchParamsConstructor.prototype;

                redefineAll(URLSearchParamsPrototype, {
                    // `URLSearchParams.prototype.appent` method
                    // https://url.spec.whatwg.org/#dom-urlsearchparams-append
                    append: function append(name, value) {
                        validateArgumentsLength(arguments.length, 2);
                        var state = getInternalParamsState(this);
                        state.entries.push({ key: name + '', value: value + '' });
                        state.updateURL();
                    },
                    // `URLSearchParams.prototype.delete` method
                    // https://url.spec.whatwg.org/#dom-urlsearchparams-delete
                    'delete': function (name) {
                        validateArgumentsLength(arguments.length, 1);
                        var state = getInternalParamsState(this);
                        var entries = state.entries;
                        var key = name + '';
                        var index = 0;
                        while (index < entries.length) {
                            if (entries[index].key === key) entries.splice(index, 1);
                            else index++;
                        }
                        state.updateURL();
                    },
                    // `URLSearchParams.prototype.get` method
                    // https://url.spec.whatwg.org/#dom-urlsearchparams-get
                    get: function get(name) {
                        validateArgumentsLength(arguments.length, 1);
                        var entries = getInternalParamsState(this).entries;
                        var key = name + '';
                        var index = 0;
                        for (; index < entries.length; index++) {
                            if (entries[index].key === key) return entries[index].value;
                        }
                        return null;
                    },
                    // `URLSearchParams.prototype.getAll` method
                    // https://url.spec.whatwg.org/#dom-urlsearchparams-getall
                    getAll: function getAll(name) {
                        validateArgumentsLength(arguments.length, 1);
                        var entries = getInternalParamsState(this).entries;
                        var key = name + '';
                        var result = [];
                        var index = 0;
                        for (; index < entries.length; index++) {
                            if (entries[index].key === key) result.push(entries[index].value);
                        }
                        return result;
                    },
                    // `URLSearchParams.prototype.has` method
                    // https://url.spec.whatwg.org/#dom-urlsearchparams-has
                    has: function has(name) {
                        validateArgumentsLength(arguments.length, 1);
                        var entries = getInternalParamsState(this).entries;
                        var key = name + '';
                        var index = 0;
                        while (index < entries.length) {
                            if (entries[index++].key === key) return true;
                        }
                        return false;
                    },
                    // `URLSearchParams.prototype.set` method
                    // https://url.spec.whatwg.org/#dom-urlsearchparams-set
                    set: function set(name, value) {
                        validateArgumentsLength(arguments.length, 1);
                        var state = getInternalParamsState(this);
                        var entries = state.entries;
                        var found = false;
                        var key = name + '';
                        var val = value + '';
                        var index = 0;
                        var entry;
                        for (; index < entries.length; index++) {
                            entry = entries[index];
                            if (entry.key === key) {
                                if (found) entries.splice(index--, 1);
                                else {
                                    found = true;
                                    entry.value = val;
                                }
                            }
                        }
                        if (!found) entries.push({ key: key, value: val });
                        state.updateURL();
                    },
                    // `URLSearchParams.prototype.sort` method
                    // https://url.spec.whatwg.org/#dom-urlsearchparams-sort
                    sort: function sort() {
                        var state = getInternalParamsState(this);
                        var entries = state.entries;
                        // Array#sort is not stable in some engines
                        var slice = entries.slice();
                        var entry, entriesIndex, sliceIndex;
                        entries.length = 0;
                        for (sliceIndex = 0; sliceIndex < slice.length; sliceIndex++) {
                            entry = slice[sliceIndex];
                            for (entriesIndex = 0; entriesIndex < sliceIndex; entriesIndex++) {
                                if (entries[entriesIndex].key > entry.key) {
                                    entries.splice(entriesIndex, 0, entry);
                                    break;
                                }
                            }
                            if (entriesIndex === sliceIndex) entries.push(entry);
                        }
                        state.updateURL();
                    },
                    // `URLSearchParams.prototype.forEach` method
                    forEach: function forEach(callback /* , thisArg */) {
                        var entries = getInternalParamsState(this).entries;
                        var boundFunction = bind(callback, arguments.length > 1 ? arguments[1] : undefined, 3);
                        var index = 0;
                        var entry;
                        while (index < entries.length) {
                            entry = entries[index++];
                            boundFunction(entry.value, entry.key, this);
                        }
                    },
                    // `URLSearchParams.prototype.keys` method
                    keys: function keys() {
                        return new URLSearchParamsIterator(this, 'keys');
                    },
                    // `URLSearchParams.prototype.values` method
                    values: function values() {
                        return new URLSearchParamsIterator(this, 'values');
                    },
                    // `URLSearchParams.prototype.entries` method
                    entries: function entries() {
                        return new URLSearchParamsIterator(this, 'entries');
                    }
                }, { enumerable: true });

                // `URLSearchParams.prototype[@@iterator]` method
                redefine(URLSearchParamsPrototype, ITERATOR, URLSearchParamsPrototype.entries);

                // `URLSearchParams.prototype.toString` method
                // https://url.spec.whatwg.org/#urlsearchparams-stringification-behavior
                redefine(URLSearchParamsPrototype, 'toString', function toString() {
                    var entries = getInternalParamsState(this).entries;
                    var result = [];
                    var index = 0;
                    var entry;
                    while (index < entries.length) {
                        entry = entries[index++];
                        result.push(serialize(entry.key) + '=' + serialize(entry.value));
                    } return result.join('&');
                }, { enumerable: true });

                setToStringTag(URLSearchParamsConstructor, URL_SEARCH_PARAMS);

                $({ global: true, forced: !USE_NATIVE_URL }, {
                    URLSearchParams: URLSearchParamsConstructor
                });

                // Wrap `fetch` for correct work with polyfilled `URLSearchParams`
                // https://github.com/zloirock/core-js/issues/674
                if (!USE_NATIVE_URL && typeof $fetch == 'function' && typeof Headers == 'function') {
                    $({ global: true, enumerable: true, forced: true }, {
                        fetch: function fetch(input /* , init */) {
                            var args = [input];
                            var init, body, headers;
                            if (arguments.length > 1) {
                                init = arguments[1];
                                if (isObject(init)) {
                                    body = init.body;
                                    if (classof(body) === URL_SEARCH_PARAMS) {
                                        headers = init.headers ? new Headers(init.headers) : new Headers();
                                        if (!headers.has('content-type')) {
                                            headers.set('content-type', 'application/x-www-form-urlencoded;charset=UTF-8');
                                        }
                                        init = create(init, {
                                            body: createPropertyDescriptor(0, String(body)),
                                            headers: createPropertyDescriptor(0, headers)
                                        });
                                    }
                                }
                                args.push(init);
                            } return $fetch.apply(this, args);
                        }
                    });
                }

                module.exports = {
                    URLSearchParams: URLSearchParamsConstructor,
                    getState: getInternalParamsState
                };


                /***/
            }),

/***/ "./node_modules/core-js/modules/web.url.js":
/*!*************************************************!*\
  !*** ./node_modules/core-js/modules/web.url.js ***!
  \*************************************************/
/*! all exports used */
/***/ (function (module, exports, __webpack_require__) {

                "use strict";

                // TODO: in core-js@4, move /modules/ dependencies to public entries for better optimization by tools like `preset-env`
                __webpack_require__(/*! ../modules/es.string.iterator */ "./node_modules/core-js/modules/es.string.iterator.js");
                var $ = __webpack_require__(/*! ../internals/export */ "./node_modules/core-js/internals/export.js");
                var DESCRIPTORS = __webpack_require__(/*! ../internals/descriptors */ "./node_modules/core-js/internals/descriptors.js");
                var USE_NATIVE_URL = __webpack_require__(/*! ../internals/native-url */ "./node_modules/core-js/internals/native-url.js");
                var global = __webpack_require__(/*! ../internals/global */ "./node_modules/core-js/internals/global.js");
                var defineProperties = __webpack_require__(/*! ../internals/object-define-properties */ "./node_modules/core-js/internals/object-define-properties.js");
                var redefine = __webpack_require__(/*! ../internals/redefine */ "./node_modules/core-js/internals/redefine.js");
                var anInstance = __webpack_require__(/*! ../internals/an-instance */ "./node_modules/core-js/internals/an-instance.js");
                var has = __webpack_require__(/*! ../internals/has */ "./node_modules/core-js/internals/has.js");
                var assign = __webpack_require__(/*! ../internals/object-assign */ "./node_modules/core-js/internals/object-assign.js");
                var arrayFrom = __webpack_require__(/*! ../internals/array-from */ "./node_modules/core-js/internals/array-from.js");
                var codeAt = __webpack_require__(/*! ../internals/string-multibyte */ "./node_modules/core-js/internals/string-multibyte.js").codeAt;
                var toASCII = __webpack_require__(/*! ../internals/string-punycode-to-ascii */ "./node_modules/core-js/internals/string-punycode-to-ascii.js");
                var setToStringTag = __webpack_require__(/*! ../internals/set-to-string-tag */ "./node_modules/core-js/internals/set-to-string-tag.js");
                var URLSearchParamsModule = __webpack_require__(/*! ../modules/web.url-search-params */ "./node_modules/core-js/modules/web.url-search-params.js");
                var InternalStateModule = __webpack_require__(/*! ../internals/internal-state */ "./node_modules/core-js/internals/internal-state.js");

                var NativeURL = global.URL;
                var URLSearchParams = URLSearchParamsModule.URLSearchParams;
                var getInternalSearchParamsState = URLSearchParamsModule.getState;
                var setInternalState = InternalStateModule.set;
                var getInternalURLState = InternalStateModule.getterFor('URL');
                var floor = Math.floor;
                var pow = Math.pow;

                var INVALID_AUTHORITY = 'Invalid authority';
                var INVALID_SCHEME = 'Invalid scheme';
                var INVALID_HOST = 'Invalid host';
                var INVALID_PORT = 'Invalid port';

                var ALPHA = /[A-Za-z]/;
                var ALPHANUMERIC = /[\d+-.A-Za-z]/;
                var DIGIT = /\d/;
                var HEX_START = /^(0x|0X)/;
                var OCT = /^[0-7]+$/;
                var DEC = /^\d+$/;
                var HEX = /^[\dA-Fa-f]+$/;
                // eslint-disable-next-line no-control-regex
                var FORBIDDEN_HOST_CODE_POINT = /[\u0000\u0009\u000A\u000D #%/:?@[\\]]/;
                // eslint-disable-next-line no-control-regex
                var FORBIDDEN_HOST_CODE_POINT_EXCLUDING_PERCENT = /[\u0000\u0009\u000A\u000D #/:?@[\\]]/;
                // eslint-disable-next-line no-control-regex
                var LEADING_AND_TRAILING_C0_CONTROL_OR_SPACE = /^[\u0000-\u001F ]+|[\u0000-\u001F ]+$/g;
                // eslint-disable-next-line no-control-regex
                var TAB_AND_NEW_LINE = /[\u0009\u000A\u000D]/g;
                var EOF;

                var parseHost = function (url, input) {
                    var result, codePoints, index;
                    if (input.charAt(0) == '[') {
                        if (input.charAt(input.length - 1) != ']') return INVALID_HOST;
                        result = parseIPv6(input.slice(1, -1));
                        if (!result) return INVALID_HOST;
                        url.host = result;
                        // opaque host
                    } else if (!isSpecial(url)) {
                        if (FORBIDDEN_HOST_CODE_POINT_EXCLUDING_PERCENT.test(input)) return INVALID_HOST;
                        result = '';
                        codePoints = arrayFrom(input);
                        for (index = 0; index < codePoints.length; index++) {
                            result += percentEncode(codePoints[index], C0ControlPercentEncodeSet);
                        }
                        url.host = result;
                    } else {
                        input = toASCII(input);
                        if (FORBIDDEN_HOST_CODE_POINT.test(input)) return INVALID_HOST;
                        result = parseIPv4(input);
                        if (result === null) return INVALID_HOST;
                        url.host = result;
                    }
                };

                var parseIPv4 = function (input) {
                    var parts = input.split('.');
                    var partsLength, numbers, index, part, radix, number, ipv4;
                    if (parts.length && parts[parts.length - 1] == '') {
                        parts.pop();
                    }
                    partsLength = parts.length;
                    if (partsLength > 4) return input;
                    numbers = [];
                    for (index = 0; index < partsLength; index++) {
                        part = parts[index];
                        if (part == '') return input;
                        radix = 10;
                        if (part.length > 1 && part.charAt(0) == '0') {
                            radix = HEX_START.test(part) ? 16 : 8;
                            part = part.slice(radix == 8 ? 1 : 2);
                        }
                        if (part === '') {
                            number = 0;
                        } else {
                            if (!(radix == 10 ? DEC : radix == 8 ? OCT : HEX).test(part)) return input;
                            number = parseInt(part, radix);
                        }
                        numbers.push(number);
                    }
                    for (index = 0; index < partsLength; index++) {
                        number = numbers[index];
                        if (index == partsLength - 1) {
                            if (number >= pow(256, 5 - partsLength)) return null;
                        } else if (number > 255) return null;
                    }
                    ipv4 = numbers.pop();
                    for (index = 0; index < numbers.length; index++) {
                        ipv4 += numbers[index] * pow(256, 3 - index);
                    }
                    return ipv4;
                };

                // eslint-disable-next-line max-statements
                var parseIPv6 = function (input) {
                    var address = [0, 0, 0, 0, 0, 0, 0, 0];
                    var pieceIndex = 0;
                    var compress = null;
                    var pointer = 0;
                    var value, length, numbersSeen, ipv4Piece, number, swaps, swap;

                    var char = function () {
                        return input.charAt(pointer);
                    };

                    if (char() == ':') {
                        if (input.charAt(1) != ':') return;
                        pointer += 2;
                        pieceIndex++;
                        compress = pieceIndex;
                    }
                    while (char()) {
                        if (pieceIndex == 8) return;
                        if (char() == ':') {
                            if (compress !== null) return;
                            pointer++;
                            pieceIndex++;
                            compress = pieceIndex;
                            continue;
                        }
                        value = length = 0;
                        while (length < 4 && HEX.test(char())) {
                            value = value * 16 + parseInt(char(), 16);
                            pointer++;
                            length++;
                        }
                        if (char() == '.') {
                            if (length == 0) return;
                            pointer -= length;
                            if (pieceIndex > 6) return;
                            numbersSeen = 0;
                            while (char()) {
                                ipv4Piece = null;
                                if (numbersSeen > 0) {
                                    if (char() == '.' && numbersSeen < 4) pointer++;
                                    else return;
                                }
                                if (!DIGIT.test(char())) return;
                                while (DIGIT.test(char())) {
                                    number = parseInt(char(), 10);
                                    if (ipv4Piece === null) ipv4Piece = number;
                                    else if (ipv4Piece == 0) return;
                                    else ipv4Piece = ipv4Piece * 10 + number;
                                    if (ipv4Piece > 255) return;
                                    pointer++;
                                }
                                address[pieceIndex] = address[pieceIndex] * 256 + ipv4Piece;
                                numbersSeen++;
                                if (numbersSeen == 2 || numbersSeen == 4) pieceIndex++;
                            }
                            if (numbersSeen != 4) return;
                            break;
                        } else if (char() == ':') {
                            pointer++;
                            if (!char()) return;
                        } else if (char()) return;
                        address[pieceIndex++] = value;
                    }
                    if (compress !== null) {
                        swaps = pieceIndex - compress;
                        pieceIndex = 7;
                        while (pieceIndex != 0 && swaps > 0) {
                            swap = address[pieceIndex];
                            address[pieceIndex--] = address[compress + swaps - 1];
                            address[compress + --swaps] = swap;
                        }
                    } else if (pieceIndex != 8) return;
                    return address;
                };

                var findLongestZeroSequence = function (ipv6) {
                    var maxIndex = null;
                    var maxLength = 1;
                    var currStart = null;
                    var currLength = 0;
                    var index = 0;
                    for (; index < 8; index++) {
                        if (ipv6[index] !== 0) {
                            if (currLength > maxLength) {
                                maxIndex = currStart;
                                maxLength = currLength;
                            }
                            currStart = null;
                            currLength = 0;
                        } else {
                            if (currStart === null) currStart = index;
                            ++currLength;
                        }
                    }
                    if (currLength > maxLength) {
                        maxIndex = currStart;
                        maxLength = currLength;
                    }
                    return maxIndex;
                };

                var serializeHost = function (host) {
                    var result, index, compress, ignore0;
                    // ipv4
                    if (typeof host == 'number') {
                        result = [];
                        for (index = 0; index < 4; index++) {
                            result.unshift(host % 256);
                            host = floor(host / 256);
                        } return result.join('.');
                        // ipv6
                    } else if (typeof host == 'object') {
                        result = '';
                        compress = findLongestZeroSequence(host);
                        for (index = 0; index < 8; index++) {
                            if (ignore0 && host[index] === 0) continue;
                            if (ignore0) ignore0 = false;
                            if (compress === index) {
                                result += index ? ':' : '::';
                                ignore0 = true;
                            } else {
                                result += host[index].toString(16);
                                if (index < 7) result += ':';
                            }
                        }
                        return '[' + result + ']';
                    } return host;
                };

                var C0ControlPercentEncodeSet = {};
                var fragmentPercentEncodeSet = assign({}, C0ControlPercentEncodeSet, {
                    ' ': 1, '"': 1, '<': 1, '>': 1, '`': 1
                });
                var pathPercentEncodeSet = assign({}, fragmentPercentEncodeSet, {
                    '#': 1, '?': 1, '{': 1, '}': 1
                });
                var userinfoPercentEncodeSet = assign({}, pathPercentEncodeSet, {
                    '/': 1, ':': 1, ';': 1, '=': 1, '@': 1, '[': 1, '\\': 1, ']': 1, '^': 1, '|': 1
                });

                var percentEncode = function (char, set) {
                    var code = codeAt(char, 0);
                    return code > 0x20 && code < 0x7F && !has(set, char) ? char : encodeURIComponent(char);
                };

                var specialSchemes = {
                    ftp: 21,
                    file: null,
                    http: 80,
                    https: 443,
                    ws: 80,
                    wss: 443
                };

                var isSpecial = function (url) {
                    return has(specialSchemes, url.scheme);
                };

                var includesCredentials = function (url) {
                    return url.username != '' || url.password != '';
                };

                var cannotHaveUsernamePasswordPort = function (url) {
                    return !url.host || url.cannotBeABaseURL || url.scheme == 'file';
                };

                var isWindowsDriveLetter = function (string, normalized) {
                    var second;
                    return string.length == 2 && ALPHA.test(string.charAt(0))
                        && ((second = string.charAt(1)) == ':' || (!normalized && second == '|'));
                };

                var startsWithWindowsDriveLetter = function (string) {
                    var third;
                    return string.length > 1 && isWindowsDriveLetter(string.slice(0, 2)) && (
                        string.length == 2 ||
                        ((third = string.charAt(2)) === '/' || third === '\\' || third === '?' || third === '#')
                    );
                };

                var shortenURLsPath = function (url) {
                    var path = url.path;
                    var pathSize = path.length;
                    if (pathSize && (url.scheme != 'file' || pathSize != 1 || !isWindowsDriveLetter(path[0], true))) {
                        path.pop();
                    }
                };

                var isSingleDot = function (segment) {
                    return segment === '.' || segment.toLowerCase() === '%2e';
                };

                var isDoubleDot = function (segment) {
                    segment = segment.toLowerCase();
                    return segment === '..' || segment === '%2e.' || segment === '.%2e' || segment === '%2e%2e';
                };

                // States:
                var SCHEME_START = {};
                var SCHEME = {};
                var NO_SCHEME = {};
                var SPECIAL_RELATIVE_OR_AUTHORITY = {};
                var PATH_OR_AUTHORITY = {};
                var RELATIVE = {};
                var RELATIVE_SLASH = {};
                var SPECIAL_AUTHORITY_SLASHES = {};
                var SPECIAL_AUTHORITY_IGNORE_SLASHES = {};
                var AUTHORITY = {};
                var HOST = {};
                var HOSTNAME = {};
                var PORT = {};
                var FILE = {};
                var FILE_SLASH = {};
                var FILE_HOST = {};
                var PATH_START = {};
                var PATH = {};
                var CANNOT_BE_A_BASE_URL_PATH = {};
                var QUERY = {};
                var FRAGMENT = {};

                // eslint-disable-next-line max-statements
                var parseURL = function (url, input, stateOverride, base) {
                    var state = stateOverride || SCHEME_START;
                    var pointer = 0;
                    var buffer = '';
                    var seenAt = false;
                    var seenBracket = false;
                    var seenPasswordToken = false;
                    var codePoints, char, bufferCodePoints, failure;

                    if (!stateOverride) {
                        url.scheme = '';
                        url.username = '';
                        url.password = '';
                        url.host = null;
                        url.port = null;
                        url.path = [];
                        url.query = null;
                        url.fragment = null;
                        url.cannotBeABaseURL = false;
                        input = input.replace(LEADING_AND_TRAILING_C0_CONTROL_OR_SPACE, '');
                    }

                    input = input.replace(TAB_AND_NEW_LINE, '');

                    codePoints = arrayFrom(input);

                    while (pointer <= codePoints.length) {
                        char = codePoints[pointer];
                        switch (state) {
                            case SCHEME_START:
                                if (char && ALPHA.test(char)) {
                                    buffer += char.toLowerCase();
                                    state = SCHEME;
                                } else if (!stateOverride) {
                                    state = NO_SCHEME;
                                    continue;
                                } else return INVALID_SCHEME;
                                break;

                            case SCHEME:
                                if (char && (ALPHANUMERIC.test(char) || char == '+' || char == '-' || char == '.')) {
                                    buffer += char.toLowerCase();
                                } else if (char == ':') {
                                    if (stateOverride && (
                                        (isSpecial(url) != has(specialSchemes, buffer)) ||
                                        (buffer == 'file' && (includesCredentials(url) || url.port !== null)) ||
                                        (url.scheme == 'file' && !url.host)
                                    )) return;
                                    url.scheme = buffer;
                                    if (stateOverride) {
                                        if (isSpecial(url) && specialSchemes[url.scheme] == url.port) url.port = null;
                                        return;
                                    }
                                    buffer = '';
                                    if (url.scheme == 'file') {
                                        state = FILE;
                                    } else if (isSpecial(url) && base && base.scheme == url.scheme) {
                                        state = SPECIAL_RELATIVE_OR_AUTHORITY;
                                    } else if (isSpecial(url)) {
                                        state = SPECIAL_AUTHORITY_SLASHES;
                                    } else if (codePoints[pointer + 1] == '/') {
                                        state = PATH_OR_AUTHORITY;
                                        pointer++;
                                    } else {
                                        url.cannotBeABaseURL = true;
                                        url.path.push('');
                                        state = CANNOT_BE_A_BASE_URL_PATH;
                                    }
                                } else if (!stateOverride) {
                                    buffer = '';
                                    state = NO_SCHEME;
                                    pointer = 0;
                                    continue;
                                } else return INVALID_SCHEME;
                                break;

                            case NO_SCHEME:
                                if (!base || (base.cannotBeABaseURL && char != '#')) return INVALID_SCHEME;
                                if (base.cannotBeABaseURL && char == '#') {
                                    url.scheme = base.scheme;
                                    url.path = base.path.slice();
                                    url.query = base.query;
                                    url.fragment = '';
                                    url.cannotBeABaseURL = true;
                                    state = FRAGMENT;
                                    break;
                                }
                                state = base.scheme == 'file' ? FILE : RELATIVE;
                                continue;

                            case SPECIAL_RELATIVE_OR_AUTHORITY:
                                if (char == '/' && codePoints[pointer + 1] == '/') {
                                    state = SPECIAL_AUTHORITY_IGNORE_SLASHES;
                                    pointer++;
                                } else {
                                    state = RELATIVE;
                                    continue;
                                } break;

                            case PATH_OR_AUTHORITY:
                                if (char == '/') {
                                    state = AUTHORITY;
                                    break;
                                } else {
                                    state = PATH;
                                    continue;
                                }

                            case RELATIVE:
                                url.scheme = base.scheme;
                                if (char == EOF) {
                                    url.username = base.username;
                                    url.password = base.password;
                                    url.host = base.host;
                                    url.port = base.port;
                                    url.path = base.path.slice();
                                    url.query = base.query;
                                } else if (char == '/' || (char == '\\' && isSpecial(url))) {
                                    state = RELATIVE_SLASH;
                                } else if (char == '?') {
                                    url.username = base.username;
                                    url.password = base.password;
                                    url.host = base.host;
                                    url.port = base.port;
                                    url.path = base.path.slice();
                                    url.query = '';
                                    state = QUERY;
                                } else if (char == '#') {
                                    url.username = base.username;
                                    url.password = base.password;
                                    url.host = base.host;
                                    url.port = base.port;
                                    url.path = base.path.slice();
                                    url.query = base.query;
                                    url.fragment = '';
                                    state = FRAGMENT;
                                } else {
                                    url.username = base.username;
                                    url.password = base.password;
                                    url.host = base.host;
                                    url.port = base.port;
                                    url.path = base.path.slice();
                                    url.path.pop();
                                    state = PATH;
                                    continue;
                                } break;

                            case RELATIVE_SLASH:
                                if (isSpecial(url) && (char == '/' || char == '\\')) {
                                    state = SPECIAL_AUTHORITY_IGNORE_SLASHES;
                                } else if (char == '/') {
                                    state = AUTHORITY;
                                } else {
                                    url.username = base.username;
                                    url.password = base.password;
                                    url.host = base.host;
                                    url.port = base.port;
                                    state = PATH;
                                    continue;
                                } break;

                            case SPECIAL_AUTHORITY_SLASHES:
                                state = SPECIAL_AUTHORITY_IGNORE_SLASHES;
                                if (char != '/' || buffer.charAt(pointer + 1) != '/') continue;
                                pointer++;
                                break;

                            case SPECIAL_AUTHORITY_IGNORE_SLASHES:
                                if (char != '/' && char != '\\') {
                                    state = AUTHORITY;
                                    continue;
                                } break;

                            case AUTHORITY:
                                if (char == '@') {
                                    if (seenAt) buffer = '%40' + buffer;
                                    seenAt = true;
                                    bufferCodePoints = arrayFrom(buffer);
                                    for (var i = 0; i < bufferCodePoints.length; i++) {
                                        var codePoint = bufferCodePoints[i];
                                        if (codePoint == ':' && !seenPasswordToken) {
                                            seenPasswordToken = true;
                                            continue;
                                        }
                                        var encodedCodePoints = percentEncode(codePoint, userinfoPercentEncodeSet);
                                        if (seenPasswordToken) url.password += encodedCodePoints;
                                        else url.username += encodedCodePoints;
                                    }
                                    buffer = '';
                                } else if (
                                    char == EOF || char == '/' || char == '?' || char == '#' ||
                                    (char == '\\' && isSpecial(url))
                                ) {
                                    if (seenAt && buffer == '') return INVALID_AUTHORITY;
                                    pointer -= arrayFrom(buffer).length + 1;
                                    buffer = '';
                                    state = HOST;
                                } else buffer += char;
                                break;

                            case HOST:
                            case HOSTNAME:
                                if (stateOverride && url.scheme == 'file') {
                                    state = FILE_HOST;
                                    continue;
                                } else if (char == ':' && !seenBracket) {
                                    if (buffer == '') return INVALID_HOST;
                                    failure = parseHost(url, buffer);
                                    if (failure) return failure;
                                    buffer = '';
                                    state = PORT;
                                    if (stateOverride == HOSTNAME) return;
                                } else if (
                                    char == EOF || char == '/' || char == '?' || char == '#' ||
                                    (char == '\\' && isSpecial(url))
                                ) {
                                    if (isSpecial(url) && buffer == '') return INVALID_HOST;
                                    if (stateOverride && buffer == '' && (includesCredentials(url) || url.port !== null)) return;
                                    failure = parseHost(url, buffer);
                                    if (failure) return failure;
                                    buffer = '';
                                    state = PATH_START;
                                    if (stateOverride) return;
                                    continue;
                                } else {
                                    if (char == '[') seenBracket = true;
                                    else if (char == ']') seenBracket = false;
                                    buffer += char;
                                } break;

                            case PORT:
                                if (DIGIT.test(char)) {
                                    buffer += char;
                                } else if (
                                    char == EOF || char == '/' || char == '?' || char == '#' ||
                                    (char == '\\' && isSpecial(url)) ||
                                    stateOverride
                                ) {
                                    if (buffer != '') {
                                        var port = parseInt(buffer, 10);
                                        if (port > 0xFFFF) return INVALID_PORT;
                                        url.port = (isSpecial(url) && port === specialSchemes[url.scheme]) ? null : port;
                                        buffer = '';
                                    }
                                    if (stateOverride) return;
                                    state = PATH_START;
                                    continue;
                                } else return INVALID_PORT;
                                break;

                            case FILE:
                                url.scheme = 'file';
                                if (char == '/' || char == '\\') state = FILE_SLASH;
                                else if (base && base.scheme == 'file') {
                                    if (char == EOF) {
                                        url.host = base.host;
                                        url.path = base.path.slice();
                                        url.query = base.query;
                                    } else if (char == '?') {
                                        url.host = base.host;
                                        url.path = base.path.slice();
                                        url.query = '';
                                        state = QUERY;
                                    } else if (char == '#') {
                                        url.host = base.host;
                                        url.path = base.path.slice();
                                        url.query = base.query;
                                        url.fragment = '';
                                        state = FRAGMENT;
                                    } else {
                                        if (!startsWithWindowsDriveLetter(codePoints.slice(pointer).join(''))) {
                                            url.host = base.host;
                                            url.path = base.path.slice();
                                            shortenURLsPath(url);
                                        }
                                        state = PATH;
                                        continue;
                                    }
                                } else {
                                    state = PATH;
                                    continue;
                                } break;

                            case FILE_SLASH:
                                if (char == '/' || char == '\\') {
                                    state = FILE_HOST;
                                    break;
                                }
                                if (base && base.scheme == 'file' && !startsWithWindowsDriveLetter(codePoints.slice(pointer).join(''))) {
                                    if (isWindowsDriveLetter(base.path[0], true)) url.path.push(base.path[0]);
                                    else url.host = base.host;
                                }
                                state = PATH;
                                continue;

                            case FILE_HOST:
                                if (char == EOF || char == '/' || char == '\\' || char == '?' || char == '#') {
                                    if (!stateOverride && isWindowsDriveLetter(buffer)) {
                                        state = PATH;
                                    } else if (buffer == '') {
                                        url.host = '';
                                        if (stateOverride) return;
                                        state = PATH_START;
                                    } else {
                                        failure = parseHost(url, buffer);
                                        if (failure) return failure;
                                        if (url.host == 'localhost') url.host = '';
                                        if (stateOverride) return;
                                        buffer = '';
                                        state = PATH_START;
                                    } continue;
                                } else buffer += char;
                                break;

                            case PATH_START:
                                if (isSpecial(url)) {
                                    state = PATH;
                                    if (char != '/' && char != '\\') continue;
                                } else if (!stateOverride && char == '?') {
                                    url.query = '';
                                    state = QUERY;
                                } else if (!stateOverride && char == '#') {
                                    url.fragment = '';
                                    state = FRAGMENT;
                                } else if (char != EOF) {
                                    state = PATH;
                                    if (char != '/') continue;
                                } break;

                            case PATH:
                                if (
                                    char == EOF || char == '/' ||
                                    (char == '\\' && isSpecial(url)) ||
                                    (!stateOverride && (char == '?' || char == '#'))
                                ) {
                                    if (isDoubleDot(buffer)) {
                                        shortenURLsPath(url);
                                        if (char != '/' && !(char == '\\' && isSpecial(url))) {
                                            url.path.push('');
                                        }
                                    } else if (isSingleDot(buffer)) {
                                        if (char != '/' && !(char == '\\' && isSpecial(url))) {
                                            url.path.push('');
                                        }
                                    } else {
                                        if (url.scheme == 'file' && !url.path.length && isWindowsDriveLetter(buffer)) {
                                            if (url.host) url.host = '';
                                            buffer = buffer.charAt(0) + ':'; // normalize windows drive letter
                                        }
                                        url.path.push(buffer);
                                    }
                                    buffer = '';
                                    if (url.scheme == 'file' && (char == EOF || char == '?' || char == '#')) {
                                        while (url.path.length > 1 && url.path[0] === '') {
                                            url.path.shift();
                                        }
                                    }
                                    if (char == '?') {
                                        url.query = '';
                                        state = QUERY;
                                    } else if (char == '#') {
                                        url.fragment = '';
                                        state = FRAGMENT;
                                    }
                                } else {
                                    buffer += percentEncode(char, pathPercentEncodeSet);
                                } break;

                            case CANNOT_BE_A_BASE_URL_PATH:
                                if (char == '?') {
                                    url.query = '';
                                    state = QUERY;
                                } else if (char == '#') {
                                    url.fragment = '';
                                    state = FRAGMENT;
                                } else if (char != EOF) {
                                    url.path[0] += percentEncode(char, C0ControlPercentEncodeSet);
                                } break;

                            case QUERY:
                                if (!stateOverride && char == '#') {
                                    url.fragment = '';
                                    state = FRAGMENT;
                                } else if (char != EOF) {
                                    if (char == "'" && isSpecial(url)) url.query += '%27';
                                    else if (char == '#') url.query += '%23';
                                    else url.query += percentEncode(char, C0ControlPercentEncodeSet);
                                } break;

                            case FRAGMENT:
                                if (char != EOF) url.fragment += percentEncode(char, fragmentPercentEncodeSet);
                                break;
                        }

                        pointer++;
                    }
                };

                // `URL` constructor
                // https://url.spec.whatwg.org/#url-class
                var URLConstructor = function URL(url /* , base */) {
                    var that = anInstance(this, URLConstructor, 'URL');
                    var base = arguments.length > 1 ? arguments[1] : undefined;
                    var urlString = String(url);
                    var state = setInternalState(that, { type: 'URL' });
                    var baseState, failure;
                    if (base !== undefined) {
                        if (base instanceof URLConstructor) baseState = getInternalURLState(base);
                        else {
                            failure = parseURL(baseState = {}, String(base));
                            if (failure) throw TypeError(failure);
                        }
                    }
                    failure = parseURL(state, urlString, null, baseState);
                    if (failure) throw TypeError(failure);
                    var searchParams = state.searchParams = new URLSearchParams();
                    var searchParamsState = getInternalSearchParamsState(searchParams);
                    searchParamsState.updateSearchParams(state.query);
                    searchParamsState.updateURL = function () {
                        state.query = String(searchParams) || null;
                    };
                    if (!DESCRIPTORS) {
                        that.href = serializeURL.call(that);
                        that.origin = getOrigin.call(that);
                        that.protocol = getProtocol.call(that);
                        that.username = getUsername.call(that);
                        that.password = getPassword.call(that);
                        that.host = getHost.call(that);
                        that.hostname = getHostname.call(that);
                        that.port = getPort.call(that);
                        that.pathname = getPathname.call(that);
                        that.search = getSearch.call(that);
                        that.searchParams = getSearchParams.call(that);
                        that.hash = getHash.call(that);
                    }
                };

                var URLPrototype = URLConstructor.prototype;

                var serializeURL = function () {
                    var url = getInternalURLState(this);
                    var scheme = url.scheme;
                    var username = url.username;
                    var password = url.password;
                    var host = url.host;
                    var port = url.port;
                    var path = url.path;
                    var query = url.query;
                    var fragment = url.fragment;
                    var output = scheme + ':';
                    if (host !== null) {
                        output += '//';
                        if (includesCredentials(url)) {
                            output += username + (password ? ':' + password : '') + '@';
                        }
                        output += serializeHost(host);
                        if (port !== null) output += ':' + port;
                    } else if (scheme == 'file') output += '//';
                    output += url.cannotBeABaseURL ? path[0] : path.length ? '/' + path.join('/') : '';
                    if (query !== null) output += '?' + query;
                    if (fragment !== null) output += '#' + fragment;
                    return output;
                };

                var getOrigin = function () {
                    var url = getInternalURLState(this);
                    var scheme = url.scheme;
                    var port = url.port;
                    if (scheme == 'blob') try {
                        return new URL(scheme.path[0]).origin;
                    } catch (error) {
                        return 'null';
                    }
                    if (scheme == 'file' || !isSpecial(url)) return 'null';
                    return scheme + '://' + serializeHost(url.host) + (port !== null ? ':' + port : '');
                };

                var getProtocol = function () {
                    return getInternalURLState(this).scheme + ':';
                };

                var getUsername = function () {
                    return getInternalURLState(this).username;
                };

                var getPassword = function () {
                    return getInternalURLState(this).password;
                };

                var getHost = function () {
                    var url = getInternalURLState(this);
                    var host = url.host;
                    var port = url.port;
                    return host === null ? ''
                        : port === null ? serializeHost(host)
                            : serializeHost(host) + ':' + port;
                };

                var getHostname = function () {
                    var host = getInternalURLState(this).host;
                    return host === null ? '' : serializeHost(host);
                };

                var getPort = function () {
                    var port = getInternalURLState(this).port;
                    return port === null ? '' : String(port);
                };

                var getPathname = function () {
                    var url = getInternalURLState(this);
                    var path = url.path;
                    return url.cannotBeABaseURL ? path[0] : path.length ? '/' + path.join('/') : '';
                };

                var getSearch = function () {
                    var query = getInternalURLState(this).query;
                    return query ? '?' + query : '';
                };

                var getSearchParams = function () {
                    return getInternalURLState(this).searchParams;
                };

                var getHash = function () {
                    var fragment = getInternalURLState(this).fragment;
                    return fragment ? '#' + fragment : '';
                };

                var accessorDescriptor = function (getter, setter) {
                    return { get: getter, set: setter, configurable: true, enumerable: true };
                };

                if (DESCRIPTORS) {
                    defineProperties(URLPrototype, {
                        // `URL.prototype.href` accessors pair
                        // https://url.spec.whatwg.org/#dom-url-href
                        href: accessorDescriptor(serializeURL, function (href) {
                            var url = getInternalURLState(this);
                            var urlString = String(href);
                            var failure = parseURL(url, urlString);
                            if (failure) throw TypeError(failure);
                            getInternalSearchParamsState(url.searchParams).updateSearchParams(url.query);
                        }),
                        // `URL.prototype.origin` getter
                        // https://url.spec.whatwg.org/#dom-url-origin
                        origin: accessorDescriptor(getOrigin),
                        // `URL.prototype.protocol` accessors pair
                        // https://url.spec.whatwg.org/#dom-url-protocol
                        protocol: accessorDescriptor(getProtocol, function (protocol) {
                            var url = getInternalURLState(this);
                            parseURL(url, String(protocol) + ':', SCHEME_START);
                        }),
                        // `URL.prototype.username` accessors pair
                        // https://url.spec.whatwg.org/#dom-url-username
                        username: accessorDescriptor(getUsername, function (username) {
                            var url = getInternalURLState(this);
                            var codePoints = arrayFrom(String(username));
                            if (cannotHaveUsernamePasswordPort(url)) return;
                            url.username = '';
                            for (var i = 0; i < codePoints.length; i++) {
                                url.username += percentEncode(codePoints[i], userinfoPercentEncodeSet);
                            }
                        }),
                        // `URL.prototype.password` accessors pair
                        // https://url.spec.whatwg.org/#dom-url-password
                        password: accessorDescriptor(getPassword, function (password) {
                            var url = getInternalURLState(this);
                            var codePoints = arrayFrom(String(password));
                            if (cannotHaveUsernamePasswordPort(url)) return;
                            url.password = '';
                            for (var i = 0; i < codePoints.length; i++) {
                                url.password += percentEncode(codePoints[i], userinfoPercentEncodeSet);
                            }
                        }),
                        // `URL.prototype.host` accessors pair
                        // https://url.spec.whatwg.org/#dom-url-host
                        host: accessorDescriptor(getHost, function (host) {
                            var url = getInternalURLState(this);
                            if (url.cannotBeABaseURL) return;
                            parseURL(url, String(host), HOST);
                        }),
                        // `URL.prototype.hostname` accessors pair
                        // https://url.spec.whatwg.org/#dom-url-hostname
                        hostname: accessorDescriptor(getHostname, function (hostname) {
                            var url = getInternalURLState(this);
                            if (url.cannotBeABaseURL) return;
                            parseURL(url, String(hostname), HOSTNAME);
                        }),
                        // `URL.prototype.port` accessors pair
                        // https://url.spec.whatwg.org/#dom-url-port
                        port: accessorDescriptor(getPort, function (port) {
                            var url = getInternalURLState(this);
                            if (cannotHaveUsernamePasswordPort(url)) return;
                            port = String(port);
                            if (port == '') url.port = null;
                            else parseURL(url, port, PORT);
                        }),
                        // `URL.prototype.pathname` accessors pair
                        // https://url.spec.whatwg.org/#dom-url-pathname
                        pathname: accessorDescriptor(getPathname, function (pathname) {
                            var url = getInternalURLState(this);
                            if (url.cannotBeABaseURL) return;
                            url.path = [];
                            parseURL(url, pathname + '', PATH_START);
                        }),
                        // `URL.prototype.search` accessors pair
                        // https://url.spec.whatwg.org/#dom-url-search
                        search: accessorDescriptor(getSearch, function (search) {
                            var url = getInternalURLState(this);
                            search = String(search);
                            if (search == '') {
                                url.query = null;
                            } else {
                                if ('?' == search.charAt(0)) search = search.slice(1);
                                url.query = '';
                                parseURL(url, search, QUERY);
                            }
                            getInternalSearchParamsState(url.searchParams).updateSearchParams(url.query);
                        }),
                        // `URL.prototype.searchParams` getter
                        // https://url.spec.whatwg.org/#dom-url-searchparams
                        searchParams: accessorDescriptor(getSearchParams),
                        // `URL.prototype.hash` accessors pair
                        // https://url.spec.whatwg.org/#dom-url-hash
                        hash: accessorDescriptor(getHash, function (hash) {
                            var url = getInternalURLState(this);
                            hash = String(hash);
                            if (hash == '') {
                                url.fragment = null;
                                return;
                            }
                            if ('#' == hash.charAt(0)) hash = hash.slice(1);
                            url.fragment = '';
                            parseURL(url, hash, FRAGMENT);
                        })
                    });
                }

                // `URL.prototype.toJSON` method
                // https://url.spec.whatwg.org/#dom-url-tojson
                redefine(URLPrototype, 'toJSON', function toJSON() {
                    return serializeURL.call(this);
                }, { enumerable: true });

                // `URL.prototype.toString` method
                // https://url.spec.whatwg.org/#URL-stringification-behavior
                redefine(URLPrototype, 'toString', function toString() {
                    return serializeURL.call(this);
                }, { enumerable: true });

                if (NativeURL) {
                    var nativeCreateObjectURL = NativeURL.createObjectURL;
                    var nativeRevokeObjectURL = NativeURL.revokeObjectURL;
                    // `URL.createObjectURL` method
                    // https://developer.mozilla.org/en-US/docs/Web/API/URL/createObjectURL
                    // eslint-disable-next-line no-unused-vars
                    if (nativeCreateObjectURL) redefine(URLConstructor, 'createObjectURL', function createObjectURL(blob) {
                        return nativeCreateObjectURL.apply(NativeURL, arguments);
                    });
                    // `URL.revokeObjectURL` method
                    // https://developer.mozilla.org/en-US/docs/Web/API/URL/revokeObjectURL
                    // eslint-disable-next-line no-unused-vars
                    if (nativeRevokeObjectURL) redefine(URLConstructor, 'revokeObjectURL', function revokeObjectURL(url) {
                        return nativeRevokeObjectURL.apply(NativeURL, arguments);
                    });
                }

                setToStringTag(URLConstructor, 'URL');

                $({ global: true, forced: !USE_NATIVE_URL, sham: !DESCRIPTORS }, {
                    URL: URLConstructor
                });


                /***/
            }),

/***/ "./node_modules/core-js/modules/web.url.to-json.js":
/*!*********************************************************!*\
  !*** ./node_modules/core-js/modules/web.url.to-json.js ***!
  \*********************************************************/
/*! all exports used */
/***/ (function (module, exports, __webpack_require__) {

                "use strict";

                var $ = __webpack_require__(/*! ../internals/export */ "./node_modules/core-js/internals/export.js");

                // `URL.prototype.toJSON` method
                // https://url.spec.whatwg.org/#dom-url-tojson
                $({ target: 'URL', proto: true, enumerable: true }, {
                    toJSON: function toJSON() {
                        return URL.prototype.toString.call(this);
                    }
                });


                /***/
            }),

/***/ "./node_modules/cross-fetch/dist/browser-ponyfill.js":
/*!***********************************************************!*\
  !*** ./node_modules/cross-fetch/dist/browser-ponyfill.js ***!
  \***********************************************************/
/*! all exports used */
/***/ (function (module, exports) {

                var __self__ = (function (root) {
                    function F() {
                        this.fetch = false;
                        this.DOMException = root.DOMException
                    }
                    F.prototype = root;
                    return new F();
                })(typeof self !== 'undefined' ? self : this);
                (function (self) {

                    var irrelevant = (function (exports) {
                        var support = {
                            searchParams: 'URLSearchParams' in self,
                            iterable: 'Symbol' in self && 'iterator' in Symbol,
                            blob:
                                'FileReader' in self &&
                                'Blob' in self &&
                                (function () {
                                    try {
                                        new Blob();
                                        return true
                                    } catch (e) {
                                        return false
                                    }
                                })(),
                            formData: 'FormData' in self,
                            arrayBuffer: 'ArrayBuffer' in self
                        };

                        function isDataView(obj) {
                            return obj && DataView.prototype.isPrototypeOf(obj)
                        }

                        if (support.arrayBuffer) {
                            var viewClasses = [
                                '[object Int8Array]',
                                '[object Uint8Array]',
                                '[object Uint8ClampedArray]',
                                '[object Int16Array]',
                                '[object Uint16Array]',
                                '[object Int32Array]',
                                '[object Uint32Array]',
                                '[object Float32Array]',
                                '[object Float64Array]'
                            ];

                            var isArrayBufferView =
                                ArrayBuffer.isView ||
                                function (obj) {
                                    return obj && viewClasses.indexOf(Object.prototype.toString.call(obj)) > -1
                                };
                        }

                        function normalizeName(name) {
                            if (typeof name !== 'string') {
                                name = String(name);
                            }
                            if (/[^a-z0-9\-#$%&'*+.^_`|~]/i.test(name)) {
                                throw new TypeError('Invalid character in header field name')
                            }
                            return name.toLowerCase()
                        }

                        function normalizeValue(value) {
                            if (typeof value !== 'string') {
                                value = String(value);
                            }
                            return value
                        }

                        // Build a destructive iterator for the value list
                        function iteratorFor(items) {
                            var iterator = {
                                next: function () {
                                    var value = items.shift();
                                    return { done: value === undefined, value: value }
                                }
                            };

                            if (support.iterable) {
                                iterator[Symbol.iterator] = function () {
                                    return iterator
                                };
                            }

                            return iterator
                        }

                        function Headers(headers) {
                            this.map = {};

                            if (headers instanceof Headers) {
                                headers.forEach(function (value, name) {
                                    this.append(name, value);
                                }, this);
                            } else if (Array.isArray(headers)) {
                                headers.forEach(function (header) {
                                    this.append(header[0], header[1]);
                                }, this);
                            } else if (headers) {
                                Object.getOwnPropertyNames(headers).forEach(function (name) {
                                    this.append(name, headers[name]);
                                }, this);
                            }
                        }

                        Headers.prototype.append = function (name, value) {
                            name = normalizeName(name);
                            value = normalizeValue(value);
                            var oldValue = this.map[name];
                            this.map[name] = oldValue ? oldValue + ', ' + value : value;
                        };

                        Headers.prototype['delete'] = function (name) {
                            delete this.map[normalizeName(name)];
                        };

                        Headers.prototype.get = function (name) {
                            name = normalizeName(name);
                            return this.has(name) ? this.map[name] : null
                        };

                        Headers.prototype.has = function (name) {
                            return this.map.hasOwnProperty(normalizeName(name))
                        };

                        Headers.prototype.set = function (name, value) {
                            this.map[normalizeName(name)] = normalizeValue(value);
                        };

                        Headers.prototype.forEach = function (callback, thisArg) {
                            for (var name in this.map) {
                                if (this.map.hasOwnProperty(name)) {
                                    callback.call(thisArg, this.map[name], name, this);
                                }
                            }
                        };

                        Headers.prototype.keys = function () {
                            var items = [];
                            this.forEach(function (value, name) {
                                items.push(name);
                            });
                            return iteratorFor(items)
                        };

                        Headers.prototype.values = function () {
                            var items = [];
                            this.forEach(function (value) {
                                items.push(value);
                            });
                            return iteratorFor(items)
                        };

                        Headers.prototype.entries = function () {
                            var items = [];
                            this.forEach(function (value, name) {
                                items.push([name, value]);
                            });
                            return iteratorFor(items)
                        };

                        if (support.iterable) {
                            Headers.prototype[Symbol.iterator] = Headers.prototype.entries;
                        }

                        function consumed(body) {
                            if (body.bodyUsed) {
                                return Promise.reject(new TypeError('Already read'))
                            }
                            body.bodyUsed = true;
                        }

                        function fileReaderReady(reader) {
                            return new Promise(function (resolve, reject) {
                                reader.onload = function () {
                                    resolve(reader.result);
                                };
                                reader.onerror = function () {
                                    reject(reader.error);
                                };
                            })
                        }

                        function readBlobAsArrayBuffer(blob) {
                            var reader = new FileReader();
                            var promise = fileReaderReady(reader);
                            reader.readAsArrayBuffer(blob);
                            return promise
                        }

                        function readBlobAsText(blob) {
                            var reader = new FileReader();
                            var promise = fileReaderReady(reader);
                            reader.readAsText(blob);
                            return promise
                        }

                        function readArrayBufferAsText(buf) {
                            var view = new Uint8Array(buf);
                            var chars = new Array(view.length);

                            for (var i = 0; i < view.length; i++) {
                                chars[i] = String.fromCharCode(view[i]);
                            }
                            return chars.join('')
                        }

                        function bufferClone(buf) {
                            if (buf.slice) {
                                return buf.slice(0)
                            } else {
                                var view = new Uint8Array(buf.byteLength);
                                view.set(new Uint8Array(buf));
                                return view.buffer
                            }
                        }

                        function Body() {
                            this.bodyUsed = false;

                            this._initBody = function (body) {
                                this._bodyInit = body;
                                if (!body) {
                                    this._bodyText = '';
                                } else if (typeof body === 'string') {
                                    this._bodyText = body;
                                } else if (support.blob && Blob.prototype.isPrototypeOf(body)) {
                                    this._bodyBlob = body;
                                } else if (support.formData && FormData.prototype.isPrototypeOf(body)) {
                                    this._bodyFormData = body;
                                } else if (support.searchParams && URLSearchParams.prototype.isPrototypeOf(body)) {
                                    this._bodyText = body.toString();
                                } else if (support.arrayBuffer && support.blob && isDataView(body)) {
                                    this._bodyArrayBuffer = bufferClone(body.buffer);
                                    // IE 10-11 can't handle a DataView body.
                                    this._bodyInit = new Blob([this._bodyArrayBuffer]);
                                } else if (support.arrayBuffer && (ArrayBuffer.prototype.isPrototypeOf(body) || isArrayBufferView(body))) {
                                    this._bodyArrayBuffer = bufferClone(body);
                                } else {
                                    this._bodyText = body = Object.prototype.toString.call(body);
                                }

                                if (!this.headers.get('content-type')) {
                                    if (typeof body === 'string') {
                                        this.headers.set('content-type', 'text/plain;charset=UTF-8');
                                    } else if (this._bodyBlob && this._bodyBlob.type) {
                                        this.headers.set('content-type', this._bodyBlob.type);
                                    } else if (support.searchParams && URLSearchParams.prototype.isPrototypeOf(body)) {
                                        this.headers.set('content-type', 'application/x-www-form-urlencoded;charset=UTF-8');
                                    }
                                }
                            };

                            if (support.blob) {
                                this.blob = function () {
                                    var rejected = consumed(this);
                                    if (rejected) {
                                        return rejected
                                    }

                                    if (this._bodyBlob) {
                                        return Promise.resolve(this._bodyBlob)
                                    } else if (this._bodyArrayBuffer) {
                                        return Promise.resolve(new Blob([this._bodyArrayBuffer]))
                                    } else if (this._bodyFormData) {
                                        throw new Error('could not read FormData body as blob')
                                    } else {
                                        return Promise.resolve(new Blob([this._bodyText]))
                                    }
                                };

                                this.arrayBuffer = function () {
                                    if (this._bodyArrayBuffer) {
                                        return consumed(this) || Promise.resolve(this._bodyArrayBuffer)
                                    } else {
                                        return this.blob().then(readBlobAsArrayBuffer)
                                    }
                                };
                            }

                            this.text = function () {
                                var rejected = consumed(this);
                                if (rejected) {
                                    return rejected
                                }

                                if (this._bodyBlob) {
                                    return readBlobAsText(this._bodyBlob)
                                } else if (this._bodyArrayBuffer) {
                                    return Promise.resolve(readArrayBufferAsText(this._bodyArrayBuffer))
                                } else if (this._bodyFormData) {
                                    throw new Error('could not read FormData body as text')
                                } else {
                                    return Promise.resolve(this._bodyText)
                                }
                            };

                            if (support.formData) {
                                this.formData = function () {
                                    return this.text().then(decode)
                                };
                            }

                            this.json = function () {
                                return this.text().then(JSON.parse)
                            };

                            return this
                        }

                        // HTTP methods whose capitalization should be normalized
                        var methods = ['DELETE', 'GET', 'HEAD', 'OPTIONS', 'POST', 'PUT'];

                        function normalizeMethod(method) {
                            var upcased = method.toUpperCase();
                            return methods.indexOf(upcased) > -1 ? upcased : method
                        }

                        function Request(input, options) {
                            options = options || {};
                            var body = options.body;

                            if (input instanceof Request) {
                                if (input.bodyUsed) {
                                    throw new TypeError('Already read')
                                }
                                this.url = input.url;
                                this.credentials = input.credentials;
                                if (!options.headers) {
                                    this.headers = new Headers(input.headers);
                                }
                                this.method = input.method;
                                this.mode = input.mode;
                                this.signal = input.signal;
                                if (!body && input._bodyInit != null) {
                                    body = input._bodyInit;
                                    input.bodyUsed = true;
                                }
                            } else {
                                this.url = String(input);
                            }

                            this.credentials = options.credentials || this.credentials || 'same-origin';
                            if (options.headers || !this.headers) {
                                this.headers = new Headers(options.headers);
                            }
                            this.method = normalizeMethod(options.method || this.method || 'GET');
                            this.mode = options.mode || this.mode || null;
                            this.signal = options.signal || this.signal;
                            this.referrer = null;

                            if ((this.method === 'GET' || this.method === 'HEAD') && body) {
                                throw new TypeError('Body not allowed for GET or HEAD requests')
                            }
                            this._initBody(body);
                        }

                        Request.prototype.clone = function () {
                            return new Request(this, { body: this._bodyInit })
                        };

                        function decode(body) {
                            var form = new FormData();
                            body
                                .trim()
                                .split('&')
                                .forEach(function (bytes) {
                                    if (bytes) {
                                        var split = bytes.split('=');
                                        var name = split.shift().replace(/\+/g, ' ');
                                        var value = split.join('=').replace(/\+/g, ' ');
                                        form.append(decodeURIComponent(name), decodeURIComponent(value));
                                    }
                                });
                            return form
                        }

                        function parseHeaders(rawHeaders) {
                            var headers = new Headers();
                            // Replace instances of \r\n and \n followed by at least one space or horizontal tab with a space
                            // https://tools.ietf.org/html/rfc7230#section-3.2
                            var preProcessedHeaders = rawHeaders.replace(/\r?\n[\t ]+/g, ' ');
                            preProcessedHeaders.split(/\r?\n/).forEach(function (line) {
                                var parts = line.split(':');
                                var key = parts.shift().trim();
                                if (key) {
                                    var value = parts.join(':').trim();
                                    headers.append(key, value);
                                }
                            });
                            return headers
                        }

                        Body.call(Request.prototype);

                        function Response(bodyInit, options) {
                            if (!options) {
                                options = {};
                            }

                            this.type = 'default';
                            this.status = options.status === undefined ? 200 : options.status;
                            this.ok = this.status >= 200 && this.status < 300;
                            this.statusText = 'statusText' in options ? options.statusText : 'OK';
                            this.headers = new Headers(options.headers);
                            this.url = options.url || '';
                            this._initBody(bodyInit);
                        }

                        Body.call(Response.prototype);

                        Response.prototype.clone = function () {
                            return new Response(this._bodyInit, {
                                status: this.status,
                                statusText: this.statusText,
                                headers: new Headers(this.headers),
                                url: this.url
                            })
                        };

                        Response.error = function () {
                            var response = new Response(null, { status: 0, statusText: '' });
                            response.type = 'error';
                            return response
                        };

                        var redirectStatuses = [301, 302, 303, 307, 308];

                        Response.redirect = function (url, status) {
                            if (redirectStatuses.indexOf(status) === -1) {
                                throw new RangeError('Invalid status code')
                            }

                            return new Response(null, { status: status, headers: { location: url } })
                        };

                        exports.DOMException = self.DOMException;
                        try {
                            new exports.DOMException();
                        } catch (err) {
                            exports.DOMException = function (message, name) {
                                this.message = message;
                                this.name = name;
                                var error = Error(message);
                                this.stack = error.stack;
                            };
                            exports.DOMException.prototype = Object.create(Error.prototype);
                            exports.DOMException.prototype.constructor = exports.DOMException;
                        }

                        function fetch(input, init) {
                            return new Promise(function (resolve, reject) {
                                var request = new Request(input, init);

                                if (request.signal && request.signal.aborted) {
                                    return reject(new exports.DOMException('Aborted', 'AbortError'))
                                }

                                var xhr = new XMLHttpRequest();

                                function abortXhr() {
                                    xhr.abort();
                                }

                                xhr.onload = function () {
                                    var options = {
                                        status: xhr.status,
                                        statusText: xhr.statusText,
                                        headers: parseHeaders(xhr.getAllResponseHeaders() || '')
                                    };
                                    options.url = 'responseURL' in xhr ? xhr.responseURL : options.headers.get('X-Request-URL');
                                    var body = 'response' in xhr ? xhr.response : xhr.responseText;
                                    resolve(new Response(body, options));
                                };

                                xhr.onerror = function () {
                                    reject(new TypeError('Network request failed'));
                                };

                                xhr.ontimeout = function () {
                                    reject(new TypeError('Network request failed'));
                                };

                                xhr.onabort = function () {
                                    reject(new exports.DOMException('Aborted', 'AbortError'));
                                };

                                xhr.open(request.method, request.url, true);

                                if (request.credentials === 'include') {
                                    xhr.withCredentials = true;
                                } else if (request.credentials === 'omit') {
                                    xhr.withCredentials = false;
                                }

                                if ('responseType' in xhr && support.blob) {
                                    xhr.responseType = 'blob';
                                }

                                request.headers.forEach(function (value, name) {
                                    xhr.setRequestHeader(name, value);
                                });

                                if (request.signal) {
                                    request.signal.addEventListener('abort', abortXhr);

                                    xhr.onreadystatechange = function () {
                                        // DONE (success or failure)
                                        if (xhr.readyState === 4) {
                                            request.signal.removeEventListener('abort', abortXhr);
                                        }
                                    };
                                }

                                xhr.send(typeof request._bodyInit === 'undefined' ? null : request._bodyInit);
                            })
                        }

                        fetch.polyfill = true;

                        if (!self.fetch) {
                            self.fetch = fetch;
                            self.Headers = Headers;
                            self.Request = Request;
                            self.Response = Response;
                        }

                        exports.Headers = Headers;
                        exports.Request = Request;
                        exports.Response = Response;
                        exports.fetch = fetch;

                        return exports;

                    }({}));
                })(__self__);
                delete __self__.fetch.polyfill
                exports = __self__.fetch // To enable: import fetch from 'cross-fetch'
                exports.default = __self__.fetch // For TypeScript consumers without esModuleInterop.
                exports.fetch = __self__.fetch // To enable: import {fetch} from 'cross-fetch'
                exports.Headers = __self__.Headers
                exports.Request = __self__.Request
                exports.Response = __self__.Response
                module.exports = exports


                /***/
            }),

/***/ "./node_modules/debug/node_modules/ms/index.js":
/*!*****************************************************!*\
  !*** ./node_modules/debug/node_modules/ms/index.js ***!
  \*****************************************************/
/*! all exports used */
/***/ (function (module, exports, __webpack_require__) {

                "use strict";


                __webpack_require__(/*! core-js/modules/es.regexp.exec */ "./node_modules/core-js/modules/es.regexp.exec.js");

                /**
                 * Helpers.
                 */
                var s = 1000;
                var m = s * 60;
                var h = m * 60;
                var d = h * 24;
                var w = d * 7;
                var y = d * 365.25;
                /**
                 * Parse or format the given `val`.
                 *
                 * Options:
                 *
                 *  - `long` verbose formatting [false]
                 *
                 * @param {String|Number} val
                 * @param {Object} [options]
                 * @throws {Error} throw an error if val is not a non-empty string or a number
                 * @return {String|Number}
                 * @api public
                 */

                module.exports = function (val, options) {
                    options = options || {};
                    var type = typeof val;

                    if (type === 'string' && val.length > 0) {
                        return parse(val);
                    } else if (type === 'number' && isNaN(val) === false) {
                        return options.long ? fmtLong(val) : fmtShort(val);
                    }

                    throw new Error('val is not a non-empty string or a valid number. val=' + JSON.stringify(val));
                };
                /**
                 * Parse the given `str` and return milliseconds.
                 *
                 * @param {String} str
                 * @return {Number}
                 * @api private
                 */


                function parse(str) {
                    str = String(str);

                    if (str.length > 100) {
                        return;
                    }

                    var match = /^((?:\d+)?\-?\d?\.?\d+) *(milliseconds?|msecs?|ms|seconds?|secs?|s|minutes?|mins?|m|hours?|hrs?|h|days?|d|weeks?|w|years?|yrs?|y)?$/i.exec(str);

                    if (!match) {
                        return;
                    }

                    var n = parseFloat(match[1]);
                    var type = (match[2] || 'ms').toLowerCase();

                    switch (type) {
                        case 'years':
                        case 'year':
                        case 'yrs':
                        case 'yr':
                        case 'y':
                            return n * y;

                        case 'weeks':
                        case 'week':
                        case 'w':
                            return n * w;

                        case 'days':
                        case 'day':
                        case 'd':
                            return n * d;

                        case 'hours':
                        case 'hour':
                        case 'hrs':
                        case 'hr':
                        case 'h':
                            return n * h;

                        case 'minutes':
                        case 'minute':
                        case 'mins':
                        case 'min':
                        case 'm':
                            return n * m;

                        case 'seconds':
                        case 'second':
                        case 'secs':
                        case 'sec':
                        case 's':
                            return n * s;

                        case 'milliseconds':
                        case 'millisecond':
                        case 'msecs':
                        case 'msec':
                        case 'ms':
                            return n;

                        default:
                            return undefined;
                    }
                }
                /**
                 * Short format for `ms`.
                 *
                 * @param {Number} ms
                 * @return {String}
                 * @api private
                 */


                function fmtShort(ms) {
                    var msAbs = Math.abs(ms);

                    if (msAbs >= d) {
                        return Math.round(ms / d) + 'd';
                    }

                    if (msAbs >= h) {
                        return Math.round(ms / h) + 'h';
                    }

                    if (msAbs >= m) {
                        return Math.round(ms / m) + 'm';
                    }

                    if (msAbs >= s) {
                        return Math.round(ms / s) + 's';
                    }

                    return ms + 'ms';
                }
                /**
                 * Long format for `ms`.
                 *
                 * @param {Number} ms
                 * @return {String}
                 * @api private
                 */


                function fmtLong(ms) {
                    var msAbs = Math.abs(ms);

                    if (msAbs >= d) {
                        return plural(ms, msAbs, d, 'day');
                    }

                    if (msAbs >= h) {
                        return plural(ms, msAbs, h, 'hour');
                    }

                    if (msAbs >= m) {
                        return plural(ms, msAbs, m, 'minute');
                    }

                    if (msAbs >= s) {
                        return plural(ms, msAbs, s, 'second');
                    }

                    return ms + ' ms';
                }
                /**
                 * Pluralization helper.
                 */


                function plural(ms, msAbs, n, name) {
                    var isPlural = msAbs >= n * 1.5;
                    return Math.round(ms / n) + ' ' + name + (isPlural ? 's' : '');
                }

                /***/
            }),

/***/ "./node_modules/debug/src/browser.js":
/*!*******************************************!*\
  !*** ./node_modules/debug/src/browser.js ***!
  \*******************************************/
/*! all exports used */
/***/ (function (module, exports, __webpack_require__) {

                "use strict";
/* WEBPACK VAR INJECTION */(function (process) {

                    __webpack_require__(/*! core-js/modules/es.array.splice */ "./node_modules/core-js/modules/es.array.splice.js");

                    __webpack_require__(/*! core-js/modules/es.regexp.constructor */ "./node_modules/core-js/modules/es.regexp.constructor.js");

                    __webpack_require__(/*! core-js/modules/es.regexp.exec */ "./node_modules/core-js/modules/es.regexp.exec.js");

                    __webpack_require__(/*! core-js/modules/es.regexp.to-string */ "./node_modules/core-js/modules/es.regexp.to-string.js");

                    __webpack_require__(/*! core-js/modules/es.string.match */ "./node_modules/core-js/modules/es.string.match.js");

                    __webpack_require__(/*! core-js/modules/es.string.replace */ "./node_modules/core-js/modules/es.string.replace.js");

                    /* eslint-env browser */

                    /**
                     * This is the web browser implementation of `debug()`.
                     */
                    exports.log = log;
                    exports.formatArgs = formatArgs;
                    exports.save = save;
                    exports.load = load;
                    exports.useColors = useColors;
                    exports.storage = localstorage();
                    /**
                     * Colors.
                     */

                    exports.colors = ['#0000CC', '#0000FF', '#0033CC', '#0033FF', '#0066CC', '#0066FF', '#0099CC', '#0099FF', '#00CC00', '#00CC33', '#00CC66', '#00CC99', '#00CCCC', '#00CCFF', '#3300CC', '#3300FF', '#3333CC', '#3333FF', '#3366CC', '#3366FF', '#3399CC', '#3399FF', '#33CC00', '#33CC33', '#33CC66', '#33CC99', '#33CCCC', '#33CCFF', '#6600CC', '#6600FF', '#6633CC', '#6633FF', '#66CC00', '#66CC33', '#9900CC', '#9900FF', '#9933CC', '#9933FF', '#99CC00', '#99CC33', '#CC0000', '#CC0033', '#CC0066', '#CC0099', '#CC00CC', '#CC00FF', '#CC3300', '#CC3333', '#CC3366', '#CC3399', '#CC33CC', '#CC33FF', '#CC6600', '#CC6633', '#CC9900', '#CC9933', '#CCCC00', '#CCCC33', '#FF0000', '#FF0033', '#FF0066', '#FF0099', '#FF00CC', '#FF00FF', '#FF3300', '#FF3333', '#FF3366', '#FF3399', '#FF33CC', '#FF33FF', '#FF6600', '#FF6633', '#FF9900', '#FF9933', '#FFCC00', '#FFCC33'];
                    /**
                     * Currently only WebKit-based Web Inspectors, Firefox >= v31,
                     * and the Firebug extension (any Firefox version) are known
                     * to support "%c" CSS customizations.
                     *
                     * TODO: add a `localStorage` variable to explicitly enable/disable colors
                     */
                    // eslint-disable-next-line complexity

                    function useColors() {
                        // NB: In an Electron preload script, document will be defined but not fully
                        // initialized. Since we know we're in Chrome, we'll just detect this case
                        // explicitly
                        if (typeof window !== 'undefined' && window.process && (window.process.type === 'renderer' || window.process.__nwjs)) {
                            return true;
                        } // Internet Explorer and Edge do not support colors.


                        if (typeof navigator !== 'undefined' && navigator.userAgent && navigator.userAgent.toLowerCase().match(/(edge|trident)\/(\d+)/)) {
                            return false;
                        } // Is webkit? http://stackoverflow.com/a/16459606/376773
                        // document is undefined in react-native: https://github.com/facebook/react-native/pull/1632


                        return typeof document !== 'undefined' && document.documentElement && document.documentElement.style && document.documentElement.style.WebkitAppearance || // Is firebug? http://stackoverflow.com/a/398120/376773
                            typeof window !== 'undefined' && window.console && (window.console.firebug || window.console.exception && window.console.table) || // Is firefox >= v31?
                            // https://developer.mozilla.org/en-US/docs/Tools/Web_Console#Styling_messages
                            typeof navigator !== 'undefined' && navigator.userAgent && navigator.userAgent.toLowerCase().match(/firefox\/(\d+)/) && parseInt(RegExp.$1, 10) >= 31 || // Double check webkit in userAgent just in case we are in a worker
                            typeof navigator !== 'undefined' && navigator.userAgent && navigator.userAgent.toLowerCase().match(/applewebkit\/(\d+)/);
                    }
                    /**
                     * Colorize log arguments if enabled.
                     *
                     * @api public
                     */


                    function formatArgs(args) {
                        args[0] = (this.useColors ? '%c' : '') + this.namespace + (this.useColors ? ' %c' : ' ') + args[0] + (this.useColors ? '%c ' : ' ') + '+' + module.exports.humanize(this.diff);

                        if (!this.useColors) {
                            return;
                        }

                        var c = 'color: ' + this.color;
                        args.splice(1, 0, c, 'color: inherit'); // The final "%c" is somewhat tricky, because there could be other
                        // arguments passed either before or after the %c, so we need to
                        // figure out the correct index to insert the CSS into

                        var index = 0;
                        var lastC = 0;
                        args[0].replace(/%[a-zA-Z%]/g, function (match) {
                            if (match === '%%') {
                                return;
                            }

                            index++;

                            if (match === '%c') {
                                // We only are interested in the *last* %c
                                // (the user may have provided their own)
                                lastC = index;
                            }
                        });
                        args.splice(lastC, 0, c);
                    }
                    /**
                     * Invokes `console.log()` when available.
                     * No-op when `console.log` is not a "function".
                     *
                     * @api public
                     */


                    function log() {
                        var _console;

                        // This hackery is required for IE8/9, where
                        // the `console.log` function doesn't have 'apply'
                        return typeof console === 'object' && console.log && (_console = console).log.apply(_console, arguments);
                    }
                    /**
                     * Save `namespaces`.
                     *
                     * @param {String} namespaces
                     * @api private
                     */


                    function save(namespaces) {
                        try {
                            if (namespaces) {
                                exports.storage.setItem('debug', namespaces);
                            } else {
                                exports.storage.removeItem('debug');
                            }
                        } catch (error) {// Swallow
                            // XXX (@Qix-) should we be logging these?
                        }
                    }
                    /**
                     * Load `namespaces`.
                     *
                     * @return {String} returns the previously persisted debug modes
                     * @api private
                     */


                    function load() {
                        var r;

                        try {
                            r = exports.storage.getItem('debug');
                        } catch (error) {// Swallow
                            // XXX (@Qix-) should we be logging these?
                        } // If debug isn't set in LS, and we're in Electron, try to load $DEBUG


                        if (!r && typeof process !== 'undefined' && 'env' in process) {
                            r = process.env.DEBUG;
                        }

                        return r;
                    }
                    /**
                     * Localstorage attempts to return the localstorage.
                     *
                     * This is necessary because safari throws
                     * when a user disables cookies/localstorage
                     * and you attempt to access it.
                     *
                     * @return {LocalStorage}
                     * @api private
                     */


                    function localstorage() {
                        try {
                            // TVMLKit (Apple TV JS Runtime) does not have a window object, just localStorage in the global context
                            // The Browser also has localStorage in the global context.
                            return localStorage;
                        } catch (error) {// Swallow
                            // XXX (@Qix-) should we be logging these?
                        }
                    }

                    module.exports = __webpack_require__(/*! ./common */ "./node_modules/debug/src/common.js")(exports);
                    var formatters = module.exports.formatters;
                    /**
                     * Map %j to `JSON.stringify()`, since no Web Inspectors do that by default.
                     */

                    formatters.j = function (v) {
                        try {
                            return JSON.stringify(v);
                        } catch (error) {
                            return '[UnexpectedJSONParseError]: ' + error.message;
                        }
                    };
                    /* WEBPACK VAR INJECTION */
                }.call(this, __webpack_require__(/*! ./../../process/browser.js */ "./node_modules/process/browser.js")))

                /***/
            }),

/***/ "./node_modules/debug/src/common.js":
/*!******************************************!*\
  !*** ./node_modules/debug/src/common.js ***!
  \******************************************/
/*! all exports used */
/***/ (function (module, exports, __webpack_require__) {

                "use strict";


                __webpack_require__(/*! core-js/modules/es.array.concat */ "./node_modules/core-js/modules/es.array.concat.js");

                __webpack_require__(/*! core-js/modules/es.array.for-each */ "./node_modules/core-js/modules/es.array.for-each.js");

                __webpack_require__(/*! core-js/modules/es.array.index-of */ "./node_modules/core-js/modules/es.array.index-of.js");

                __webpack_require__(/*! core-js/modules/es.array.join */ "./node_modules/core-js/modules/es.array.join.js");

                __webpack_require__(/*! core-js/modules/es.array.map */ "./node_modules/core-js/modules/es.array.map.js");

                __webpack_require__(/*! core-js/modules/es.array.splice */ "./node_modules/core-js/modules/es.array.splice.js");

                __webpack_require__(/*! core-js/modules/es.number.constructor */ "./node_modules/core-js/modules/es.number.constructor.js");

                __webpack_require__(/*! core-js/modules/es.object.keys */ "./node_modules/core-js/modules/es.object.keys.js");

                __webpack_require__(/*! core-js/modules/es.object.to-string */ "./node_modules/core-js/modules/es.object.to-string.js");

                __webpack_require__(/*! core-js/modules/es.regexp.constructor */ "./node_modules/core-js/modules/es.regexp.constructor.js");

                __webpack_require__(/*! core-js/modules/es.regexp.exec */ "./node_modules/core-js/modules/es.regexp.exec.js");

                __webpack_require__(/*! core-js/modules/es.regexp.to-string */ "./node_modules/core-js/modules/es.regexp.to-string.js");

                __webpack_require__(/*! core-js/modules/es.string.replace */ "./node_modules/core-js/modules/es.string.replace.js");

                __webpack_require__(/*! core-js/modules/es.string.split */ "./node_modules/core-js/modules/es.string.split.js");

                __webpack_require__(/*! core-js/modules/web.dom-collections.for-each */ "./node_modules/core-js/modules/web.dom-collections.for-each.js");

                /**
                 * This is the common logic for both the Node.js and web browser
                 * implementations of `debug()`.
                 */
                function setup(env) {
                    createDebug.debug = createDebug;
                    createDebug.default = createDebug;
                    createDebug.coerce = coerce;
                    createDebug.disable = disable;
                    createDebug.enable = enable;
                    createDebug.enabled = enabled;
                    createDebug.humanize = __webpack_require__(/*! ms */ "./node_modules/debug/node_modules/ms/index.js");
                    Object.keys(env).forEach(function (key) {
                        createDebug[key] = env[key];
                    });
                    /**
                    * Active `debug` instances.
                    */

                    createDebug.instances = [];
                    /**
                    * The currently active debug mode names, and names to skip.
                    */

                    createDebug.names = [];
                    createDebug.skips = [];
                    /**
                    * Map of special "%n" handling functions, for the debug "format" argument.
                    *
                    * Valid key names are a single, lower or upper-case letter, i.e. "n" and "N".
                    */

                    createDebug.formatters = {};
                    /**
                    * Selects a color for a debug namespace
                    * @param {String} namespace The namespace string for the for the debug instance to be colored
                    * @return {Number|String} An ANSI color code for the given namespace
                    * @api private
                    */

                    function selectColor(namespace) {
                        var hash = 0;

                        for (var i = 0; i < namespace.length; i++) {
                            hash = (hash << 5) - hash + namespace.charCodeAt(i);
                            hash |= 0; // Convert to 32bit integer
                        }

                        return createDebug.colors[Math.abs(hash) % createDebug.colors.length];
                    }

                    createDebug.selectColor = selectColor;
                    /**
                    * Create a debugger with the given `namespace`.
                    *
                    * @param {String} namespace
                    * @return {Function}
                    * @api public
                    */

                    function createDebug(namespace) {
                        var prevTime;

                        function debug() {
                            for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
                                args[_key] = arguments[_key];
                            }

                            // Disabled?
                            if (!debug.enabled) {
                                return;
                            }

                            var self = debug; // Set `diff` timestamp

                            var curr = Number(new Date());
                            var ms = curr - (prevTime || curr);
                            self.diff = ms;
                            self.prev = prevTime;
                            self.curr = curr;
                            prevTime = curr;
                            args[0] = createDebug.coerce(args[0]);

                            if (typeof args[0] !== 'string') {
                                // Anything else let's inspect with %O
                                args.unshift('%O');
                            } // Apply any `formatters` transformations


                            var index = 0;
                            args[0] = args[0].replace(/%([a-zA-Z%])/g, function (match, format) {
                                // If we encounter an escaped % then don't increase the array index
                                if (match === '%%') {
                                    return match;
                                }

                                index++;
                                var formatter = createDebug.formatters[format];

                                if (typeof formatter === 'function') {
                                    var val = args[index];
                                    match = formatter.call(self, val); // Now we need to remove `args[index]` since it's inlined in the `format`

                                    args.splice(index, 1);
                                    index--;
                                }

                                return match;
                            }); // Apply env-specific formatting (colors, etc.)

                            createDebug.formatArgs.call(self, args);
                            var logFn = self.log || createDebug.log;
                            logFn.apply(self, args);
                        }

                        debug.namespace = namespace;
                        debug.enabled = createDebug.enabled(namespace);
                        debug.useColors = createDebug.useColors();
                        debug.color = selectColor(namespace);
                        debug.destroy = destroy;
                        debug.extend = extend; // Debug.formatArgs = formatArgs;
                        // debug.rawLog = rawLog;
                        // env-specific initialization logic for debug instances

                        if (typeof createDebug.init === 'function') {
                            createDebug.init(debug);
                        }

                        createDebug.instances.push(debug);
                        return debug;
                    }

                    function destroy() {
                        var index = createDebug.instances.indexOf(this);

                        if (index !== -1) {
                            createDebug.instances.splice(index, 1);
                            return true;
                        }

                        return false;
                    }

                    function extend(namespace, delimiter) {
                        var newDebug = createDebug(this.namespace + (typeof delimiter === 'undefined' ? ':' : delimiter) + namespace);
                        newDebug.log = this.log;
                        return newDebug;
                    }
                    /**
                    * Enables a debug mode by namespaces. This can include modes
                    * separated by a colon and wildcards.
                    *
                    * @param {String} namespaces
                    * @api public
                    */


                    function enable(namespaces) {
                        createDebug.save(namespaces);
                        createDebug.names = [];
                        createDebug.skips = [];
                        var i;
                        var split = (typeof namespaces === 'string' ? namespaces : '').split(/[\s,]+/);
                        var len = split.length;

                        for (i = 0; i < len; i++) {
                            if (!split[i]) {
                                // ignore empty strings
                                continue;
                            }

                            namespaces = split[i].replace(/\*/g, '.*?');

                            if (namespaces[0] === '-') {
                                createDebug.skips.push(new RegExp('^' + namespaces.substr(1) + '$'));
                            } else {
                                createDebug.names.push(new RegExp('^' + namespaces + '$'));
                            }
                        }

                        for (i = 0; i < createDebug.instances.length; i++) {
                            var instance = createDebug.instances[i];
                            instance.enabled = createDebug.enabled(instance.namespace);
                        }
                    }
                    /**
                    * Disable debug output.
                    *
                    * @return {String} namespaces
                    * @api public
                    */


                    function disable() {
                        var namespaces = [].concat(createDebug.names.map(toNamespace), createDebug.skips.map(toNamespace).map(function (namespace) {
                            return '-' + namespace;
                        })).join(',');
                        createDebug.enable('');
                        return namespaces;
                    }
                    /**
                    * Returns true if the given mode name is enabled, false otherwise.
                    *
                    * @param {String} name
                    * @return {Boolean}
                    * @api public
                    */


                    function enabled(name) {
                        if (name[name.length - 1] === '*') {
                            return true;
                        }

                        var i;
                        var len;

                        for (i = 0, len = createDebug.skips.length; i < len; i++) {
                            if (createDebug.skips[i].test(name)) {
                                return false;
                            }
                        }

                        for (i = 0, len = createDebug.names.length; i < len; i++) {
                            if (createDebug.names[i].test(name)) {
                                return true;
                            }
                        }

                        return false;
                    }
                    /**
                    * Convert regexp to namespace
                    *
                    * @param {RegExp} regxep
                    * @return {String} namespace
                    * @api private
                    */


                    function toNamespace(regexp) {
                        return regexp.toString().substring(2, regexp.toString().length - 2).replace(/\.\*\?$/, '*');
                    }
                    /**
                    * Coerce `val`.
                    *
                    * @param {Mixed} val
                    * @return {Mixed}
                    * @api private
                    */


                    function coerce(val) {
                        if (val instanceof Error) {
                            return val.stack || val.message;
                        }

                        return val;
                    }

                    createDebug.enable(createDebug.load());
                    return createDebug;
                }

                module.exports = setup;

                /***/
            }),

/***/ "./node_modules/process/browser.js":
/*!*****************************************!*\
  !*** ./node_modules/process/browser.js ***!
  \*****************************************/
/*! all exports used */
/***/ (function (module, exports) {

                // shim for using process in browser
                var process = module.exports = {};

                // cached from whatever global is present so that test runners that stub it
                // don't break things.  But we need to wrap it in a try catch in case it is
                // wrapped in strict mode code which doesn't define any globals.  It's inside a
                // function because try/catches deoptimize in certain engines.

                var cachedSetTimeout;
                var cachedClearTimeout;

                function defaultSetTimout() {
                    throw new Error('setTimeout has not been defined');
                }
                function defaultClearTimeout() {
                    throw new Error('clearTimeout has not been defined');
                }
                (function () {
                    try {
                        if (typeof setTimeout === 'function') {
                            cachedSetTimeout = setTimeout;
                        } else {
                            cachedSetTimeout = defaultSetTimout;
                        }
                    } catch (e) {
                        cachedSetTimeout = defaultSetTimout;
                    }
                    try {
                        if (typeof clearTimeout === 'function') {
                            cachedClearTimeout = clearTimeout;
                        } else {
                            cachedClearTimeout = defaultClearTimeout;
                        }
                    } catch (e) {
                        cachedClearTimeout = defaultClearTimeout;
                    }
                }())
                function runTimeout(fun) {
                    if (cachedSetTimeout === setTimeout) {
                        //normal enviroments in sane situations
                        return setTimeout(fun, 0);
                    }
                    // if setTimeout wasn't available but was latter defined
                    if ((cachedSetTimeout === defaultSetTimout || !cachedSetTimeout) && setTimeout) {
                        cachedSetTimeout = setTimeout;
                        return setTimeout(fun, 0);
                    }
                    try {
                        // when when somebody has screwed with setTimeout but no I.E. maddness
                        return cachedSetTimeout(fun, 0);
                    } catch (e) {
                        try {
                            // When we are in I.E. but the script has been evaled so I.E. doesn't trust the global object when called normally
                            return cachedSetTimeout.call(null, fun, 0);
                        } catch (e) {
                            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error
                            return cachedSetTimeout.call(this, fun, 0);
                        }
                    }


                }
                function runClearTimeout(marker) {
                    if (cachedClearTimeout === clearTimeout) {
                        //normal enviroments in sane situations
                        return clearTimeout(marker);
                    }
                    // if clearTimeout wasn't available but was latter defined
                    if ((cachedClearTimeout === defaultClearTimeout || !cachedClearTimeout) && clearTimeout) {
                        cachedClearTimeout = clearTimeout;
                        return clearTimeout(marker);
                    }
                    try {
                        // when when somebody has screwed with setTimeout but no I.E. maddness
                        return cachedClearTimeout(marker);
                    } catch (e) {
                        try {
                            // When we are in I.E. but the script has been evaled so I.E. doesn't  trust the global object when called normally
                            return cachedClearTimeout.call(null, marker);
                        } catch (e) {
                            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error.
                            // Some versions of I.E. have different rules for clearTimeout vs setTimeout
                            return cachedClearTimeout.call(this, marker);
                        }
                    }



                }
                var queue = [];
                var draining = false;
                var currentQueue;
                var queueIndex = -1;

                function cleanUpNextTick() {
                    if (!draining || !currentQueue) {
                        return;
                    }
                    draining = false;
                    if (currentQueue.length) {
                        queue = currentQueue.concat(queue);
                    } else {
                        queueIndex = -1;
                    }
                    if (queue.length) {
                        drainQueue();
                    }
                }

                function drainQueue() {
                    if (draining) {
                        return;
                    }
                    var timeout = runTimeout(cleanUpNextTick);
                    draining = true;

                    var len = queue.length;
                    while (len) {
                        currentQueue = queue;
                        queue = [];
                        while (++queueIndex < len) {
                            if (currentQueue) {
                                currentQueue[queueIndex].run();
                            }
                        }
                        queueIndex = -1;
                        len = queue.length;
                    }
                    currentQueue = null;
                    draining = false;
                    runClearTimeout(timeout);
                }

                process.nextTick = function (fun) {
                    var args = new Array(arguments.length - 1);
                    if (arguments.length > 1) {
                        for (var i = 1; i < arguments.length; i++) {
                            args[i - 1] = arguments[i];
                        }
                    }
                    queue.push(new Item(fun, args));
                    if (queue.length === 1 && !draining) {
                        runTimeout(drainQueue);
                    }
                };

                // v8 likes predictible objects
                function Item(fun, array) {
                    this.fun = fun;
                    this.array = array;
                }
                Item.prototype.run = function () {
                    this.fun.apply(null, this.array);
                };
                process.title = 'browser';
                process.browser = true;
                process.env = {};
                process.argv = [];
                process.version = ''; // empty string to avoid regexp issues
                process.versions = {};

                function noop() { }

                process.on = noop;
                process.addListener = noop;
                process.once = noop;
                process.off = noop;
                process.removeListener = noop;
                process.removeAllListeners = noop;
                process.emit = noop;
                process.prependListener = noop;
                process.prependOnceListener = noop;

                process.listeners = function (name) { return [] }

                process.binding = function (name) {
                    throw new Error('process.binding is not supported');
                };

                process.cwd = function () { return '/' };
                process.chdir = function (dir) {
                    throw new Error('process.chdir is not supported');
                };
                process.umask = function () { return 0; };


                /***/
            }),

/***/ "./node_modules/regenerator-runtime/runtime.js":
/*!*****************************************************!*\
  !*** ./node_modules/regenerator-runtime/runtime.js ***!
  \*****************************************************/
/*! all exports used */
/***/ (function (module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function (global) {/**
 * Copyright (c) 2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * https://raw.github.com/facebook/regenerator/master/LICENSE file. An
 * additional grant of patent rights can be found in the PATENTS file in
 * the same directory.
 */

                    !(function (global) {
                        "use strict";

                        var Op = Object.prototype;
                        var hasOwn = Op.hasOwnProperty;
                        var undefined; // More compressible than void 0.
                        var $Symbol = typeof Symbol === "function" ? Symbol : {};
                        var iteratorSymbol = $Symbol.iterator || "@@iterator";
                        var asyncIteratorSymbol = $Symbol.asyncIterator || "@@asyncIterator";
                        var toStringTagSymbol = $Symbol.toStringTag || "@@toStringTag";

                        var inModule = typeof module === "object";
                        var runtime = global.regeneratorRuntime;
                        if (runtime) {
                            if (inModule) {
                                // If regeneratorRuntime is defined globally and we're in a module,
                                // make the exports object identical to regeneratorRuntime.
                                module.exports = runtime;
                            }
                            // Don't bother evaluating the rest of this file if the runtime was
                            // already defined globally.
                            return;
                        }

                        // Define the runtime globally (as expected by generated code) as either
                        // module.exports (if we're in a module) or a new, empty object.
                        runtime = global.regeneratorRuntime = inModule ? module.exports : {};

                        function wrap(innerFn, outerFn, self, tryLocsList) {
                            // If outerFn provided and outerFn.prototype is a Generator, then outerFn.prototype instanceof Generator.
                            var protoGenerator = outerFn && outerFn.prototype instanceof Generator ? outerFn : Generator;
                            var generator = Object.create(protoGenerator.prototype);
                            var context = new Context(tryLocsList || []);

                            // The ._invoke method unifies the implementations of the .next,
                            // .throw, and .return methods.
                            generator._invoke = makeInvokeMethod(innerFn, self, context);

                            return generator;
                        }
                        runtime.wrap = wrap;

                        // Try/catch helper to minimize deoptimizations. Returns a completion
                        // record like context.tryEntries[i].completion. This interface could
                        // have been (and was previously) designed to take a closure to be
                        // invoked without arguments, but in all the cases we care about we
                        // already have an existing method we want to call, so there's no need
                        // to create a new function object. We can even get away with assuming
                        // the method takes exactly one argument, since that happens to be true
                        // in every case, so we don't have to touch the arguments object. The
                        // only additional allocation required is the completion record, which
                        // has a stable shape and so hopefully should be cheap to allocate.
                        function tryCatch(fn, obj, arg) {
                            try {
                                return { type: "normal", arg: fn.call(obj, arg) };
                            } catch (err) {
                                return { type: "throw", arg: err };
                            }
                        }

                        var GenStateSuspendedStart = "suspendedStart";
                        var GenStateSuspendedYield = "suspendedYield";
                        var GenStateExecuting = "executing";
                        var GenStateCompleted = "completed";

                        // Returning this object from the innerFn has the same effect as
                        // breaking out of the dispatch switch statement.
                        var ContinueSentinel = {};

                        // Dummy constructor functions that we use as the .constructor and
                        // .constructor.prototype properties for functions that return Generator
                        // objects. For full spec compliance, you may wish to configure your
                        // minifier not to mangle the names of these two functions.
                        function Generator() { }
                        function GeneratorFunction() { }
                        function GeneratorFunctionPrototype() { }

                        // This is a polyfill for %IteratorPrototype% for environments that
                        // don't natively support it.
                        var IteratorPrototype = {};
                        IteratorPrototype[iteratorSymbol] = function () {
                            return this;
                        };

                        var getProto = Object.getPrototypeOf;
                        var NativeIteratorPrototype = getProto && getProto(getProto(values([])));
                        if (NativeIteratorPrototype &&
                            NativeIteratorPrototype !== Op &&
                            hasOwn.call(NativeIteratorPrototype, iteratorSymbol)) {
                            // This environment has a native %IteratorPrototype%; use it instead
                            // of the polyfill.
                            IteratorPrototype = NativeIteratorPrototype;
                        }

                        var Gp = GeneratorFunctionPrototype.prototype =
                            Generator.prototype = Object.create(IteratorPrototype);
                        GeneratorFunction.prototype = Gp.constructor = GeneratorFunctionPrototype;
                        GeneratorFunctionPrototype.constructor = GeneratorFunction;
                        GeneratorFunctionPrototype[toStringTagSymbol] =
                            GeneratorFunction.displayName = "GeneratorFunction";

                        // Helper for defining the .next, .throw, and .return methods of the
                        // Iterator interface in terms of a single ._invoke method.
                        function defineIteratorMethods(prototype) {
                            ["next", "throw", "return"].forEach(function (method) {
                                prototype[method] = function (arg) {
                                    return this._invoke(method, arg);
                                };
                            });
                        }

                        runtime.isGeneratorFunction = function (genFun) {
                            var ctor = typeof genFun === "function" && genFun.constructor;
                            return ctor
                                ? ctor === GeneratorFunction ||
                                // For the native GeneratorFunction constructor, the best we can
                                // do is to check its .name property.
                                (ctor.displayName || ctor.name) === "GeneratorFunction"
                                : false;
                        };

                        runtime.mark = function (genFun) {
                            if (Object.setPrototypeOf) {
                                Object.setPrototypeOf(genFun, GeneratorFunctionPrototype);
                            } else {
                                genFun.__proto__ = GeneratorFunctionPrototype;
                                if (!(toStringTagSymbol in genFun)) {
                                    genFun[toStringTagSymbol] = "GeneratorFunction";
                                }
                            }
                            genFun.prototype = Object.create(Gp);
                            return genFun;
                        };

                        // Within the body of any async function, `await x` is transformed to
                        // `yield regeneratorRuntime.awrap(x)`, so that the runtime can test
                        // `hasOwn.call(value, "__await")` to determine if the yielded value is
                        // meant to be awaited.
                        runtime.awrap = function (arg) {
                            return { __await: arg };
                        };

                        function AsyncIterator(generator) {
                            function invoke(method, arg, resolve, reject) {
                                var record = tryCatch(generator[method], generator, arg);
                                if (record.type === "throw") {
                                    reject(record.arg);
                                } else {
                                    var result = record.arg;
                                    var value = result.value;
                                    if (value &&
                                        typeof value === "object" &&
                                        hasOwn.call(value, "__await")) {
                                        return Promise.resolve(value.__await).then(function (value) {
                                            invoke("next", value, resolve, reject);
                                        }, function (err) {
                                            invoke("throw", err, resolve, reject);
                                        });
                                    }

                                    return Promise.resolve(value).then(function (unwrapped) {
                                        // When a yielded Promise is resolved, its final value becomes
                                        // the .value of the Promise<{value,done}> result for the
                                        // current iteration. If the Promise is rejected, however, the
                                        // result for this iteration will be rejected with the same
                                        // reason. Note that rejections of yielded Promises are not
                                        // thrown back into the generator function, as is the case
                                        // when an awaited Promise is rejected. This difference in
                                        // behavior between yield and await is important, because it
                                        // allows the consumer to decide what to do with the yielded
                                        // rejection (swallow it and continue, manually .throw it back
                                        // into the generator, abandon iteration, whatever). With
                                        // await, by contrast, there is no opportunity to examine the
                                        // rejection reason outside the generator function, so the
                                        // only option is to throw it from the await expression, and
                                        // let the generator function handle the exception.
                                        result.value = unwrapped;
                                        resolve(result);
                                    }, reject);
                                }
                            }

                            if (typeof global.process === "object" && global.process.domain) {
                                invoke = global.process.domain.bind(invoke);
                            }

                            var previousPromise;

                            function enqueue(method, arg) {
                                function callInvokeWithMethodAndArg() {
                                    return new Promise(function (resolve, reject) {
                                        invoke(method, arg, resolve, reject);
                                    });
                                }

                                return previousPromise =
                                    // If enqueue has been called before, then we want to wait until
                                    // all previous Promises have been resolved before calling invoke,
                                    // so that results are always delivered in the correct order. If
                                    // enqueue has not been called before, then it is important to
                                    // call invoke immediately, without waiting on a callback to fire,
                                    // so that the async generator function has the opportunity to do
                                    // any necessary setup in a predictable way. This predictability
                                    // is why the Promise constructor synchronously invokes its
                                    // executor callback, and why async functions synchronously
                                    // execute code before the first await. Since we implement simple
                                    // async functions in terms of async generators, it is especially
                                    // important to get this right, even though it requires care.
                                    previousPromise ? previousPromise.then(
                                        callInvokeWithMethodAndArg,
                                        // Avoid propagating failures to Promises returned by later
                                        // invocations of the iterator.
                                        callInvokeWithMethodAndArg
                                    ) : callInvokeWithMethodAndArg();
                            }

                            // Define the unified helper method that is used to implement .next,
                            // .throw, and .return (see defineIteratorMethods).
                            this._invoke = enqueue;
                        }

                        defineIteratorMethods(AsyncIterator.prototype);
                        AsyncIterator.prototype[asyncIteratorSymbol] = function () {
                            return this;
                        };
                        runtime.AsyncIterator = AsyncIterator;

                        // Note that simple async functions are implemented on top of
                        // AsyncIterator objects; they just return a Promise for the value of
                        // the final result produced by the iterator.
                        runtime.async = function (innerFn, outerFn, self, tryLocsList) {
                            var iter = new AsyncIterator(
                                wrap(innerFn, outerFn, self, tryLocsList)
                            );

                            return runtime.isGeneratorFunction(outerFn)
                                ? iter // If outerFn is a generator, return the full iterator.
                                : iter.next().then(function (result) {
                                    return result.done ? result.value : iter.next();
                                });
                        };

                        function makeInvokeMethod(innerFn, self, context) {
                            var state = GenStateSuspendedStart;

                            return function invoke(method, arg) {
                                if (state === GenStateExecuting) {
                                    throw new Error("Generator is already running");
                                }

                                if (state === GenStateCompleted) {
                                    if (method === "throw") {
                                        throw arg;
                                    }

                                    // Be forgiving, per 25.3.3.3.3 of the spec:
                                    // https://people.mozilla.org/~jorendorff/es6-draft.html#sec-generatorresume
                                    return doneResult();
                                }

                                context.method = method;
                                context.arg = arg;

                                while (true) {
                                    var delegate = context.delegate;
                                    if (delegate) {
                                        var delegateResult = maybeInvokeDelegate(delegate, context);
                                        if (delegateResult) {
                                            if (delegateResult === ContinueSentinel) continue;
                                            return delegateResult;
                                        }
                                    }

                                    if (context.method === "next") {
                                        // Setting context._sent for legacy support of Babel's
                                        // function.sent implementation.
                                        context.sent = context._sent = context.arg;

                                    } else if (context.method === "throw") {
                                        if (state === GenStateSuspendedStart) {
                                            state = GenStateCompleted;
                                            throw context.arg;
                                        }

                                        context.dispatchException(context.arg);

                                    } else if (context.method === "return") {
                                        context.abrupt("return", context.arg);
                                    }

                                    state = GenStateExecuting;

                                    var record = tryCatch(innerFn, self, context);
                                    if (record.type === "normal") {
                                        // If an exception is thrown from innerFn, we leave state ===
                                        // GenStateExecuting and loop back for another invocation.
                                        state = context.done
                                            ? GenStateCompleted
                                            : GenStateSuspendedYield;

                                        if (record.arg === ContinueSentinel) {
                                            continue;
                                        }

                                        return {
                                            value: record.arg,
                                            done: context.done
                                        };

                                    } else if (record.type === "throw") {
                                        state = GenStateCompleted;
                                        // Dispatch the exception by looping back around to the
                                        // context.dispatchException(context.arg) call above.
                                        context.method = "throw";
                                        context.arg = record.arg;
                                    }
                                }
                            };
                        }

                        // Call delegate.iterator[context.method](context.arg) and handle the
                        // result, either by returning a { value, done } result from the
                        // delegate iterator, or by modifying context.method and context.arg,
                        // setting context.delegate to null, and returning the ContinueSentinel.
                        function maybeInvokeDelegate(delegate, context) {
                            var method = delegate.iterator[context.method];
                            if (method === undefined) {
                                // A .throw or .return when the delegate iterator has no .throw
                                // method always terminates the yield* loop.
                                context.delegate = null;

                                if (context.method === "throw") {
                                    if (delegate.iterator.return) {
                                        // If the delegate iterator has a return method, give it a
                                        // chance to clean up.
                                        context.method = "return";
                                        context.arg = undefined;
                                        maybeInvokeDelegate(delegate, context);

                                        if (context.method === "throw") {
                                            // If maybeInvokeDelegate(context) changed context.method from
                                            // "return" to "throw", let that override the TypeError below.
                                            return ContinueSentinel;
                                        }
                                    }

                                    context.method = "throw";
                                    context.arg = new TypeError(
                                        "The iterator does not provide a 'throw' method");
                                }

                                return ContinueSentinel;
                            }

                            var record = tryCatch(method, delegate.iterator, context.arg);

                            if (record.type === "throw") {
                                context.method = "throw";
                                context.arg = record.arg;
                                context.delegate = null;
                                return ContinueSentinel;
                            }

                            var info = record.arg;

                            if (!info) {
                                context.method = "throw";
                                context.arg = new TypeError("iterator result is not an object");
                                context.delegate = null;
                                return ContinueSentinel;
                            }

                            if (info.done) {
                                // Assign the result of the finished delegate to the temporary
                                // variable specified by delegate.resultName (see delegateYield).
                                context[delegate.resultName] = info.value;

                                // Resume execution at the desired location (see delegateYield).
                                context.next = delegate.nextLoc;

                                // If context.method was "throw" but the delegate handled the
                                // exception, let the outer generator proceed normally. If
                                // context.method was "next", forget context.arg since it has been
                                // "consumed" by the delegate iterator. If context.method was
                                // "return", allow the original .return call to continue in the
                                // outer generator.
                                if (context.method !== "return") {
                                    context.method = "next";
                                    context.arg = undefined;
                                }

                            } else {
                                // Re-yield the result returned by the delegate method.
                                return info;
                            }

                            // The delegate iterator is finished, so forget it and continue with
                            // the outer generator.
                            context.delegate = null;
                            return ContinueSentinel;
                        }

                        // Define Generator.prototype.{next,throw,return} in terms of the
                        // unified ._invoke helper method.
                        defineIteratorMethods(Gp);

                        Gp[toStringTagSymbol] = "Generator";

                        // A Generator should always return itself as the iterator object when the
                        // @@iterator function is called on it. Some browsers' implementations of the
                        // iterator prototype chain incorrectly implement this, causing the Generator
                        // object to not be returned from this call. This ensures that doesn't happen.
                        // See https://github.com/facebook/regenerator/issues/274 for more details.
                        Gp[iteratorSymbol] = function () {
                            return this;
                        };

                        Gp.toString = function () {
                            return "[object Generator]";
                        };

                        function pushTryEntry(locs) {
                            var entry = { tryLoc: locs[0] };

                            if (1 in locs) {
                                entry.catchLoc = locs[1];
                            }

                            if (2 in locs) {
                                entry.finallyLoc = locs[2];
                                entry.afterLoc = locs[3];
                            }

                            this.tryEntries.push(entry);
                        }

                        function resetTryEntry(entry) {
                            var record = entry.completion || {};
                            record.type = "normal";
                            delete record.arg;
                            entry.completion = record;
                        }

                        function Context(tryLocsList) {
                            // The root entry object (effectively a try statement without a catch
                            // or a finally block) gives us a place to store values thrown from
                            // locations where there is no enclosing try statement.
                            this.tryEntries = [{ tryLoc: "root" }];
                            tryLocsList.forEach(pushTryEntry, this);
                            this.reset(true);
                        }

                        runtime.keys = function (object) {
                            var keys = [];
                            for (var key in object) {
                                keys.push(key);
                            }
                            keys.reverse();

                            // Rather than returning an object with a next method, we keep
                            // things simple and return the next function itself.
                            return function next() {
                                while (keys.length) {
                                    var key = keys.pop();
                                    if (key in object) {
                                        next.value = key;
                                        next.done = false;
                                        return next;
                                    }
                                }

                                // To avoid creating an additional object, we just hang the .value
                                // and .done properties off the next function object itself. This
                                // also ensures that the minifier will not anonymize the function.
                                next.done = true;
                                return next;
                            };
                        };

                        function values(iterable) {
                            if (iterable) {
                                var iteratorMethod = iterable[iteratorSymbol];
                                if (iteratorMethod) {
                                    return iteratorMethod.call(iterable);
                                }

                                if (typeof iterable.next === "function") {
                                    return iterable;
                                }

                                if (!isNaN(iterable.length)) {
                                    var i = -1, next = function next() {
                                        while (++i < iterable.length) {
                                            if (hasOwn.call(iterable, i)) {
                                                next.value = iterable[i];
                                                next.done = false;
                                                return next;
                                            }
                                        }

                                        next.value = undefined;
                                        next.done = true;

                                        return next;
                                    };

                                    return next.next = next;
                                }
                            }

                            // Return an iterator with no values.
                            return { next: doneResult };
                        }
                        runtime.values = values;

                        function doneResult() {
                            return { value: undefined, done: true };
                        }

                        Context.prototype = {
                            constructor: Context,

                            reset: function (skipTempReset) {
                                this.prev = 0;
                                this.next = 0;
                                // Resetting context._sent for legacy support of Babel's
                                // function.sent implementation.
                                this.sent = this._sent = undefined;
                                this.done = false;
                                this.delegate = null;

                                this.method = "next";
                                this.arg = undefined;

                                this.tryEntries.forEach(resetTryEntry);

                                if (!skipTempReset) {
                                    for (var name in this) {
                                        // Not sure about the optimal order of these conditions:
                                        if (name.charAt(0) === "t" &&
                                            hasOwn.call(this, name) &&
                                            !isNaN(+name.slice(1))) {
                                            this[name] = undefined;
                                        }
                                    }
                                }
                            },

                            stop: function () {
                                this.done = true;

                                var rootEntry = this.tryEntries[0];
                                var rootRecord = rootEntry.completion;
                                if (rootRecord.type === "throw") {
                                    throw rootRecord.arg;
                                }

                                return this.rval;
                            },

                            dispatchException: function (exception) {
                                if (this.done) {
                                    throw exception;
                                }

                                var context = this;
                                function handle(loc, caught) {
                                    record.type = "throw";
                                    record.arg = exception;
                                    context.next = loc;

                                    if (caught) {
                                        // If the dispatched exception was caught by a catch block,
                                        // then let that catch block handle the exception normally.
                                        context.method = "next";
                                        context.arg = undefined;
                                    }

                                    return !!caught;
                                }

                                for (var i = this.tryEntries.length - 1; i >= 0; --i) {
                                    var entry = this.tryEntries[i];
                                    var record = entry.completion;

                                    if (entry.tryLoc === "root") {
                                        // Exception thrown outside of any try block that could handle
                                        // it, so set the completion value of the entire function to
                                        // throw the exception.
                                        return handle("end");
                                    }

                                    if (entry.tryLoc <= this.prev) {
                                        var hasCatch = hasOwn.call(entry, "catchLoc");
                                        var hasFinally = hasOwn.call(entry, "finallyLoc");

                                        if (hasCatch && hasFinally) {
                                            if (this.prev < entry.catchLoc) {
                                                return handle(entry.catchLoc, true);
                                            } else if (this.prev < entry.finallyLoc) {
                                                return handle(entry.finallyLoc);
                                            }

                                        } else if (hasCatch) {
                                            if (this.prev < entry.catchLoc) {
                                                return handle(entry.catchLoc, true);
                                            }

                                        } else if (hasFinally) {
                                            if (this.prev < entry.finallyLoc) {
                                                return handle(entry.finallyLoc);
                                            }

                                        } else {
                                            throw new Error("try statement without catch or finally");
                                        }
                                    }
                                }
                            },

                            abrupt: function (type, arg) {
                                for (var i = this.tryEntries.length - 1; i >= 0; --i) {
                                    var entry = this.tryEntries[i];
                                    if (entry.tryLoc <= this.prev &&
                                        hasOwn.call(entry, "finallyLoc") &&
                                        this.prev < entry.finallyLoc) {
                                        var finallyEntry = entry;
                                        break;
                                    }
                                }

                                if (finallyEntry &&
                                    (type === "break" ||
                                        type === "continue") &&
                                    finallyEntry.tryLoc <= arg &&
                                    arg <= finallyEntry.finallyLoc) {
                                    // Ignore the finally entry if control is not jumping to a
                                    // location outside the try/catch block.
                                    finallyEntry = null;
                                }

                                var record = finallyEntry ? finallyEntry.completion : {};
                                record.type = type;
                                record.arg = arg;

                                if (finallyEntry) {
                                    this.method = "next";
                                    this.next = finallyEntry.finallyLoc;
                                    return ContinueSentinel;
                                }

                                return this.complete(record);
                            },

                            complete: function (record, afterLoc) {
                                if (record.type === "throw") {
                                    throw record.arg;
                                }

                                if (record.type === "break" ||
                                    record.type === "continue") {
                                    this.next = record.arg;
                                } else if (record.type === "return") {
                                    this.rval = this.arg = record.arg;
                                    this.method = "return";
                                    this.next = "end";
                                } else if (record.type === "normal" && afterLoc) {
                                    this.next = afterLoc;
                                }

                                return ContinueSentinel;
                            },

                            finish: function (finallyLoc) {
                                for (var i = this.tryEntries.length - 1; i >= 0; --i) {
                                    var entry = this.tryEntries[i];
                                    if (entry.finallyLoc === finallyLoc) {
                                        this.complete(entry.completion, entry.afterLoc);
                                        resetTryEntry(entry);
                                        return ContinueSentinel;
                                    }
                                }
                            },

                            "catch": function (tryLoc) {
                                for (var i = this.tryEntries.length - 1; i >= 0; --i) {
                                    var entry = this.tryEntries[i];
                                    if (entry.tryLoc === tryLoc) {
                                        var record = entry.completion;
                                        if (record.type === "throw") {
                                            var thrown = record.arg;
                                            resetTryEntry(entry);
                                        }
                                        return thrown;
                                    }
                                }

                                // The context.catch method must only be called with a location
                                // argument that corresponds to a known catch block.
                                throw new Error("illegal catch attempt");
                            },

                            delegateYield: function (iterable, resultName, nextLoc) {
                                this.delegate = {
                                    iterator: values(iterable),
                                    resultName: resultName,
                                    nextLoc: nextLoc
                                };

                                if (this.method === "next") {
                                    // Deliberately forget the last sent value so that we don't
                                    // accidentally pass it on to the delegate.
                                    this.arg = undefined;
                                }

                                return ContinueSentinel;
                            }
                        };
                    })(
                        // Among the various tricks for obtaining a reference to the global
                        // object, this seems to be the most reliable technique that does not
                        // use indirect eval (which violates Content Security Policy).
                        typeof global === "object" ? global :
                            typeof window === "object" ? window :
                                typeof self === "object" ? self : this
                    );

                    /* WEBPACK VAR INJECTION */
                }.call(this, __webpack_require__(/*! ./../webpack/buildin/global.js */ "./node_modules/webpack/buildin/global.js")))

                /***/
            }),

/***/ "./node_modules/webpack/buildin/global.js":
/*!***********************************!*\
  !*** (webpack)/buildin/global.js ***!
  \***********************************/
/*! all exports used */
/***/ (function (module, exports) {

                var g;

                // This works in non-strict mode
                g = (function () {
                    return this;
                })();

                try {
                    // This works if eval is allowed (see CSP)
                    g = g || new Function("return this")();
                } catch (e) {
                    // This works if the window reference is available
                    if (typeof window === "object") g = window;
                }

                // g can still be undefined, but nothing to do about it...
                // We return undefined, instead of nothing here, so it's
                // easier to handle this case. if(!global) { ...}

                module.exports = g;


                /***/
            }),

/***/ "./src/Client.ts":
/*!***********************!*\
  !*** ./src/Client.ts ***!
  \***********************/
/*! all exports used */
/***/ (function (module, exports, __webpack_require__) {

                "use strict";


                var _interopRequireDefault = __webpack_require__(/*! @babel/runtime/helpers/interopRequireDefault */ "./node_modules/@babel/runtime/helpers/interopRequireDefault.js");

                __webpack_require__(/*! core-js/modules/es.array.concat */ "./node_modules/core-js/modules/es.array.concat.js");

                __webpack_require__(/*! core-js/modules/es.array.filter */ "./node_modules/core-js/modules/es.array.filter.js");

                __webpack_require__(/*! core-js/modules/es.array.find */ "./node_modules/core-js/modules/es.array.find.js");

                __webpack_require__(/*! core-js/modules/es.array.flat */ "./node_modules/core-js/modules/es.array.flat.js");

                __webpack_require__(/*! core-js/modules/es.array.for-each */ "./node_modules/core-js/modules/es.array.for-each.js");

                __webpack_require__(/*! core-js/modules/es.array.index-of */ "./node_modules/core-js/modules/es.array.index-of.js");

                __webpack_require__(/*! core-js/modules/es.array.iterator */ "./node_modules/core-js/modules/es.array.iterator.js");

                __webpack_require__(/*! core-js/modules/es.array.map */ "./node_modules/core-js/modules/es.array.map.js");

                __webpack_require__(/*! core-js/modules/es.array.unscopables.flat */ "./node_modules/core-js/modules/es.array.unscopables.flat.js");

                __webpack_require__(/*! core-js/modules/es.object.assign */ "./node_modules/core-js/modules/es.object.assign.js");

                __webpack_require__(/*! core-js/modules/es.object.keys */ "./node_modules/core-js/modules/es.object.keys.js");

                __webpack_require__(/*! core-js/modules/es.object.to-string */ "./node_modules/core-js/modules/es.object.to-string.js");

                __webpack_require__(/*! core-js/modules/es.promise */ "./node_modules/core-js/modules/es.promise.js");

                __webpack_require__(/*! core-js/modules/es.promise.finally */ "./node_modules/core-js/modules/es.promise.finally.js");

                __webpack_require__(/*! core-js/modules/es.regexp.exec */ "./node_modules/core-js/modules/es.regexp.exec.js");

                __webpack_require__(/*! core-js/modules/es.string.iterator */ "./node_modules/core-js/modules/es.string.iterator.js");

                __webpack_require__(/*! core-js/modules/es.string.match */ "./node_modules/core-js/modules/es.string.match.js");

                __webpack_require__(/*! core-js/modules/es.string.replace */ "./node_modules/core-js/modules/es.string.replace.js");

                __webpack_require__(/*! core-js/modules/es.string.search */ "./node_modules/core-js/modules/es.string.search.js");

                __webpack_require__(/*! core-js/modules/es.string.split */ "./node_modules/core-js/modules/es.string.split.js");

                __webpack_require__(/*! core-js/modules/es.string.trim */ "./node_modules/core-js/modules/es.string.trim.js");

                __webpack_require__(/*! core-js/modules/es.string.link */ "./node_modules/core-js/modules/es.string.link.js");

                __webpack_require__(/*! core-js/modules/web.dom-collections.for-each */ "./node_modules/core-js/modules/web.dom-collections.for-each.js");

                __webpack_require__(/*! core-js/modules/web.dom-collections.iterator */ "./node_modules/core-js/modules/web.dom-collections.iterator.js");

                __webpack_require__(/*! core-js/modules/web.url */ "./node_modules/core-js/modules/web.url.js");

                var _regenerator = _interopRequireDefault(__webpack_require__(/*! @babel/runtime/regenerator */ "./node_modules/@babel/runtime/regenerator/index.js"));

                __webpack_require__(/*! regenerator-runtime/runtime */ "./node_modules/regenerator-runtime/runtime.js");

                var _asyncToGenerator2 = _interopRequireDefault(__webpack_require__(/*! @babel/runtime/helpers/asyncToGenerator */ "./node_modules/@babel/runtime/helpers/asyncToGenerator.js"));

                Object.defineProperty(exports, "__esModule", {
                    value: true
                });

                var lib_1 = __webpack_require__(/*! ./lib */ "./src/lib.ts");

                var strings_1 = __webpack_require__(/*! ./strings */ "./src/strings.ts");

                var settings_1 = __webpack_require__(/*! ./settings */ "./src/settings.ts"); // $lab:coverage:off$
                // @ts-ignore


                var _ref = typeof FHIRCLIENT_PURE !== "undefined" ? window : __webpack_require__(/*! cross-fetch */ "./node_modules/cross-fetch/dist/browser-ponyfill.js"),
                    Response = _ref.Response; // $lab:coverage:on$


                var debug = lib_1.debug.extend("client");
                /**
                 * Adds patient context to requestOptions object to be used with [[Client.request]]
                 * @param requestOptions Can be a string URL (relative to the serviceUrl), or an
                 * object which will be passed to fetch()
                 * @param client Current FHIR client object containing patient context
                 * @return requestOptions object contextualized to current patient
                 */

                function contextualize(_x, _x2) {
                    return _contextualize.apply(this, arguments);
                }
                /**
                 * Gets single reference by id. Caches the result.
                 * @param refId
                 * @param cache A map to store the resolved refs
                 * @param client The client instance
                 * @param [signal] The `AbortSignal` if any
                 * @returns The resolved reference
                 * @private
                 */


                function _contextualize() {
                    _contextualize = (0, _asyncToGenerator2.default)( /*#__PURE__*/_regenerator.default.mark(function _callee8(requestOptions, client) {
                        var base, contextualURL, _contextualURL;

                        return _regenerator.default.wrap(function _callee8$(_context8) {
                            while (1) {
                                switch (_context8.prev = _context8.next) {
                                    case 0:
                                        _contextualURL = function _contextualURL3() {
                                            _contextualURL = (0, _asyncToGenerator2.default)( /*#__PURE__*/_regenerator.default.mark(function _callee7(_url) {
                                                var resourceType, conformance, searchParam;
                                                return _regenerator.default.wrap(function _callee7$(_context7) {
                                                    while (1) {
                                                        switch (_context7.prev = _context7.next) {
                                                            case 0:
                                                                resourceType = _url.pathname.split("/").pop();

                                                                if (resourceType) {
                                                                    _context7.next = 3;
                                                                    break;
                                                                }

                                                                throw new Error("Invalid url \"" + _url + "\"");

                                                            case 3:
                                                                if (!(settings_1.patientCompartment.indexOf(resourceType) == -1)) {
                                                                    _context7.next = 5;
                                                                    break;
                                                                }

                                                                throw new Error("Cannot filter \"" + resourceType + "\" resources by patient");

                                                            case 5:
                                                                _context7.next = 7;
                                                                return lib_1.fetchConformanceStatement(client.state.serverUrl);

                                                            case 7:
                                                                conformance = _context7.sent;
                                                                searchParam = lib_1.getPatientParam(conformance, resourceType);

                                                                _url.searchParams.set(searchParam, client.patient.id);

                                                                return _context7.abrupt("return", _url.href);

                                                            case 11:
                                                            case "end":
                                                                return _context7.stop();
                                                        }
                                                    }
                                                }, _callee7);
                                            }));
                                            return _contextualURL.apply(this, arguments);
                                        };

                                        contextualURL = function _contextualURL2(_x9) {
                                            return _contextualURL.apply(this, arguments);
                                        };

                                        base = lib_1.absolute("/", client.state.serverUrl);

                                        if (!(typeof requestOptions == "string" || requestOptions instanceof URL)) {
                                            _context8.next = 8;
                                            break;
                                        }

                                        _context8.next = 6;
                                        return contextualURL(new URL(requestOptions + "", base));

                                    case 6:
                                        _context8.t0 = _context8.sent;
                                        return _context8.abrupt("return", {
                                            url: _context8.t0
                                        });

                                    case 8:
                                        _context8.next = 10;
                                        return contextualURL(new URL(requestOptions.url + "", base));

                                    case 10:
                                        requestOptions.url = _context8.sent;
                                        return _context8.abrupt("return", requestOptions);

                                    case 12:
                                    case "end":
                                        return _context8.stop();
                                }
                            }
                        }, _callee8);
                    }));
                    return _contextualize.apply(this, arguments);
                }

                function getRef(refId, cache, client, signal) {
                    if (!cache[refId]) {
                        // Note that we set cache[refId] immediately! When the promise is
                        // settled it will be updated. This is to avoid a ref being fetched
                        // twice because some of these requests are executed in parallel.
                        cache[refId] = client.request({
                            url: refId,
                            signal: signal
                        }).then(function (res) {
                            cache[refId] = res;
                            return res;
                        }, function (error) {
                            delete cache[refId];
                            throw error;
                        });
                    }

                    return Promise.resolve(cache[refId]);
                }
                /**
                 * Resolves a reference in the given resource.
                 * @param obj FHIR Resource
                 */


                function resolveRef(obj, path, graph, cache, client, signal) {
                    var node = lib_1.getPath(obj, path);

                    if (node) {
                        var isArray = Array.isArray(node);
                        return Promise.all(lib_1.makeArray(node).filter(Boolean).map(function (item, i) {
                            var ref = item.reference;

                            if (ref) {
                                return getRef(ref, cache, client, signal).then(function (sub) {
                                    if (graph) {
                                        if (isArray) {
                                            if (path.indexOf("..") > -1) {
                                                lib_1.setPath(obj, "" + path.replace("..", "." + i + "."), sub);
                                            } else {
                                                lib_1.setPath(obj, path + "." + i, sub);
                                            }
                                        } else {
                                            lib_1.setPath(obj, path, sub);
                                        }
                                    }
                                }).catch(function (ex) {
                                    /* ignore missing references */
                                    if (ex.status !== 404) {
                                        throw ex;
                                    }
                                });
                            }
                        }));
                    }
                }
                /**
                 * Given a resource and a list of ref paths - resolves them all
                 * @param obj FHIR Resource
                 * @param fhirOptions The fhir options of the initiating request call
                 * @param cache A map to store fetched refs
                 * @param client The client instance
                 * @private
                 */


                function resolveRefs(obj, fhirOptions, cache, client, signal) {
                    // 1. Sanitize paths, remove any invalid ones
                    var paths = lib_1.makeArray(fhirOptions.resolveReferences).filter(Boolean) // No false, 0, null, undefined or ""
                        .map(function (path) {
                            return String(path).trim();
                        }).filter(Boolean); // No space-only strings
                    // 2. Remove duplicates

                    paths = paths.filter(function (p, i) {
                        var index = paths.indexOf(p, i + 1);

                        if (index > -1) {
                            debug("Duplicated reference path \"%s\"", p);
                            return false;
                        }

                        return true;
                    }); // 3. Early exit if no valid paths are found

                    if (!paths.length) {
                        return Promise.resolve();
                    } // 4. Group the paths by depth so that child refs are looked up
                    // after their parents!


                    var groups = {};
                    paths.forEach(function (path) {
                        var len = path.split(".").length;

                        if (!groups[len]) {
                            groups[len] = [];
                        }

                        groups[len].push(path);
                    }); // 5. Execute groups sequentially! Paths within same group are
                    // fetched in parallel!

                    var task = Promise.resolve();
                    Object.keys(groups).sort().forEach(function (len) {
                        var group = groups[len];
                        task = task.then(function () {
                            return Promise.all(group.map(function (path) {
                                return resolveRef(obj, path, !!fhirOptions.graph, cache, client, signal);
                            }));
                        });
                    });
                    return task;
                }
                /**
                 * This is a FHIR client that is returned to you from the `ready()` call of the
                 * **SMART API**. You can also create it yourself if needed:
                 *
                 * ```js
                 * // BROWSER
                 * const client = FHIR.client("https://r4.smarthealthit.org");
                 *
                 * // SERVER
                 * const client = smart(req, res).client("https://r4.smarthealthit.org");
                 * ```
                 */


                var Client = /*#__PURE__*/function () {
                    /**
                     * Validates the parameters, creates an instance and tries to connect it to
                     * FhirJS, if one is available globally.
                     */
                    function Client(environment, state) {
                        var _this = this;

                        /**
                         * @category Utility
                         */
                        this.units = lib_1.units;

                        var _state = typeof state == "string" ? {
                            serverUrl: state
                        } : state; // Valid serverUrl is required!


                        if (!_state.serverUrl || !_state.serverUrl.match(/https?:\/\/.+/)) {
                            throw new Error("A \"serverUrl\" option is required and must begin with \"http(s)\"");
                        }

                        this.state = _state;
                        this.environment = environment;
                        this._refreshTask = null;
                        var client = this; // patient api ---------------------------------------------------------

                        this.patient = {
                            get id() {
                                return client.getPatientId();
                            },

                            read: function read(requestOptions) {
                                if (requestOptions === void 0) {
                                    requestOptions = {};
                                }

                                var id = _this.patient.id;
                                return id ? _this.request(Object.assign({}, requestOptions, {
                                    url: "Patient/" + id
                                })) : Promise.reject(new Error("Patient is not available"));
                            },
                            request: function request(requestOptions, fhirOptions) {
                                if (fhirOptions === void 0) {
                                    fhirOptions = {};
                                }

                                if (_this.patient.id) {
                                    return (0, _asyncToGenerator2.default)( /*#__PURE__*/_regenerator.default.mark(function _callee() {
                                        var options;
                                        return _regenerator.default.wrap(function _callee$(_context) {
                                            while (1) {
                                                switch (_context.prev = _context.next) {
                                                    case 0:
                                                        _context.next = 2;
                                                        return contextualize(requestOptions, _this);

                                                    case 2:
                                                        options = _context.sent;
                                                        return _context.abrupt("return", _this.request(options, fhirOptions));

                                                    case 4:
                                                    case "end":
                                                        return _context.stop();
                                                }
                                            }
                                        }, _callee);
                                    }))();
                                } else {
                                    return Promise.reject(new Error("Patient is not available"));
                                }
                            }
                        }; // encounter api -------------------------------------------------------

                        this.encounter = {
                            get id() {
                                return client.getEncounterId();
                            },

                            read: function read(requestOptions) {
                                if (requestOptions === void 0) {
                                    requestOptions = {};
                                }

                                var id = _this.encounter.id;
                                return id ? _this.request(Object.assign({}, requestOptions, {
                                    url: "Encounter/" + id
                                })) : Promise.reject(new Error("Encounter is not available"));
                            }
                        }; // user api ------------------------------------------------------------

                        this.user = {
                            get fhirUser() {
                                return client.getFhirUser();
                            },

                            get id() {
                                return client.getUserId();
                            },

                            get resourceType() {
                                return client.getUserType();
                            },

                            read: function read(requestOptions) {
                                if (requestOptions === void 0) {
                                    requestOptions = {};
                                }

                                var fhirUser = _this.user.fhirUser;
                                return fhirUser ? _this.request(Object.assign({}, requestOptions, {
                                    url: fhirUser
                                })) : Promise.reject(new Error("User is not available"));
                            }
                        }; // fhir.js api (attached automatically in browser)
                        // ---------------------------------------------------------------------

                        this.connect(environment.fhir);
                    }
                    /**
                     * This method is used to make the "link" between the `fhirclient` and the
                     * `fhir.js`, if one is available.
                     * **Note:** This is called by the constructor. If fhir.js is available in
                     * the global scope as `fhir`, it will automatically be linked to any [[Client]]
                     * instance. You should only use this method to connect to `fhir.js` which
                     * is not global.
                     */


                    var _proto = Client.prototype;

                    _proto.connect = function connect(fhirJs) {
                        if (typeof fhirJs == "function") {
                            var options = {
                                baseUrl: this.state.serverUrl.replace(/\/$/, "")
                            };
                            var accessToken = this.getState("tokenResponse.access_token");

                            if (accessToken) {
                                options.auth = {
                                    token: accessToken
                                };
                            } else {
                                var _this$state = this.state,
                                    username = _this$state.username,
                                    password = _this$state.password;

                                if (username && password) {
                                    options.auth = {
                                        user: username,
                                        pass: password
                                    };
                                }
                            }

                            this.api = fhirJs(options);
                            var patientId = this.getState("tokenResponse.patient");

                            if (patientId) {
                                this.patient.api = fhirJs(Object.assign({}, options, {
                                    patient: patientId
                                }));
                            }
                        }

                        return this;
                    }
                        /**
                         * Returns the ID of the selected patient or null. You should have requested
                         * "launch/patient" scope. Otherwise this will return null.
                         */
                        ;

                    _proto.getPatientId = function getPatientId() {
                        var tokenResponse = this.state.tokenResponse;

                        if (tokenResponse) {
                            // We have been authorized against this server but we don't know
                            // the patient. This should be a scope issue.
                            if (!tokenResponse.patient) {
                                if (!(this.state.scope || "").match(/\blaunch(\/patient)?\b/)) {
                                    debug(strings_1.default.noScopeForId, "patient", "patient");
                                } else {
                                    // The server should have returned the patient!
                                    debug("The ID of the selected patient is not available. Please check if your server supports that.");
                                }

                                return null;
                            }

                            return tokenResponse.patient;
                        }

                        if (this.state.authorizeUri) {
                            debug(strings_1.default.noIfNoAuth, "the ID of the selected patient");
                        } else {
                            debug(strings_1.default.noFreeContext, "selected patient");
                        }

                        return null;
                    }
                        /**
                         * Returns the ID of the selected encounter or null. You should have
                         * requested "launch/encounter" scope. Otherwise this will return null.
                         * Note that not all servers support the "launch/encounter" scope so this
                         * will be null if they don't.
                         */
                        ;

                    _proto.getEncounterId = function getEncounterId() {
                        var tokenResponse = this.state.tokenResponse;

                        if (tokenResponse) {
                            // We have been authorized against this server but we don't know
                            // the encounter. This should be a scope issue.
                            if (!tokenResponse.encounter) {
                                if (!(this.state.scope || "").match(/\blaunch(\/encounter)?\b/)) {
                                    debug(strings_1.default.noScopeForId, "encounter", "encounter");
                                } else {
                                    // The server should have returned the encounter!
                                    debug("The ID of the selected encounter is not available. Please check if your server supports that, and that the selected patient has any recorded encounters.");
                                }

                                return null;
                            }

                            return tokenResponse.encounter;
                        }

                        if (this.state.authorizeUri) {
                            debug(strings_1.default.noIfNoAuth, "the ID of the selected encounter");
                        } else {
                            debug(strings_1.default.noFreeContext, "selected encounter");
                        }

                        return null;
                    }
                        /**
                         * Returns the (decoded) id_token if any. You need to request "openid" and
                         * "profile" scopes if you need to receive an id_token (if you need to know
                         * who the logged-in user is).
                         */
                        ;

                    _proto.getIdToken = function getIdToken() {
                        var tokenResponse = this.state.tokenResponse;

                        if (tokenResponse) {
                            var idToken = tokenResponse.id_token;
                            var scope = this.state.scope || ""; // We have been authorized against this server but we don't have
                            // the id_token. This should be a scope issue.

                            if (!idToken) {
                                var hasOpenid = scope.match(/\bopenid\b/);
                                var hasProfile = scope.match(/\bprofile\b/);
                                var hasFhirUser = scope.match(/\bfhirUser\b/);

                                if (!hasOpenid || !(hasFhirUser || hasProfile)) {
                                    debug("You are trying to get the id_token but you are not " + "using the right scopes. Please add 'openid' and " + "'fhirUser' or 'profile' to the scopes you are " + "requesting.");
                                } else {
                                    // The server should have returned the id_token!
                                    debug("The id_token is not available. Please check if your server supports that.");
                                }

                                return null;
                            }

                            return lib_1.jwtDecode(idToken, this.environment);
                        }

                        if (this.state.authorizeUri) {
                            debug(strings_1.default.noIfNoAuth, "the id_token");
                        } else {
                            debug(strings_1.default.noFreeContext, "id_token");
                        }

                        return null;
                    }
                        /**
                         * Returns the profile of the logged_in user (if any). This is a string
                         * having the following shape `"{user type}/{user id}"`. For example:
                         * `"Practitioner/abc"` or `"Patient/xyz"`.
                         */
                        ;

                    _proto.getFhirUser = function getFhirUser() {
                        var idToken = this.getIdToken();

                        if (idToken) {
                            return idToken.profile;
                        }

                        return null;
                    }
                        /**
                         * Returns the user ID or null.
                         */
                        ;

                    _proto.getUserId = function getUserId() {
                        var profile = this.getFhirUser();

                        if (profile) {
                            return profile.split("/")[1];
                        }

                        return null;
                    }
                        /**
                         * Returns the type of the logged-in user or null. The result can be
                         * "Practitioner", "Patient" or "RelatedPerson".
                         */
                        ;

                    _proto.getUserType = function getUserType() {
                        var profile = this.getFhirUser();

                        if (profile) {
                            return profile.split("/")[0];
                        }

                        return null;
                    }
                        /**
                         * Builds and returns the value of the `Authorization` header that can be
                         * sent to the FHIR server
                         */
                        ;

                    _proto.getAuthorizationHeader = function getAuthorizationHeader() {
                        var accessToken = this.getState("tokenResponse.access_token");

                        if (accessToken) {
                            return "Bearer " + accessToken;
                        }

                        var _this$state2 = this.state,
                            username = _this$state2.username,
                            password = _this$state2.password;

                        if (username && password) {
                            return "Basic " + this.environment.btoa(username + ":" + password);
                        }

                        return null;
                    }
                        /**
                         * Used internally to clear the state of the instance and the state in the
                         * associated storage.
                         */
                        ;

                    _proto._clearState =
                        /*#__PURE__*/
                        function () {
                            var _clearState2 = (0, _asyncToGenerator2.default)( /*#__PURE__*/_regenerator.default.mark(function _callee2() {
                                var storage, key;
                                return _regenerator.default.wrap(function _callee2$(_context2) {
                                    while (1) {
                                        switch (_context2.prev = _context2.next) {
                                            case 0:
                                                storage = this.environment.getStorage();
                                                _context2.next = 3;
                                                return storage.get(settings_1.SMART_KEY);

                                            case 3:
                                                key = _context2.sent;

                                                if (!key) {
                                                    _context2.next = 7;
                                                    break;
                                                }

                                                _context2.next = 7;
                                                return storage.unset(key);

                                            case 7:
                                                _context2.next = 9;
                                                return storage.unset(settings_1.SMART_KEY);

                                            case 9:
                                                this.state.tokenResponse = {};

                                            case 10:
                                            case "end":
                                                return _context2.stop();
                                        }
                                    }
                                }, _callee2, this);
                            }));

                            function _clearState() {
                                return _clearState2.apply(this, arguments);
                            }

                            return _clearState;
                        }()
                        /**
                         * Creates a new resource in a server-assigned location
                         * @see http://hl7.org/fhir/http.html#create
                         * @param resource A FHIR resource to be created
                         * @param [requestOptions] Any options to be passed to the fetch call.
                         * Note that `method` and `body` will be ignored.
                         * @category Request
                         */
                        ;

                    _proto.create = function create(resource, requestOptions) {
                        if (requestOptions === void 0) {
                            requestOptions = {};
                        }

                        return this.request(Object.assign({}, requestOptions, {
                            url: "" + resource.resourceType,
                            method: "POST",
                            body: JSON.stringify(resource),
                            headers: Object.assign({
                                // TODO: Do we need to alternate with "application/json+fhir"?
                                "Content-Type": "application/json"
                            }, requestOptions.headers)
                        }));
                    }
                        /**
                         * Creates a new current version for an existing resource or creates an
                         * initial version if no resource already exists for the given id.
                         * @see http://hl7.org/fhir/http.html#update
                         * @param resource A FHIR resource to be updated
                         * @param requestOptions Any options to be passed to the fetch call.
                         * Note that `method` and `body` will be ignored.
                         * @category Request
                         */
                        ;

                    _proto.update = function update(resource, requestOptions) {
                        if (requestOptions === void 0) {
                            requestOptions = {};
                        }

                        return this.request(Object.assign({}, requestOptions, {
                            url: resource.resourceType + "/" + resource.id,
                            method: "PUT",
                            body: JSON.stringify(resource),
                            headers: Object.assign({
                                // TODO: Do we need to alternate with "application/json+fhir"?
                                "Content-Type": "application/json"
                            }, requestOptions.headers)
                        }));
                    }
                        /**
                         * Removes an existing resource.
                         * @see http://hl7.org/fhir/http.html#delete
                         * @param url Relative URI of the FHIR resource to be deleted
                         * (format: `resourceType/id`)
                         * @param requestOptions Any options (except `method` which will be fixed
                         * to `DELETE`) to be passed to the fetch call.
                         * @category Request
                         */
                        ;

                    _proto.delete = function _delete(url, requestOptions) {
                        if (requestOptions === void 0) {
                            requestOptions = {};
                        }

                        return this.request(Object.assign({}, requestOptions, {
                            url: url,
                            method: "DELETE"
                        }));
                    }
                        /**
                         * @param requestOptions Can be a string URL (relative to the serviceUrl),
                         * or an object which will be passed to fetch()
                         * @param fhirOptions Additional options to control the behavior
                         * @param _resolvedRefs DO NOT USE! Used internally.
                         * @category Request
                         */
                        ;

                    _proto.request =
                        /*#__PURE__*/
                        function () {
                            var _request = (0, _asyncToGenerator2.default)( /*#__PURE__*/_regenerator.default.mark(function _callee6(requestOptions, fhirOptions, _resolvedRefs) {
                                var _this2 = this;

                                var _a, debugRequest, url, options, signal, job;

                                return _regenerator.default.wrap(function _callee6$(_context6) {
                                    while (1) {
                                        switch (_context6.prev = _context6.next) {
                                            case 0:
                                                if (fhirOptions === void 0) {
                                                    fhirOptions = {};
                                                }

                                                if (_resolvedRefs === void 0) {
                                                    _resolvedRefs = {};
                                                }

                                                debugRequest = lib_1.debug.extend("client:request");

                                                if (requestOptions) {
                                                    _context6.next = 5;
                                                    break;
                                                }

                                                throw new Error("request requires an url or request options as argument");

                                            case 5:
                                                if (typeof requestOptions == "string" || requestOptions instanceof URL) {
                                                    url = String(requestOptions);
                                                    requestOptions = {};
                                                } else {
                                                    url = String(requestOptions.url);
                                                }

                                                url = lib_1.absolute(url, this.state.serverUrl);
                                                options = {
                                                    graph: fhirOptions.graph !== false,
                                                    flat: !!fhirOptions.flat,
                                                    pageLimit: (_a = fhirOptions.pageLimit) !== null && _a !== void 0 ? _a : 1,
                                                    resolveReferences: fhirOptions.resolveReferences || [],
                                                    useRefreshToken: fhirOptions.useRefreshToken !== false,
                                                    onPage: typeof fhirOptions.onPage == "function" ? fhirOptions.onPage : undefined
                                                };
                                                signal = requestOptions.signal || undefined; // Refresh the access token if needed

                                                job = options.useRefreshToken ? this.refreshIfNeeded({
                                                    signal: signal
                                                }).then(function () {
                                                    return requestOptions;
                                                }) : Promise.resolve(requestOptions);
                                                return _context6.abrupt("return", job // Add the Authorization header now, after the access token might
                                                    // have been updated
                                                    .then(function (requestOptions) {
                                                        var authHeader = _this2.getAuthorizationHeader();

                                                        if (authHeader) {
                                                            requestOptions.headers = Object.assign({}, requestOptions.headers, {
                                                                Authorization: authHeader
                                                            });
                                                        }

                                                        return requestOptions;
                                                    }) // Make the request
                                                    .then(function (requestOptions) {
                                                        debugRequest("%s, options: %O, fhirOptions: %O", url, requestOptions, options);
                                                        return lib_1.request(url, requestOptions);
                                                    }) // Handle 401 ------------------------------------------------------
                                                    .catch( /*#__PURE__*/function () {
                                                        var _ref3 = (0, _asyncToGenerator2.default)( /*#__PURE__*/_regenerator.default.mark(function _callee3(error) {
                                                            return _regenerator.default.wrap(function _callee3$(_context3) {
                                                                while (1) {
                                                                    switch (_context3.prev = _context3.next) {
                                                                        case 0:
                                                                            if (!(error.status == 401)) {
                                                                                _context3.next = 12;
                                                                                break;
                                                                            }

                                                                            if (_this2.getState("tokenResponse.access_token")) {
                                                                                _context3.next = 3;
                                                                                break;
                                                                            }

                                                                            throw new Error("This app cannot be accessed directly. Please launch it as SMART app!");

                                                                        case 3:
                                                                            if (options.useRefreshToken) {
                                                                                _context3.next = 8;
                                                                                break;
                                                                            }

                                                                            debugRequest("Your session has expired and the useRefreshToken option is set to false. Please re-launch the app.");
                                                                            _context3.next = 7;
                                                                            return _this2._clearState();

                                                                        case 7:
                                                                            throw new Error(strings_1.default.expired);

                                                                        case 8:
                                                                            // otherwise -> auto-refresh failed. Session expired.
                                                                            // Need to re-launch. Clear state to start over!
                                                                            debugRequest("Auto-refresh failed! Please re-launch the app.");
                                                                            _context3.next = 11;
                                                                            return _this2._clearState();

                                                                        case 11:
                                                                            throw new Error(strings_1.default.expired);

                                                                        case 12:
                                                                            throw error;

                                                                        case 13:
                                                                        case "end":
                                                                            return _context3.stop();
                                                                    }
                                                                }
                                                            }, _callee3);
                                                        }));

                                                        return function (_x6) {
                                                            return _ref3.apply(this, arguments);
                                                        };
                                                    }()) // Handle 403 ------------------------------------------------------
                                                    .catch(function (error) {
                                                        if (error.status == 403) {
                                                            debugRequest("Permission denied! Please make sure that you have requested the proper scopes.");
                                                        }

                                                        throw error;
                                                    }).then(function (data) {
                                                        // Handle raw responses (anything other than json) -------------
                                                        if (!data) return data;
                                                        if (typeof data == "string") return data;
                                                        if (data instanceof Response) return data; // Resolve References ------------------------------------------

                                                        return function () {
                                                            var _ref4 = (0, _asyncToGenerator2.default)( /*#__PURE__*/_regenerator.default.mark(function _callee4(_data) {
                                                                return _regenerator.default.wrap(function _callee4$(_context4) {
                                                                    while (1) {
                                                                        switch (_context4.prev = _context4.next) {
                                                                            case 0:
                                                                                if (!(_data.resourceType == "Bundle")) {
                                                                                    _context4.next = 5;
                                                                                    break;
                                                                                }

                                                                                _context4.next = 3;
                                                                                return Promise.all((_data.entry || []).map(function (item) {
                                                                                    return resolveRefs(item.resource, options, _resolvedRefs, _this2, signal);
                                                                                }));

                                                                            case 3:
                                                                                _context4.next = 7;
                                                                                break;

                                                                            case 5:
                                                                                _context4.next = 7;
                                                                                return resolveRefs(_data, options, _resolvedRefs, _this2, signal);

                                                                            case 7:
                                                                                return _context4.abrupt("return", _data);

                                                                            case 8:
                                                                            case "end":
                                                                                return _context4.stop();
                                                                        }
                                                                    }
                                                                }, _callee4);
                                                            }));

                                                            return function (_x7) {
                                                                return _ref4.apply(this, arguments);
                                                            };
                                                        }()(data) // Pagination ----------------------------------------------
                                                            .then( /*#__PURE__*/function () {
                                                                var _ref5 = (0, _asyncToGenerator2.default)( /*#__PURE__*/_regenerator.default.mark(function _callee5(_data) {
                                                                    var links, next, nextPage;
                                                                    return _regenerator.default.wrap(function _callee5$(_context5) {
                                                                        while (1) {
                                                                            switch (_context5.prev = _context5.next) {
                                                                                case 0:
                                                                                    if (!(_data && _data.resourceType == "Bundle")) {
                                                                                        _context5.next = 19;
                                                                                        break;
                                                                                    }

                                                                                    links = _data.link || [];

                                                                                    if (options.flat) {
                                                                                        _data = (_data.entry || []).map(function (entry) {
                                                                                            return entry.resource;
                                                                                        });
                                                                                    }

                                                                                    if (!options.onPage) {
                                                                                        _context5.next = 6;
                                                                                        break;
                                                                                    }

                                                                                    _context5.next = 6;
                                                                                    return options.onPage(_data, Object.assign({}, _resolvedRefs));

                                                                                case 6:
                                                                                    if (! --options.pageLimit) {
                                                                                        _context5.next = 19;
                                                                                        break;
                                                                                    }

                                                                                    next = links.find(function (l) {
                                                                                        return l.relation == "next";
                                                                                    });
                                                                                    _data = lib_1.makeArray(_data);

                                                                                    if (!(next && next.url)) {
                                                                                        _context5.next = 19;
                                                                                        break;
                                                                                    }

                                                                                    _context5.next = 12;
                                                                                    return _this2.request({
                                                                                        url: next.url,
                                                                                        // Aborting the main request (even after it is complete)
                                                                                        // must propagate to any child requests and abort them!
                                                                                        // To do so, just pass the same AbortSignal if one is
                                                                                        // provided.
                                                                                        signal: signal
                                                                                    }, options, _resolvedRefs);

                                                                                case 12:
                                                                                    nextPage = _context5.sent;

                                                                                    if (!options.onPage) {
                                                                                        _context5.next = 15;
                                                                                        break;
                                                                                    }

                                                                                    return _context5.abrupt("return", null);

                                                                                case 15:
                                                                                    if (!options.resolveReferences.length) {
                                                                                        _context5.next = 18;
                                                                                        break;
                                                                                    }

                                                                                    Object.assign(_resolvedRefs, nextPage.references);
                                                                                    return _context5.abrupt("return", _data.concat(lib_1.makeArray(nextPage.data || nextPage)));

                                                                                case 18:
                                                                                    return _context5.abrupt("return", _data.concat(lib_1.makeArray(nextPage)));

                                                                                case 19:
                                                                                    return _context5.abrupt("return", _data);

                                                                                case 20:
                                                                                case "end":
                                                                                    return _context5.stop();
                                                                            }
                                                                        }
                                                                    }, _callee5);
                                                                }));

                                                                return function (_x8) {
                                                                    return _ref5.apply(this, arguments);
                                                                };
                                                            }()) // Finalize ------------------------------------------------
                                                            .then(function (_data) {
                                                                if (options.graph) {
                                                                    _resolvedRefs = {};
                                                                } else if (!options.onPage && options.resolveReferences.length) {
                                                                    return {
                                                                        data: _data,
                                                                        references: _resolvedRefs
                                                                    };
                                                                }

                                                                return _data;
                                                            });
                                                    }));

                                            case 11:
                                            case "end":
                                                return _context6.stop();
                                        }
                                    }
                                }, _callee6, this);
                            }));

                            function request(_x3, _x4, _x5) {
                                return _request.apply(this, arguments);
                            }

                            return request;
                        }()
                        /**
                         * Checks if access token and refresh token are present. If they are, and if
                         * the access token is expired or is about to expire in the next 10 seconds,
                         * calls `this.refresh()` to obtain new access token.
                         * @param requestOptions Any options to pass to the fetch call. Most of them
                         * will be overridden, bit it might still be useful for passing additional
                         * request options or an abort signal.
                         * @category Request
                         */
                        ;

                    _proto.refreshIfNeeded = function refreshIfNeeded(requestOptions) {
                        if (requestOptions === void 0) {
                            requestOptions = {};
                        }

                        var accessToken = this.getState("tokenResponse.access_token");
                        var refreshToken = this.getState("tokenResponse.refresh_token");
                        var expiresAt = this.state.expiresAt || 0;

                        if (accessToken && refreshToken && expiresAt - 10 < Date.now() / 1000) {
                            return this.refresh(requestOptions);
                        }

                        return Promise.resolve(this.state);
                    }
                        /**
                         * Use the refresh token to obtain new access token. If the refresh token is
                         * expired (or this fails for any other reason) it will be deleted from the
                         * state, so that we don't enter into loops trying to re-authorize.
                         *
                         * This method is typically called internally from [[Client.request]] if
                         * certain request fails with 401.
                         *
                         * @param requestOptions Any options to pass to the fetch call. Most of them
                         * will be overridden, bit it might still be useful for passing additional
                         * request options or an abort signal.
                         * @category Request
                         */
                        ;

                    _proto.refresh = function refresh(requestOptions) {
                        var _this3 = this;

                        if (requestOptions === void 0) {
                            requestOptions = {};
                        }

                        var _a, _b;

                        var debugRefresh = lib_1.debug.extend("client:refresh");
                        debugRefresh("Attempting to refresh with refresh_token...");
                        var refreshToken = (_b = (_a = this.state) === null || _a === void 0 ? void 0 : _a.tokenResponse) === null || _b === void 0 ? void 0 : _b.refresh_token;

                        if (!refreshToken) {
                            throw new Error("Unable to refresh. No refresh_token found.");
                        }

                        var tokenUri = this.state.tokenUri;

                        if (!tokenUri) {
                            throw new Error("Unable to refresh. No tokenUri found.");
                        }

                        var scopes = this.getState("tokenResponse.scope") || "";
                        var hasOfflineAccess = scopes.search(/\boffline_access\b/) > -1;
                        var hasOnlineAccess = scopes.search(/\bonline_access\b/) > -1;

                        if (!hasOfflineAccess && !hasOnlineAccess) {
                            throw new Error("Unable to refresh. No offline_access or online_access scope found.");
                        } // This method is typically called internally from `request` if certain
                        // request fails with 401. However, clients will often run multiple
                        // requests in parallel which may result in multiple refresh calls.
                        // To avoid that, we keep a reference to the current refresh task (if any).


                        if (!this._refreshTask) {
                            var refreshRequestOptions = Object.assign({
                                credentials: this.environment.options.refreshTokenWithCredentials || "same-origin"
                            }, requestOptions, {
                                method: "POST",
                                mode: "cors",
                                headers: Object.assign({}, requestOptions.headers || {}, {
                                    "content-type": "application/x-www-form-urlencoded"
                                }),
                                body: "grant_type=refresh_token&refresh_token=" + encodeURIComponent(refreshToken)
                            }); // custom authorization header can be passed on manual calls

                            if (!("authorization" in refreshRequestOptions.headers)) {
                                var _this$state3 = this.state,
                                    clientSecret = _this$state3.clientSecret,
                                    clientId = _this$state3.clientId;

                                if (clientSecret) {
                                    // @ts-ignore
                                    refreshRequestOptions.headers.authorization = "Basic " + this.environment.btoa(clientId + ":" + clientSecret);
                                }
                            }

                            this._refreshTask = lib_1.request(tokenUri, refreshRequestOptions).then(function (data) {
                                if (!data.access_token) {
                                    throw new Error("No access token received");
                                }

                                debugRefresh("Received new access token response %O", data);
                                Object.assign(_this3.state.tokenResponse, data);
                                _this3.state.expiresAt = lib_1.getAccessTokenExpiration(data, _this3.environment);
                                return _this3.state;
                            }).catch(function (error) {
                                var _a, _b;

                                if ((_b = (_a = _this3.state) === null || _a === void 0 ? void 0 : _a.tokenResponse) === null || _b === void 0 ? void 0 : _b.refresh_token) {
                                    debugRefresh("Deleting the expired or invalid refresh token.");
                                    delete _this3.state.tokenResponse.refresh_token;
                                }

                                throw error;
                            }).finally(function () {
                                _this3._refreshTask = null;
                                var key = _this3.state.key;

                                if (key) {
                                    _this3.environment.getStorage().set(key, _this3.state);
                                } else {
                                    debugRefresh("No 'key' found in Clint.state. Cannot persist the instance.");
                                }
                            });
                        }

                        return this._refreshTask;
                    } // utils -------------------------------------------------------------------

                        /**
                         * Groups the observations by code. Returns a map that will look like:
                         * ```js
                         * const map = client.byCodes(observations, "code");
                         * // map = {
                         * //     "55284-4": [ observation1, observation2 ],
                         * //     "6082-2": [ observation3 ]
                         * // }
                         * ```
                         * @param observations Array of observations
                         * @param property The name of a CodeableConcept property to group by
                         * @todo This should be deprecated and moved elsewhere. One should not have
                         * to obtain an instance of [[Client]] just to use utility functions like this.
                         * @deprecated
                         * @category Utility
                         */
                        ;

                    _proto.byCode = function byCode(observations, property) {
                        return lib_1.byCode(observations, property);
                    }
                        /**
                         * First groups the observations by code using `byCode`. Then returns a function
                         * that accepts codes as arguments and will return a flat array of observations
                         * having that codes. Example:
                         * ```js
                         * const filter = client.byCodes(observations, "category");
                         * filter("laboratory") // => [ observation1, observation2 ]
                         * filter("vital-signs") // => [ observation3 ]
                         * filter("laboratory", "vital-signs") // => [ observation1, observation2, observation3 ]
                         * ```
                         * @param observations Array of observations
                         * @param property The name of a CodeableConcept property to group by
                         * @todo This should be deprecated and moved elsewhere. One should not have
                         * to obtain an instance of [[Client]] just to use utility functions like this.
                         * @deprecated
                         * @category Utility
                         */
                        ;

                    _proto.byCodes = function byCodes(observations, property) {
                        return lib_1.byCodes(observations, property);
                    }
                        /**
                         * Walks through an object (or array) and returns the value found at the
                         * provided path. This function is very simple so it intentionally does not
                         * support any argument polymorphism, meaning that the path can only be a
                         * dot-separated string. If the path is invalid returns undefined.
                         * @param obj The object (or Array) to walk through
                         * @param path The path (eg. "a.b.4.c")
                         * @returns {*} Whatever is found in the path or undefined
                         * @todo This should be deprecated and moved elsewhere. One should not have
                         * to obtain an instance of [[Client]] just to use utility functions like this.
                         * @deprecated
                         * @category Utility
                         */
                        ;

                    _proto.getPath = function getPath(obj, path) {
                        if (path === void 0) {
                            path = "";
                        }

                        return lib_1.getPath(obj, path);
                    }
                        /**
                         * Returns a copy of the client state. Accepts a dot-separated path argument
                         * (same as for `getPath`) to allow for selecting specific properties.
                         * Examples:
                         * ```js
                         * client.getState(); // -> the entire state object
                         * client.getState("serverUrl"); // -> the URL we are connected to
                         * client.getState("tokenResponse.patient"); // -> The selected patient ID (if any)
                         * ```
                         * @param path The path (eg. "a.b.4.c")
                         * @returns {*} Whatever is found in the path or undefined
                         */
                        ;

                    _proto.getState = function getState(path) {
                        if (path === void 0) {
                            path = "";
                        }

                        return lib_1.getPath(Object.assign({}, this.state), path);
                    }
                        /**
                         * Returns a promise that will be resolved with the fhir version as defined
                         * in the CapabilityStatement.
                         */
                        ;

                    _proto.getFhirVersion = function getFhirVersion() {
                        return lib_1.fetchConformanceStatement(this.state.serverUrl).then(function (metadata) {
                            return metadata.fhirVersion;
                        });
                    }
                        /**
                         * Returns a promise that will be resolved with the numeric fhir version
                         * - 2 for DSTU2
                         * - 3 for STU3
                         * - 4 for R4
                         * - 0 if the version is not known
                         */
                        ;

                    _proto.getFhirRelease = function getFhirRelease() {
                        return this.getFhirVersion().then(function (v) {
                            var _a;

                            return (_a = settings_1.fhirVersions[v]) !== null && _a !== void 0 ? _a : 0;
                        });
                    };

                    return Client;
                }();

                exports.default = Client;

                /***/
            }),

/***/ "./src/HttpError.ts":
/*!**************************!*\
  !*** ./src/HttpError.ts ***!
  \**************************/
/*! all exports used */
/***/ (function (module, exports, __webpack_require__) {

                "use strict";


                var _interopRequireDefault = __webpack_require__(/*! @babel/runtime/helpers/interopRequireDefault */ "./node_modules/@babel/runtime/helpers/interopRequireDefault.js");

                __webpack_require__(/*! core-js/modules/es.function.name */ "./node_modules/core-js/modules/es.function.name.js");

                __webpack_require__(/*! core-js/modules/web.url.to-json */ "./node_modules/core-js/modules/web.url.to-json.js");

                var _inheritsLoose2 = _interopRequireDefault(__webpack_require__(/*! @babel/runtime/helpers/inheritsLoose */ "./node_modules/@babel/runtime/helpers/inheritsLoose.js"));

                var _wrapNativeSuper2 = _interopRequireDefault(__webpack_require__(/*! @babel/runtime/helpers/wrapNativeSuper */ "./node_modules/@babel/runtime/helpers/wrapNativeSuper.js"));

                Object.defineProperty(exports, "__esModule", {
                    value: true
                });

                var HttpError = /*#__PURE__*/function (_Error) {
                    (0, _inheritsLoose2.default)(HttpError, _Error);

                    function HttpError(message, statusCode, statusText, body) {
                        var _this;

                        if (message === void 0) {
                            message = "Unknown error";
                        }

                        if (statusCode === void 0) {
                            statusCode = 0;
                        }

                        if (statusText === void 0) {
                            statusText = "Error";
                        }

                        if (body === void 0) {
                            body = null;
                        }

                        _this = _Error.call(this, message) || this;
                        _this.message = message;
                        _this.name = "HttpError";
                        _this.statusCode = statusCode;
                        _this.status = statusCode;
                        _this.statusText = statusText;
                        _this.body = body;
                        return _this;
                    }

                    var _proto = HttpError.prototype;

                    _proto.toJSON = function toJSON() {
                        return {
                            name: this.name,
                            statusCode: this.statusCode,
                            status: this.status,
                            statusText: this.statusText,
                            message: this.message,
                            body: this.body
                        };
                    };

                    return HttpError;
                }( /*#__PURE__*/(0, _wrapNativeSuper2.default)(Error));

                exports.default = HttpError;

                /***/
            }),

/***/ "./src/adapters/BrowserAdapter.ts":
/*!****************************************!*\
  !*** ./src/adapters/BrowserAdapter.ts ***!
  \****************************************/
/*! all exports used */
/***/ (function (module, exports, __webpack_require__) {

                "use strict";


                var _interopRequireDefault = __webpack_require__(/*! @babel/runtime/helpers/interopRequireDefault */ "./node_modules/@babel/runtime/helpers/interopRequireDefault.js");

                __webpack_require__(/*! core-js/modules/es.array.concat */ "./node_modules/core-js/modules/es.array.concat.js");

                __webpack_require__(/*! core-js/modules/es.array.iterator */ "./node_modules/core-js/modules/es.array.iterator.js");

                __webpack_require__(/*! core-js/modules/es.object.assign */ "./node_modules/core-js/modules/es.object.assign.js");

                __webpack_require__(/*! core-js/modules/es.object.to-string */ "./node_modules/core-js/modules/es.object.to-string.js");

                __webpack_require__(/*! core-js/modules/es.string.iterator */ "./node_modules/core-js/modules/es.string.iterator.js");

                __webpack_require__(/*! core-js/modules/web.dom-collections.iterator */ "./node_modules/core-js/modules/web.dom-collections.iterator.js");

                __webpack_require__(/*! core-js/modules/web.url */ "./node_modules/core-js/modules/web.url.js");

                var _createClass2 = _interopRequireDefault(__webpack_require__(/*! @babel/runtime/helpers/createClass */ "./node_modules/@babel/runtime/helpers/createClass.js"));

                Object.defineProperty(exports, "__esModule", {
                    value: true
                });

                var smart_1 = __webpack_require__(/*! ../smart */ "./src/smart.ts");

                var Client_1 = __webpack_require__(/*! ../Client */ "./src/Client.ts");

                var BrowserStorage_1 = __webpack_require__(/*! ../storage/BrowserStorage */ "./src/storage/BrowserStorage.ts");
                /**
                 * Browser Adapter
                 */


                var BrowserAdapter = /*#__PURE__*/function () {
                    /**
                     * @param options Environment-specific options
                     */
                    function BrowserAdapter(options) {
                        if (options === void 0) {
                            options = {};
                        }

                        /**
                         * Stores the URL instance associated with this adapter
                         */
                        this._url = null;
                        /**
                         * Holds the Storage instance associated with this instance
                         */

                        this._storage = null;
                        this.options = Object.assign({
                            // Replaces the browser's current URL
                            // using window.history.replaceState API or by reloading.
                            replaceBrowserHistory: true,
                            // When set to true, this variable will fully utilize
                            // HTML5 sessionStorage API.
                            // This variable can be overridden to false by setting
                            // FHIR.oauth2.settings.fullSessionStorageSupport = false.
                            // When set to false, the sessionStorage will be keyed
                            // by a state variable. This is to allow the embedded IE browser
                            // instances instantiated on a single thread to continue to
                            // function without having sessionStorage data shared
                            // across the embedded IE instances.
                            fullSessionStorageSupport: true,
                            // Do we want to send cookies while making a request to the token
                            // endpoint in order to obtain new access token using existing
                            // refresh token. In rare cases the auth server might require the
                            // client to send cookies along with those requests. In this case
                            // developers will have to change this before initializing the app
                            // like so:
                            // `FHIR.oauth2.settings.refreshTokenWithCredentials = "include";`
                            // or
                            // `FHIR.oauth2.settings.refreshTokenWithCredentials = "same-origin";`
                            // Can be one of:
                            // "include"     - always send cookies
                            // "same-origin" - only send cookies if we are on the same domain (default)
                            // "omit"        - do not send cookies
                            refreshTokenWithCredentials: "same-origin"
                        }, options);
                    }
                    /**
                     * Given a relative path, returns an absolute url using the instance base URL
                     */


                    var _proto = BrowserAdapter.prototype;

                    _proto.relative = function relative(path) {
                        return new URL(path, this.getUrl().href).href;
                    }
                        /**
                         * In browsers we need to be able to (dynamically) check if fhir.js is
                         * included in the page. If it is, it should have created a "fhir" variable
                         * in the global scope.
                         */
                        ;

                    /**
                     * Given the current environment, this method must return the current url
                     * as URL instance
                     */
                    _proto.getUrl = function getUrl() {
                        if (!this._url) {
                            this._url = new URL(location + "");
                        }

                        return this._url;
                    }
                        /**
                         * Given the current environment, this method must redirect to the given
                         * path
                         */
                        ;

                    _proto.redirect = function redirect(to) {
                        location.href = to;
                    }
                        /**
                         * Returns a BrowserStorage object which is just a wrapper around
                         * sessionStorage
                         */
                        ;

                    _proto.getStorage = function getStorage() {
                        if (!this._storage) {
                            this._storage = new BrowserStorage_1.default();
                        }

                        return this._storage;
                    }
                        /**
                         * Returns a reference to the AbortController constructor. In browsers,
                         * AbortController will always be available as global (native or polyfilled)
                         */
                        ;

                    _proto.getAbortController = function getAbortController() {
                        return AbortController;
                    }
                        /**
                         * ASCII string to Base64
                         */
                        ;

                    _proto.atob = function atob(str) {
                        return window.atob(str);
                    }
                        /**
                         * Base64 to ASCII string
                         */
                        ;

                    _proto.btoa = function btoa(str) {
                        return window.btoa(str);
                    }
                        /**
                         * Creates and returns adapter-aware SMART api. Not that while the shape of
                         * the returned object is well known, the arguments to this function are not.
                         * Those who override this method are free to require any environment-specific
                         * arguments. For example in node we will need a request, a response and
                         * optionally a storage or storage factory function.
                         */
                        ;

                    _proto.getSmartApi = function getSmartApi() {
                        var _this = this;

                        return {
                            ready: function ready() {
                                for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
                                    args[_key] = arguments[_key];
                                }

                                return smart_1.ready.apply(smart_1, [_this].concat(args));
                            },
                            authorize: function authorize(options) {
                                return smart_1.authorize(_this, options);
                            },
                            init: function init(options) {
                                return smart_1.init(_this, options);
                            },
                            client: function client(state) {
                                return new Client_1.default(_this, state);
                            },
                            options: this.options
                        };
                    };

                    (0, _createClass2.default)(BrowserAdapter, [{
                        key: "fhir",
                        get: function get() {
                            // @ts-ignore
                            return typeof fhir === "function" ? fhir : null;
                        }
                    }]);
                    return BrowserAdapter;
                }();

                exports.default = BrowserAdapter;

                /***/
            }),

/***/ "./src/entry/browser.ts":
/*!******************************!*\
  !*** ./src/entry/browser.ts ***!
  \******************************/
/*! all exports used */
/***/ (function (module, exports, __webpack_require__) {

                "use strict";
                // In Browsers we create an adapter, get the SMART api from it and build the
                // global FHIR object

                __webpack_require__(/*! core-js/modules/es.object.to-string */ "./node_modules/core-js/modules/es.object.to-string.js");

                __webpack_require__(/*! core-js/modules/es.promise */ "./node_modules/core-js/modules/es.promise.js");

                var BrowserAdapter_1 = __webpack_require__(/*! ../adapters/BrowserAdapter */ "./src/adapters/BrowserAdapter.ts");

                var adapter = new BrowserAdapter_1.default();

                var _adapter$getSmartApi = adapter.getSmartApi(),
                    ready = _adapter$getSmartApi.ready,
                    authorize = _adapter$getSmartApi.authorize,
                    init = _adapter$getSmartApi.init,
                    client = _adapter$getSmartApi.client,
                    options = _adapter$getSmartApi.options; // We have two kinds of browser builds - "pure" for new browsers and "legacy"
                // for old ones. In pure builds we assume that the browser supports everything
                // we need. In legacy mode, the library also acts as a polyfill. Babel will
                // automatically polyfill everything except "fetch", which we have to handle
                // manually.
                // @ts-ignore


                if (typeof FHIRCLIENT_PURE == "undefined") {
                    var fetch = __webpack_require__(/*! cross-fetch */ "./node_modules/cross-fetch/dist/browser-ponyfill.js");

                    __webpack_require__(/*! abortcontroller-polyfill/dist/abortcontroller-polyfill-only */ "./node_modules/abortcontroller-polyfill/dist/abortcontroller-polyfill-only.js");

                    if (!window.fetch) {
                        window.fetch = fetch.default;
                        window.Headers = fetch.Headers;
                        window.Request = fetch.Request;
                        window.Response = fetch.Response;
                    }
                } // $lab:coverage:off$


                var FHIR = {
                    AbortController: window.AbortController,
                    client: client,
                    oauth2: {
                        settings: options,
                        ready: ready,
                        authorize: authorize,
                        init: init
                    }
                };
                module.exports = FHIR; // $lab:coverage:on$

                /***/
            }),

/***/ "./src/lib.ts":
/*!********************!*\
  !*** ./src/lib.ts ***!
  \********************/
/*! all exports used */
/***/ (function (module, exports, __webpack_require__) {

                "use strict";

                /*
                 * This file contains some shared functions. They are used by other modules, but
                 * are defined here so that tests can import this library and test them.
                 */

                var _interopRequireDefault = __webpack_require__(/*! @babel/runtime/helpers/interopRequireDefault */ "./node_modules/@babel/runtime/helpers/interopRequireDefault.js");

                __webpack_require__(/*! core-js/modules/es.array.concat */ "./node_modules/core-js/modules/es.array.concat.js");

                __webpack_require__(/*! core-js/modules/es.array.filter */ "./node_modules/core-js/modules/es.array.filter.js");

                __webpack_require__(/*! core-js/modules/es.array.find */ "./node_modules/core-js/modules/es.array.find.js");

                __webpack_require__(/*! core-js/modules/es.array.for-each */ "./node_modules/core-js/modules/es.array.for-each.js");

                __webpack_require__(/*! core-js/modules/es.array.join */ "./node_modules/core-js/modules/es.array.join.js");

                __webpack_require__(/*! core-js/modules/es.array.map */ "./node_modules/core-js/modules/es.array.map.js");

                __webpack_require__(/*! core-js/modules/es.array.reduce */ "./node_modules/core-js/modules/es.array.reduce.js");

                __webpack_require__(/*! core-js/modules/es.function.name */ "./node_modules/core-js/modules/es.function.name.js");

                __webpack_require__(/*! core-js/modules/es.object.assign */ "./node_modules/core-js/modules/es.object.assign.js");

                __webpack_require__(/*! core-js/modules/es.object.to-string */ "./node_modules/core-js/modules/es.object.to-string.js");

                __webpack_require__(/*! core-js/modules/es.promise */ "./node_modules/core-js/modules/es.promise.js");

                __webpack_require__(/*! core-js/modules/es.regexp.exec */ "./node_modules/core-js/modules/es.regexp.exec.js");

                __webpack_require__(/*! core-js/modules/es.string.match */ "./node_modules/core-js/modules/es.string.match.js");

                __webpack_require__(/*! core-js/modules/es.string.replace */ "./node_modules/core-js/modules/es.string.replace.js");

                __webpack_require__(/*! core-js/modules/es.string.split */ "./node_modules/core-js/modules/es.string.split.js");

                __webpack_require__(/*! core-js/modules/es.string.trim */ "./node_modules/core-js/modules/es.string.trim.js");

                __webpack_require__(/*! core-js/modules/web.dom-collections.for-each */ "./node_modules/core-js/modules/web.dom-collections.for-each.js");

                var _regenerator = _interopRequireDefault(__webpack_require__(/*! @babel/runtime/regenerator */ "./node_modules/@babel/runtime/regenerator/index.js"));

                __webpack_require__(/*! regenerator-runtime/runtime */ "./node_modules/regenerator-runtime/runtime.js");

                var _asyncToGenerator2 = _interopRequireDefault(__webpack_require__(/*! @babel/runtime/helpers/asyncToGenerator */ "./node_modules/@babel/runtime/helpers/asyncToGenerator.js"));

                Object.defineProperty(exports, "__esModule", {
                    value: true
                });
                exports.getTargetWindow = exports.getPatientParam = exports.byCodes = exports.byCode = exports.getAccessTokenExpiration = exports.jwtDecode = exports.randomString = exports.absolute = exports.makeArray = exports.setPath = exports.getPath = exports.humanizeError = exports.fetchConformanceStatement = exports.getAndCache = exports.request = exports.responseToJSON = exports.checkResponse = exports.units = exports.debug = void 0;

                var HttpError_1 = __webpack_require__(/*! ./HttpError */ "./src/HttpError.ts");

                var settings_1 = __webpack_require__(/*! ./settings */ "./src/settings.ts");

                var debug = __webpack_require__(/*! debug */ "./node_modules/debug/src/browser.js"); // $lab:coverage:off$
                // @ts-ignore


                var _ref = typeof FHIRCLIENT_PURE !== "undefined" ? window : __webpack_require__(/*! cross-fetch */ "./node_modules/cross-fetch/dist/browser-ponyfill.js"),
                    fetch = _ref.fetch; // $lab:coverage:on$


                var _debug = debug("FHIR");

                exports.debug = _debug;
                /**
                 * The cache for the `getAndCache` function
                 */

                var cache = {};
                /**
                 * A namespace with functions for converting between different measurement units
                 */

                exports.units = {
                    cm: function cm(_ref2) {
                        var code = _ref2.code,
                            value = _ref2.value;
                        ensureNumerical({
                            code: code,
                            value: value
                        });
                        if (code == "cm") return value;
                        if (code == "m") return value * 100;
                        if (code == "in") return value * 2.54;
                        if (code == "[in_us]") return value * 2.54;
                        if (code == "[in_i]") return value * 2.54;
                        if (code == "ft") return value * 30.48;
                        if (code == "[ft_us]") return value * 30.48;
                        throw new Error("Unrecognized length unit: " + code);
                    },
                    kg: function kg(_ref3) {
                        var code = _ref3.code,
                            value = _ref3.value;
                        ensureNumerical({
                            code: code,
                            value: value
                        });
                        if (code == "kg") return value;
                        if (code == "g") return value / 1000;
                        if (code.match(/lb/)) return value / 2.20462;
                        if (code.match(/oz/)) return value / 35.274;
                        throw new Error("Unrecognized weight unit: " + code);
                    },
                    any: function any(pq) {
                        ensureNumerical(pq);
                        return pq.value;
                    }
                };
                /**
                 * Assertion function to guard arguments for `units` functions
                 */

                function ensureNumerical(_ref4) {
                    var value = _ref4.value,
                        code = _ref4.code;

                    if (typeof value !== "number") {
                        throw new Error("Found a non-numerical unit: " + value + " " + code);
                    }
                }
                /**
                 * Used in fetch Promise chains to reject if the "ok" property is not true
                 */


                function checkResponse(_x) {
                    return _checkResponse.apply(this, arguments);
                }

                function _checkResponse() {
                    _checkResponse = (0, _asyncToGenerator2.default)( /*#__PURE__*/_regenerator.default.mark(function _callee(resp) {
                        return _regenerator.default.wrap(function _callee$(_context) {
                            while (1) {
                                switch (_context.prev = _context.next) {
                                    case 0:
                                        if (resp.ok) {
                                            _context.next = 4;
                                            break;
                                        }

                                        _context.next = 3;
                                        return humanizeError(resp);

                                    case 3:
                                        throw _context.sent;

                                    case 4:
                                        return _context.abrupt("return", resp);

                                    case 5:
                                    case "end":
                                        return _context.stop();
                                }
                            }
                        }, _callee);
                    }));
                    return _checkResponse.apply(this, arguments);
                }

                exports.checkResponse = checkResponse;
                /**
                 * Used in fetch Promise chains to return the JSON version of the response.
                 * Note that `resp.json()` will throw on empty body so we use resp.text()
                 * instead.
                 */

                function responseToJSON(resp) {
                    return resp.text().then(function (text) {
                        return text.length ? JSON.parse(text) : "";
                    });
                }

                exports.responseToJSON = responseToJSON;
                /**
                 * This is our built-in request function. It does a few things by default
                 * (unless told otherwise):
                 * - Makes CORS requests
                 * - Sets accept header to "application/json"
                 * - Handles errors
                 * - If the response is json return the json object
                 * - If the response is text return the result text
                 * - Otherwise return the response object on which we call stuff like `.blob()`
                 */

                function request(url, options) {
                    if (options === void 0) {
                        options = {};
                    }

                    return fetch(url, Object.assign({
                        mode: "cors"
                    }, options, {
                        headers: Object.assign({
                            accept: "application/json"
                        }, options.headers)
                    })).then(checkResponse).then(function (res) {
                        var type = res.headers.get("Content-Type") + "";

                        if (type.match(/\bjson\b/i)) {
                            return responseToJSON(res).then(function (body) {
                                return {
                                    res: res,
                                    body: body
                                };
                            });
                        }

                        if (type.match(/^text\//i)) {
                            return res.text().then(function (body) {
                                return {
                                    res: res,
                                    body: body
                                };
                            });
                        }

                        return {
                            res: res
                        };
                    }).then(function (_ref5) {
                        var res = _ref5.res,
                            body = _ref5.body;

                        // Some servers will reply after CREATE with json content type but with
                        // empty body. In this case check if a location header is received and
                        // fetch that to use it as the final result.
                        if (!body && res.status == 201) {
                            var location = res.headers.get("location") + "";

                            if (location) {
                                return request(location, Object.assign({}, options, {
                                    method: "GET",
                                    body: null
                                }));
                            }
                        } // For any non-text and non-json response return the Response object.
                        // This to let users decide if they want to call text(), blob() or
                        // something else on it


                        if (body === undefined) {
                            return res;
                        } // Otherwise just return the parsed body (can also be "" or null)


                        return body;
                    });
                }

                exports.request = request;
                /**
                 * Makes a request using `fetch` and stores the result in internal memory cache.
                 * The cache is cleared when the page is unloaded.
                 * @param url The URL to request
                 * @param requestOptions Request options
                 * @param force If true, reload from source and update the cache, even if it has
                 * already been cached.
                 */

                function getAndCache(url, requestOptions, force) {
                    if (force === void 0) {
                        force = "development" === "test";
                    }

                    if (force || !cache[url]) {
                        cache[url] = request(url, requestOptions);
                        return cache[url];
                    }

                    return Promise.resolve(cache[url]);
                }

                exports.getAndCache = getAndCache;
                /**
                 * Fetches the conformance statement from the given base URL.
                 * Note that the result is cached in memory (until the page is reloaded in the
                 * browser) because it might have to be re-used by the client
                 * @param baseUrl The base URL of the FHIR server
                 * @param [requestOptions] Any options passed to the fetch call
                 */

                function fetchConformanceStatement(baseUrl, requestOptions) {
                    if (baseUrl === void 0) {
                        baseUrl = "/";
                    }

                    var url = String(baseUrl).replace(/\/*$/, "/") + "metadata";
                    return getAndCache(url, requestOptions).catch(function (ex) {
                        throw new Error("Failed to fetch the conformance statement from \"" + url + "\". " + ex);
                    });
                }

                exports.fetchConformanceStatement = fetchConformanceStatement;
                /**
                 * Given a response object, generates and throws detailed HttpError.
                 * @param resp The `Response` object of a failed `fetch` request
                 */

                function humanizeError(_x2) {
                    return _humanizeError.apply(this, arguments);
                }

                function _humanizeError() {
                    _humanizeError = (0, _asyncToGenerator2.default)( /*#__PURE__*/_regenerator.default.mark(function _callee2(resp) {
                        var msg, body, type;
                        return _regenerator.default.wrap(function _callee2$(_context2) {
                            while (1) {
                                switch (_context2.prev = _context2.next) {
                                    case 0:
                                        msg = resp.status + " " + resp.statusText + "\nURL: " + resp.url;
                                        body = null;
                                        _context2.prev = 2;
                                        type = resp.headers.get("Content-Type") || "text/plain";

                                        if (!type.match(/\bjson\b/i)) {
                                            _context2.next = 11;
                                            break;
                                        }

                                        _context2.next = 7;
                                        return resp.json();

                                    case 7:
                                        body = _context2.sent;

                                        if (body.error) {
                                            msg += "\n" + body.error;

                                            if (body.error_description) {
                                                msg += ": " + body.error_description;
                                            }
                                        } else {
                                            msg += "\n\n" + JSON.stringify(body, null, 4);
                                        }

                                        _context2.next = 16;
                                        break;

                                    case 11:
                                        if (!type.match(/^text\//i)) {
                                            _context2.next = 16;
                                            break;
                                        }

                                        _context2.next = 14;
                                        return resp.text();

                                    case 14:
                                        body = _context2.sent;

                                        if (body) {
                                            msg += "\n\n" + body;
                                        }

                                    case 16:
                                        _context2.next = 20;
                                        break;

                                    case 18:
                                        _context2.prev = 18;
                                        _context2.t0 = _context2["catch"](2);

                                    case 20:
                                        throw new HttpError_1.default(msg, resp.status, resp.statusText, body);

                                    case 21:
                                    case "end":
                                        return _context2.stop();
                                }
                            }
                        }, _callee2, null, [[2, 18]]);
                    }));
                    return _humanizeError.apply(this, arguments);
                }

                exports.humanizeError = humanizeError;
                /**
                 * Walks through an object (or array) and returns the value found at the
                 * provided path. This function is very simple so it intentionally does not
                 * support any argument polymorphism, meaning that the path can only be a
                 * dot-separated string. If the path is invalid returns undefined.
                 * @param obj The object (or Array) to walk through
                 * @param path The path (eg. "a.b.4.c")
                 * @returns {*} Whatever is found in the path or undefined
                 */

                function getPath(obj, path) {
                    if (path === void 0) {
                        path = "";
                    }

                    path = path.trim();

                    if (!path) {
                        return obj;
                    }

                    var segments = path.split(".");
                    var result = obj;

                    while (result && segments.length) {
                        var key = segments.shift();

                        if (!key && Array.isArray(result)) {
                            return result.map(function (o) {
                                return getPath(o, segments.join("."));
                            });
                        } else {
                            result = result[key];
                        }
                    }

                    return result;
                }

                exports.getPath = getPath;
                /**
                 * Like getPath, but if the node is found, its value is set to @value
                 * @param obj The object (or Array) to walk through
                 * @param path The path (eg. "a.b.4.c")
                 * @param value The value to set
                 * @param createEmpty If true, create missing intermediate objects or arrays
                 * @returns The modified object
                 */

                function setPath(obj, path, value, createEmpty) {
                    if (createEmpty === void 0) {
                        createEmpty = false;
                    }

                    path.trim().split(".").reduce(function (out, key, idx, arr) {
                        if (out && idx === arr.length - 1) {
                            out[key] = value;
                        } else {
                            if (out && out[key] === undefined && createEmpty) {
                                out[key] = arr[idx + 1].match(/^[0-9]+$/) ? [] : {};
                            }

                            return out ? out[key] : undefined;
                        }
                    }, obj);
                    return obj;
                }

                exports.setPath = setPath;
                /**
                 * If the argument is an array returns it as is. Otherwise puts it in an array
                 * (`[arg]`) and returns the result
                 * @param arg The element to test and possibly convert to array
                 * @category Utility
                 */

                function makeArray(arg) {
                    if (Array.isArray(arg)) {
                        return arg;
                    }

                    return [arg];
                }

                exports.makeArray = makeArray;
                /**
                 * Given a path, converts it to absolute url based on the `baseUrl`. If baseUrl
                 * is not provided, the result would be a rooted path (one that starts with `/`).
                 * @param path The path to convert
                 * @param baseUrl The base URL
                 */

                function absolute(path, baseUrl) {
                    if (path.match(/^http/)) return path;
                    if (path.match(/^urn/)) return path;
                    return String(baseUrl || "").replace(/\/+$/, "") + "/" + path.replace(/^\/+/, "");
                }

                exports.absolute = absolute;
                /**
                 * Generates random strings. By default this returns random 8 characters long
                 * alphanumeric strings.
                 * @param strLength The length of the output string. Defaults to 8.
                 * @param charSet A string containing all the possible characters.
                 *     Defaults to all the upper and lower-case letters plus digits.
                 * @category Utility
                 */

                function randomString(strLength, charSet) {
                    if (strLength === void 0) {
                        strLength = 8;
                    }

                    if (charSet === void 0) {
                        charSet = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789";
                    }

                    var result = [];
                    var len = charSet.length;

                    while (strLength--) {
                        result.push(charSet.charAt(Math.floor(Math.random() * len)));
                    }

                    return result.join("");
                }

                exports.randomString = randomString;
                /**
                 * Decodes a JWT token and returns it's body.
                 * @param token The token to read
                 * @param env An `Adapter` or any other object that has an `atob` method
                 * @category Utility
                 */

                function jwtDecode(token, env) {
                    var payload = token.split(".")[1];
                    return payload ? JSON.parse(env.atob(payload)) : null;
                }

                exports.jwtDecode = jwtDecode;
                /**
                 * Given a token response, computes and returns the expiresAt timestamp.
                 * Note that this should only be used immediately after an access token is
                 * received, otherwise the computed timestamp will be incorrect.
                 * @param tokenResponse
                 * @param env
                 */

                function getAccessTokenExpiration(tokenResponse, env) {
                    var now = Math.floor(Date.now() / 1000); // Option 1 - using the expires_in property of the token response

                    if (tokenResponse.expires_in) {
                        return now + tokenResponse.expires_in;
                    } // Option 2 - using the exp property of JWT tokens (must not assume JWT!)


                    if (tokenResponse.access_token) {
                        var tokenBody = jwtDecode(tokenResponse.access_token, env);

                        if (tokenBody && tokenBody.exp) {
                            return tokenBody.exp;
                        }
                    } // Option 3 - if none of the above worked set this to 5 minutes after now


                    return now + 300;
                }

                exports.getAccessTokenExpiration = getAccessTokenExpiration;
                /**
                 * Groups the observations by code. Returns a map that will look like:
                 * ```js
                 * const map = client.byCodes(observations, "code");
                 * // map = {
                 * //     "55284-4": [ observation1, observation2 ],
                 * //     "6082-2": [ observation3 ]
                 * // }
                 * ```
                 * @param observations Array of observations
                 * @param property The name of a CodeableConcept property to group by
                 */

                function byCode(observations, property) {
                    var ret = {};

                    function handleCodeableConcept(concept, observation) {
                        if (concept && Array.isArray(concept.coding)) {
                            concept.coding.forEach(function (_ref6) {
                                var code = _ref6.code;

                                if (code) {
                                    ret[code] = ret[code] || [];
                                    ret[code].push(observation);
                                }
                            });
                        }
                    }

                    makeArray(observations).forEach(function (o) {
                        if (o.resourceType === "Observation" && o[property]) {
                            if (Array.isArray(o[property])) {
                                o[property].forEach(function (concept) {
                                    return handleCodeableConcept(concept, o);
                                });
                            } else {
                                handleCodeableConcept(o[property], o);
                            }
                        }
                    });
                    return ret;
                }

                exports.byCode = byCode;
                /**
                 * First groups the observations by code using `byCode`. Then returns a function
                 * that accepts codes as arguments and will return a flat array of observations
                 * having that codes. Example:
                 * ```js
                 * const filter = client.byCodes(observations, "category");
                 * filter("laboratory") // => [ observation1, observation2 ]
                 * filter("vital-signs") // => [ observation3 ]
                 * filter("laboratory", "vital-signs") // => [ observation1, observation2, observation3 ]
                 * ```
                 * @param observations Array of observations
                 * @param property The name of a CodeableConcept property to group by
                 */

                function byCodes(observations, property) {
                    var bank = byCode(observations, property);
                    return function () {
                        for (var _len = arguments.length, codes = new Array(_len), _key = 0; _key < _len; _key++) {
                            codes[_key] = arguments[_key];
                        }

                        return codes.filter(function (code) {
                            return code + "" in bank;
                        }).reduce(function (prev, code) {
                            return prev.concat(bank[code + ""]);
                        }, []);
                    };
                }

                exports.byCodes = byCodes;
                /**
                 * Given a conformance statement and a resource type, returns the name of the
                 * URL parameter that can be used to scope the resource type by patient ID.
                 */

                function getPatientParam(conformance, resourceType) {
                    // Find what resources are supported by this server
                    var resources = getPath(conformance, "rest.0.resource") || []; // Check if this resource is supported

                    var meta = resources.find(function (r) {
                        return r.type === resourceType;
                    });

                    if (!meta) {
                        throw new Error("Resource \"" + resourceType + "\" is not supported by this FHIR server");
                    } // Check if any search parameters are available for this resource


                    if (!Array.isArray(meta.searchParam)) {
                        throw new Error("No search parameters supported for \"" + resourceType + "\" on this FHIR server");
                    } // This is a rare case but could happen in generic workflows


                    if (resourceType == "Patient" && meta.searchParam.find(function (x) {
                        return x.name == "_id";
                    })) {
                        return "_id";
                    } // Now find the first possible parameter name


                    var out = settings_1.patientParams.find(function (p) {
                        return meta.searchParam.find(function (x) {
                            return x.name == p;
                        });
                    }); // If there is no match

                    if (!out) {
                        throw new Error("I don't know what param to use for " + resourceType);
                    }

                    return out;
                }

                exports.getPatientParam = getPatientParam;
                /**
                 * Resolves a reference to target window. It may also open new window or tab if
                 * the `target = "popup"` or `target = "_blank"`.
                 * @param target
                 * @param width Only used when `target = "popup"`
                 * @param height Only used when `target = "popup"`
                 */

                function getTargetWindow(_x3, _x4, _x5) {
                    return _getTargetWindow.apply(this, arguments);
                }

                function _getTargetWindow() {
                    _getTargetWindow = (0, _asyncToGenerator2.default)( /*#__PURE__*/_regenerator.default.mark(function _callee3(target, width, height) {
                        var error, targetWindow, _error, _targetWindow, winOrFrame;

                        return _regenerator.default.wrap(function _callee3$(_context3) {
                            while (1) {
                                switch (_context3.prev = _context3.next) {
                                    case 0:
                                        if (width === void 0) {
                                            width = 800;
                                        }

                                        if (height === void 0) {
                                            height = 720;
                                        }

                                        if (!(typeof target == "function")) {
                                            _context3.next = 6;
                                            break;
                                        }

                                        _context3.next = 5;
                                        return target();

                                    case 5:
                                        target = _context3.sent;

                                    case 6:
                                        if (!(target && typeof target == "object")) {
                                            _context3.next = 8;
                                            break;
                                        }

                                        return _context3.abrupt("return", target);

                                    case 8:
                                        if (!(typeof target != "string")) {
                                            _context3.next = 11;
                                            break;
                                        }

                                        _debug("Invalid target type '%s'. Failing back to '_self'.", typeof target);

                                        return _context3.abrupt("return", self);

                                    case 11:
                                        if (!(target == "_self")) {
                                            _context3.next = 13;
                                            break;
                                        }

                                        return _context3.abrupt("return", self);

                                    case 13:
                                        if (!(target == "_parent")) {
                                            _context3.next = 15;
                                            break;
                                        }

                                        return _context3.abrupt("return", parent);

                                    case 15:
                                        if (!(target == "_top")) {
                                            _context3.next = 17;
                                            break;
                                        }

                                        return _context3.abrupt("return", top);

                                    case 17:
                                        if (!(target == "_blank")) {
                                            _context3.next = 34;
                                            break;
                                        }

                                        targetWindow = null;
                                        _context3.prev = 19;
                                        targetWindow = window.open("", "SMARTAuthPopup");

                                        if (targetWindow) {
                                            _context3.next = 23;
                                            break;
                                        }

                                        throw new Error("Perhaps window.open was blocked");

                                    case 23:
                                        _context3.next = 28;
                                        break;

                                    case 25:
                                        _context3.prev = 25;
                                        _context3.t0 = _context3["catch"](19);
                                        error = _context3.t0;

                                    case 28:
                                        if (targetWindow) {
                                            _context3.next = 33;
                                            break;
                                        }

                                        _debug("Cannot open window. Failing back to '_self'. %s", error);

                                        return _context3.abrupt("return", self);

                                    case 33:
                                        return _context3.abrupt("return", targetWindow);

                                    case 34:
                                        if (!(target == "popup")) {
                                            _context3.next = 51;
                                            break;
                                        }

                                        _targetWindow = null; // if (!targetWindow || targetWindow.closed) {

                                        _context3.prev = 36;
                                        _targetWindow = window.open("", "SMARTAuthPopup", ["height=" + height, "width=" + width, "menubar=0", "resizable=1", "status=0", "top=" + (screen.height - height) / 2, "left=" + (screen.width - width) / 2].join(","));

                                        if (_targetWindow) {
                                            _context3.next = 40;
                                            break;
                                        }

                                        throw new Error("Perhaps the popup window was blocked");

                                    case 40:
                                        _context3.next = 45;
                                        break;

                                    case 42:
                                        _context3.prev = 42;
                                        _context3.t1 = _context3["catch"](36);
                                        _error = _context3.t1;

                                    case 45:
                                        if (_targetWindow) {
                                            _context3.next = 50;
                                            break;
                                        }

                                        _debug("Cannot open window. Failing back to '_self'. %s", _error);

                                        return _context3.abrupt("return", self);

                                    case 50:
                                        return _context3.abrupt("return", _targetWindow);

                                    case 51:
                                        // Frame or window by name
                                        winOrFrame = frames[target];

                                        if (!winOrFrame) {
                                            _context3.next = 54;
                                            break;
                                        }

                                        return _context3.abrupt("return", winOrFrame);

                                    case 54:
                                        _debug("Unknown target '%s'. Failing back to '_self'.", target);

                                        return _context3.abrupt("return", self);

                                    case 56:
                                    case "end":
                                        return _context3.stop();
                                }
                            }
                        }, _callee3, null, [[19, 25], [36, 42]]);
                    }));
                    return _getTargetWindow.apply(this, arguments);
                }

                exports.getTargetWindow = getTargetWindow;

                /***/
            }),

/***/ "./src/settings.ts":
/*!*************************!*\
  !*** ./src/settings.ts ***!
  \*************************/
/*! all exports used */
/***/ (function (module, exports, __webpack_require__) {

                "use strict";


                Object.defineProperty(exports, "__esModule", {
                    value: true
                });
                exports.SMART_KEY = exports.patientParams = exports.fhirVersions = exports.patientCompartment = void 0;
                /**
                 * Combined list of FHIR resource types accepting patient parameter in FHIR R2-R4
                 */

                exports.patientCompartment = ["Account", "AdverseEvent", "AllergyIntolerance", "Appointment", "AppointmentResponse", "AuditEvent", "Basic", "BodySite", "BodyStructure", "CarePlan", "CareTeam", "ChargeItem", "Claim", "ClaimResponse", "ClinicalImpression", "Communication", "CommunicationRequest", "Composition", "Condition", "Consent", "Coverage", "CoverageEligibilityRequest", "CoverageEligibilityResponse", "DetectedIssue", "DeviceRequest", "DeviceUseRequest", "DeviceUseStatement", "DiagnosticOrder", "DiagnosticReport", "DocumentManifest", "DocumentReference", "EligibilityRequest", "Encounter", "EnrollmentRequest", "EpisodeOfCare", "ExplanationOfBenefit", "FamilyMemberHistory", "Flag", "Goal", "Group", "ImagingManifest", "ImagingObjectSelection", "ImagingStudy", "Immunization", "ImmunizationEvaluation", "ImmunizationRecommendation", "Invoice", "List", "MeasureReport", "Media", "MedicationAdministration", "MedicationDispense", "MedicationOrder", "MedicationRequest", "MedicationStatement", "MolecularSequence", "NutritionOrder", "Observation", "Order", "Patient", "Person", "Procedure", "ProcedureRequest", "Provenance", "QuestionnaireResponse", "ReferralRequest", "RelatedPerson", "RequestGroup", "ResearchSubject", "RiskAssessment", "Schedule", "ServiceRequest", "Specimen", "SupplyDelivery", "SupplyRequest", "VisionPrescription"];
                /**
                 * Map of FHIR releases and their abstract version as number
                 */

                exports.fhirVersions = {
                    "0.4.0": 2,
                    "0.5.0": 2,
                    "1.0.0": 2,
                    "1.0.1": 2,
                    "1.0.2": 2,
                    "1.1.0": 3,
                    "1.4.0": 3,
                    "1.6.0": 3,
                    "1.8.0": 3,
                    "3.0.0": 3,
                    "3.0.1": 3,
                    "3.3.0": 4,
                    "3.5.0": 4,
                    "4.0.0": 4,
                    "4.0.1": 4
                };
                /**
                 * Combined (FHIR R2-R4) list of search parameters that can be used to scope
                 * a request by patient ID.
                 */

                exports.patientParams = ["patient", "subject", "requester", "member", "actor", "beneficiary"];
                /**
                 * The name of the sessionStorage entry that contains the current key
                 */

                exports.SMART_KEY = "SMART_KEY";

                /***/
            }),

/***/ "./src/smart.ts":
/*!**********************!*\
  !*** ./src/smart.ts ***!
  \**********************/
/*! all exports used */
/***/ (function (module, exports, __webpack_require__) {

                "use strict";


                var _interopRequireDefault = __webpack_require__(/*! @babel/runtime/helpers/interopRequireDefault */ "./node_modules/@babel/runtime/helpers/interopRequireDefault.js");

                __webpack_require__(/*! core-js/modules/es.array.filter */ "./node_modules/core-js/modules/es.array.filter.js");

                __webpack_require__(/*! core-js/modules/es.array.for-each */ "./node_modules/core-js/modules/es.array.for-each.js");

                __webpack_require__(/*! core-js/modules/es.array.iterator */ "./node_modules/core-js/modules/es.array.iterator.js");

                __webpack_require__(/*! core-js/modules/es.array.join */ "./node_modules/core-js/modules/es.array.join.js");

                __webpack_require__(/*! core-js/modules/es.array.map */ "./node_modules/core-js/modules/es.array.map.js");

                __webpack_require__(/*! core-js/modules/es.function.name */ "./node_modules/core-js/modules/es.function.name.js");

                __webpack_require__(/*! core-js/modules/es.object.assign */ "./node_modules/core-js/modules/es.object.assign.js");

                __webpack_require__(/*! core-js/modules/es.object.to-string */ "./node_modules/core-js/modules/es.object.to-string.js");

                __webpack_require__(/*! core-js/modules/es.promise */ "./node_modules/core-js/modules/es.promise.js");

                __webpack_require__(/*! core-js/modules/es.regexp.exec */ "./node_modules/core-js/modules/es.regexp.exec.js");

                __webpack_require__(/*! core-js/modules/es.string.iterator */ "./node_modules/core-js/modules/es.string.iterator.js");

                __webpack_require__(/*! core-js/modules/es.string.match */ "./node_modules/core-js/modules/es.string.match.js");

                __webpack_require__(/*! core-js/modules/es.string.replace */ "./node_modules/core-js/modules/es.string.replace.js");

                __webpack_require__(/*! core-js/modules/web.dom-collections.for-each */ "./node_modules/core-js/modules/web.dom-collections.for-each.js");

                __webpack_require__(/*! core-js/modules/web.dom-collections.iterator */ "./node_modules/core-js/modules/web.dom-collections.iterator.js");

                __webpack_require__(/*! core-js/modules/web.url */ "./node_modules/core-js/modules/web.url.js");

                var _regenerator = _interopRequireDefault(__webpack_require__(/*! @babel/runtime/regenerator */ "./node_modules/@babel/runtime/regenerator/index.js"));

                __webpack_require__(/*! regenerator-runtime/runtime */ "./node_modules/regenerator-runtime/runtime.js");

                var _asyncToGenerator2 = _interopRequireDefault(__webpack_require__(/*! @babel/runtime/helpers/asyncToGenerator */ "./node_modules/@babel/runtime/helpers/asyncToGenerator.js"));

                Object.defineProperty(exports, "__esModule", {
                    value: true
                });
                exports.init = exports.ready = exports.buildTokenRequest = exports.completeAuth = exports.onMessage = exports.isInPopUp = exports.isInFrame = exports.authorize = exports.getSecurityExtensions = exports.fetchWellKnownJson = exports.KEY = void 0;
                /* global window */

                var lib_1 = __webpack_require__(/*! ./lib */ "./src/lib.ts");

                var Client_1 = __webpack_require__(/*! ./Client */ "./src/Client.ts");

                var settings_1 = __webpack_require__(/*! ./settings */ "./src/settings.ts");

                Object.defineProperty(exports, "KEY", {
                    enumerable: true,
                    get: function get() {
                        return settings_1.SMART_KEY;
                    }
                });
                var debug = lib_1.debug.extend("oauth2");

                function isBrowser() {
                    return typeof window === "object";
                }
                /**
                 * Fetches the well-known json file from the given base URL.
                 * Note that the result is cached in memory (until the page is reloaded in the
                 * browser) because it might have to be re-used by the client
                 * @param baseUrl The base URL of the FHIR server
                 */


                function fetchWellKnownJson(baseUrl, requestOptions) {
                    if (baseUrl === void 0) {
                        baseUrl = "/";
                    }

                    var url = String(baseUrl).replace(/\/*$/, "/") + ".well-known/smart-configuration";
                    return lib_1.getAndCache(url, requestOptions).catch(function (ex) {
                        throw new Error("Failed to fetch the well-known json \"" + url + "\". " + ex.message);
                    });
                }

                exports.fetchWellKnownJson = fetchWellKnownJson;
                /**
                 * Fetch a "WellKnownJson" and extract the SMART endpoints from it
                 */

                function getSecurityExtensionsFromWellKnownJson(baseUrl, requestOptions) {
                    if (baseUrl === void 0) {
                        baseUrl = "/";
                    }

                    return fetchWellKnownJson(baseUrl, requestOptions).then(function (meta) {
                        if (!meta.authorization_endpoint || !meta.token_endpoint) {
                            throw new Error("Invalid wellKnownJson");
                        }

                        return {
                            registrationUri: meta.registration_endpoint || "",
                            authorizeUri: meta.authorization_endpoint,
                            tokenUri: meta.token_endpoint
                        };
                    });
                }
                /**
                 * Fetch a `CapabilityStatement` and extract the SMART endpoints from it
                 */


                function getSecurityExtensionsFromConformanceStatement(baseUrl, requestOptions) {
                    if (baseUrl === void 0) {
                        baseUrl = "/";
                    }

                    return lib_1.fetchConformanceStatement(baseUrl, requestOptions).then(function (meta) {
                        var nsUri = "http://fhir-registry.smarthealthit.org/StructureDefinition/oauth-uris";
                        var extensions = (lib_1.getPath(meta || {}, "rest.0.security.extension") || []).filter(function (e) {
                            return e.url === nsUri;
                        }).map(function (o) {
                            return o.extension;
                        })[0];
                        var out = {
                            registrationUri: "",
                            authorizeUri: "",
                            tokenUri: ""
                        };

                        if (extensions) {
                            extensions.forEach(function (ext) {
                                if (ext.url === "register") {
                                    out.registrationUri = ext.valueUri;
                                }

                                if (ext.url === "authorize") {
                                    out.authorizeUri = ext.valueUri;
                                }

                                if (ext.url === "token") {
                                    out.tokenUri = ext.valueUri;
                                }
                            });
                        }

                        return out;
                    });
                }
                /**
                 * This works similarly to `Promise.any()`. The tasks are objects containing a
                 * request promise and it's AbortController. Returns a promise that will be
                 * resolved with the return value of the first successful request, or rejected
                 * with an aggregate error if all tasks fail. Any requests, other than the first
                 * one that succeeds will be aborted.
                 */


                function any(tasks) {
                    var len = tasks.length;
                    var errors = [];
                    var resolved = false;
                    return new Promise(function (resolve, reject) {
                        function onSuccess(task, result) {
                            task.complete = true;

                            if (!resolved) {
                                resolved = true;
                                tasks.forEach(function (t) {
                                    if (!t.complete) {
                                        t.controller.abort();
                                    }
                                });
                                resolve(result);
                            }
                        }

                        function onError(error) {
                            if (errors.push(error) === len) {
                                reject(new Error(errors.map(function (e) {
                                    return e.message;
                                }).join("; ")));
                            }
                        }

                        tasks.forEach(function (t) {
                            t.promise.then(function (result) {
                                return onSuccess(t, result);
                            }, onError);
                        });
                    });
                }
                /**
                 * Given a FHIR server, returns an object with it's Oauth security endpoints
                 * that we are interested in. This will try to find the info in both the
                 * `CapabilityStatement` and the `.well-known/smart-configuration`. Whatever
                 * Arrives first will be used and the other request will be aborted.
                 * @param [baseUrl] Fhir server base URL
                 * @param [env] The Adapter
                 */


                function getSecurityExtensions(env, baseUrl) {
                    if (baseUrl === void 0) {
                        baseUrl = "/";
                    }

                    var AbortController = env.getAbortController();
                    var abortController1 = new AbortController();
                    var abortController2 = new AbortController();
                    return any([{
                        controller: abortController1,
                        promise: getSecurityExtensionsFromWellKnownJson(baseUrl, {
                            signal: abortController1.signal
                        })
                    }, {
                        controller: abortController2,
                        promise: getSecurityExtensionsFromConformanceStatement(baseUrl, {
                            signal: abortController2.signal
                        })
                    }]);
                }

                exports.getSecurityExtensions = getSecurityExtensions;
                /**
                 * Starts the SMART Launch Sequence.
                 * > **IMPORTANT**:
                 *   `authorize()` will end up redirecting you to the authorization server.
                 *    This means that you should not add anything to the returned promise chain.
                 *    Any code written directly after the authorize() call might not be executed
                 *    due to that redirect!
                 * @param env
                 * @param [params]
                 * @param [_noRedirect] If true, resolve with the redirect url without trying to redirect to it
                 */

                function authorize(_x, _x2, _x3) {
                    return _authorize.apply(this, arguments);
                }

                function _authorize() {
                    _authorize = (0, _asyncToGenerator2.default)( /*#__PURE__*/_regenerator.default.mark(function _callee(env, params, _noRedirect) {
                        var _params, redirect_uri, clientSecret, fakeTokenResponse, patientId, encounterId, client_id, target, width, height, _params2, iss, launch, fhirServiceUrl, redirectUri, _params2$scope, scope, clientId, completeInTarget, url, storage, serverUrl, inFrame, inPopUp, oldKey, stateKey, state, fullSessionStorageSupport, redirectUrl, extensions, redirectParams, win;

                        return _regenerator.default.wrap(function _callee$(_context) {
                            while (1) {
                                switch (_context.prev = _context.next) {
                                    case 0:
                                        if (params === void 0) {
                                            params = {};
                                        }

                                        if (_noRedirect === void 0) {
                                            _noRedirect = false;
                                        }

                                        // Obtain input
                                        _params = params, redirect_uri = _params.redirect_uri, clientSecret = _params.clientSecret, fakeTokenResponse = _params.fakeTokenResponse, patientId = _params.patientId, encounterId = _params.encounterId, client_id = _params.client_id, target = _params.target, width = _params.width, height = _params.height;
                                        _params2 = params, iss = _params2.iss, launch = _params2.launch, fhirServiceUrl = _params2.fhirServiceUrl, redirectUri = _params2.redirectUri, _params2$scope = _params2.scope, scope = _params2$scope === void 0 ? "" : _params2$scope, clientId = _params2.clientId, completeInTarget = _params2.completeInTarget;
                                        url = env.getUrl();
                                        storage = env.getStorage(); // For these three an url param takes precedence over inline option

                                        iss = url.searchParams.get("iss") || iss;
                                        fhirServiceUrl = url.searchParams.get("fhirServiceUrl") || fhirServiceUrl;
                                        launch = url.searchParams.get("launch") || launch;

                                        if (!clientId) {
                                            clientId = client_id;
                                        }

                                        if (!redirectUri) {
                                            redirectUri = redirect_uri;
                                        }

                                        if (!redirectUri) {
                                            redirectUri = env.relative(".");
                                        } else if (!redirectUri.match(/^https?\:\/\//)) {
                                            redirectUri = env.relative(redirectUri);
                                        }

                                        serverUrl = String(iss || fhirServiceUrl || ""); // Validate input

                                        if (serverUrl) {
                                            _context.next = 15;
                                            break;
                                        }

                                        throw new Error("No server url found. It must be specified as `iss` or as " + "`fhirServiceUrl` parameter");

                                    case 15:
                                        if (iss) {
                                            debug("Making %s launch...", launch ? "EHR" : "standalone");
                                        } // append launch scope if needed


                                        if (launch && !scope.match(/launch/)) {
                                            scope += " launch";
                                        }

                                        if (isBrowser()) {
                                            inFrame = isInFrame();
                                            inPopUp = isInPopUp();

                                            if ((inFrame || inPopUp) && completeInTarget !== true && completeInTarget !== false) {
                                                // completeInTarget will default to true if authorize is called from
                                                // within an iframe. This is to avoid issues when the entire app
                                                // happens to be rendered in an iframe (including in some EHRs),
                                                // even though that was not how the app developer's intention.
                                                completeInTarget = inFrame; // In this case we can't always make the best decision so ask devs
                                                // to be explicit in their configuration.

                                                console.warn('Your app is being authorized from within an iframe or popup ' + 'window. Please be explicit and provide a "completeInTarget" ' + 'option. Use "true" to complete the authorization in the ' + 'same window, or "false" to try to complete it in the parent ' + 'or the opener window. See http://docs.smarthealthit.org/client-js/api.html');
                                            }
                                        } // If `authorize` is called, make sure we clear any previous state (in case
                                        // this is a re-authorize)


                                        _context.next = 20;
                                        return storage.get(settings_1.SMART_KEY);

                                    case 20:
                                        oldKey = _context.sent;
                                        _context.next = 23;
                                        return storage.unset(oldKey);

                                    case 23:
                                        // create initial state
                                        stateKey = lib_1.randomString(16);
                                        state = {
                                            clientId: clientId,
                                            scope: scope,
                                            redirectUri: redirectUri,
                                            serverUrl: serverUrl,
                                            clientSecret: clientSecret,
                                            tokenResponse: {},
                                            key: stateKey,
                                            completeInTarget: completeInTarget
                                        };
                                        fullSessionStorageSupport = isBrowser() ? lib_1.getPath(env, "options.fullSessionStorageSupport") : true;

                                        if (!fullSessionStorageSupport) {
                                            _context.next = 29;
                                            break;
                                        }

                                        _context.next = 29;
                                        return storage.set(settings_1.SMART_KEY, stateKey);

                                    case 29:
                                        // fakeTokenResponse to override stuff (useful in development)
                                        if (fakeTokenResponse) {
                                            Object.assign(state.tokenResponse, fakeTokenResponse);
                                        } // Fixed patientId (useful in development)


                                        if (patientId) {
                                            Object.assign(state.tokenResponse, {
                                                patient: patientId
                                            });
                                        } // Fixed encounterId (useful in development)


                                        if (encounterId) {
                                            Object.assign(state.tokenResponse, {
                                                encounter: encounterId
                                            });
                                        }

                                        redirectUrl = redirectUri + "?state=" + encodeURIComponent(stateKey); // bypass oauth if fhirServiceUrl is used (but iss takes precedence)

                                        if (!(fhirServiceUrl && !iss)) {
                                            _context.next = 42;
                                            break;
                                        }

                                        debug("Making fake launch...");
                                        _context.next = 37;
                                        return storage.set(stateKey, state);

                                    case 37:
                                        if (!_noRedirect) {
                                            _context.next = 39;
                                            break;
                                        }

                                        return _context.abrupt("return", redirectUrl);

                                    case 39:
                                        _context.next = 41;
                                        return env.redirect(redirectUrl);

                                    case 41:
                                        return _context.abrupt("return", _context.sent);

                                    case 42:
                                        _context.next = 44;
                                        return getSecurityExtensions(env, serverUrl);

                                    case 44:
                                        extensions = _context.sent;
                                        Object.assign(state, extensions);
                                        _context.next = 48;
                                        return storage.set(stateKey, state);

                                    case 48:
                                        if (state.authorizeUri) {
                                            _context.next = 54;
                                            break;
                                        }

                                        if (!_noRedirect) {
                                            _context.next = 51;
                                            break;
                                        }

                                        return _context.abrupt("return", redirectUrl);

                                    case 51:
                                        _context.next = 53;
                                        return env.redirect(redirectUrl);

                                    case 53:
                                        return _context.abrupt("return", _context.sent);

                                    case 54:
                                        // build the redirect uri
                                        redirectParams = ["response_type=code", "client_id=" + encodeURIComponent(clientId || ""), "scope=" + encodeURIComponent(scope), "redirect_uri=" + encodeURIComponent(redirectUri), "aud=" + encodeURIComponent(serverUrl), "state=" + encodeURIComponent(stateKey)]; // also pass this in case of EHR launch

                                        if (launch) {
                                            redirectParams.push("launch=" + encodeURIComponent(launch));
                                        }

                                        redirectUrl = state.authorizeUri + "?" + redirectParams.join("&");

                                        if (!_noRedirect) {
                                            _context.next = 59;
                                            break;
                                        }

                                        return _context.abrupt("return", redirectUrl);

                                    case 59:
                                        if (!(target && isBrowser())) {
                                            _context.next = 68;
                                            break;
                                        }

                                        _context.next = 62;
                                        return lib_1.getTargetWindow(target, width, height);

                                    case 62:
                                        win = _context.sent;

                                        if (win !== self) {
                                            try {
                                                // Also remove any old state from the target window and then
                                                // transfer the current state there
                                                win.sessionStorage.removeItem(oldKey);
                                                win.sessionStorage.setItem(stateKey, JSON.stringify(state));
                                            } catch (ex) {
                                                lib_1.debug("Failed to modify window.sessionStorage. Perhaps it is from different origin?. Failing back to \"_self\". %s", ex);
                                                win = self;
                                            }
                                        }

                                        if (win !== self) {
                                            try {
                                                win.location.href = redirectUrl;
                                                self.addEventListener("message", onMessage);
                                            } catch (ex) {
                                                lib_1.debug("Failed to modify window.location. Perhaps it is from different origin?. Failing back to \"_self\". %s", ex);
                                                self.location.href = redirectUrl;
                                            }
                                        } else {
                                            self.location.href = redirectUrl;
                                        }

                                        return _context.abrupt("return");

                                    case 68:
                                        _context.next = 70;
                                        return env.redirect(redirectUrl);

                                    case 70:
                                        return _context.abrupt("return", _context.sent);

                                    case 71:
                                    case "end":
                                        return _context.stop();
                                }
                            }
                        }, _callee);
                    }));
                    return _authorize.apply(this, arguments);
                }

                exports.authorize = authorize;
                /**
                 * Checks if called within a frame. Only works in browsers!
                 * If the current window has a `parent` or `top` properties that refer to
                 * another window, returns true. If trying to access `top` or `parent` throws an
                 * error, returns true. Otherwise returns `false`.
                 */

                function isInFrame() {
                    try {
                        return self !== top && parent !== self;
                    } catch (e) {
                        return true;
                    }
                }

                exports.isInFrame = isInFrame;
                /**
                 * Checks if called within another window (popup or tab). Only works in browsers!
                 * To consider itself called in a new window, this function verifies that:
                 * 1. `self === top` (not in frame)
                 * 2. `!!opener && opener !== self` The window has an opener
                 * 3. `!!window.name` The window has a `name` set
                 */

                function isInPopUp() {
                    try {
                        return self === top && !!opener && opener !== self && !!window.name;
                    } catch (e) {
                        return false;
                    }
                }

                exports.isInPopUp = isInPopUp;
                /**
                 * Another window can send a "completeAuth" message to this one, making it to
                 * navigate to e.data.url
                 * @param e The message event
                 */

                function onMessage(e) {
                    if (e.data.type == "completeAuth" && e.origin === new URL(self.location.href).origin) {
                        window.removeEventListener("message", onMessage);
                        window.location.href = e.data.url;
                    }
                }

                exports.onMessage = onMessage;
                /**
                 * The completeAuth function should only be called on the page that represents
                 * the redirectUri. We typically land there after a redirect from the
                 * authorization server..
                 */

                function completeAuth(_x4) {
                    return _completeAuth.apply(this, arguments);
                }

                function _completeAuth() {
                    _completeAuth = (0, _asyncToGenerator2.default)( /*#__PURE__*/_regenerator.default.mark(function _callee2(env) {
                        var _a, _b, url, Storage, params, key, code, authError, authErrorDescription, state, fullSessionStorageSupport, inFrame, inPopUp, href, origin, hasState, authorized, requestOptions, tokenResponse, client;

                        return _regenerator.default.wrap(function _callee2$(_context2) {
                            while (1) {
                                switch (_context2.prev = _context2.next) {
                                    case 0:
                                        url = env.getUrl();
                                        Storage = env.getStorage();
                                        params = url.searchParams;
                                        key = params.get("state");
                                        code = params.get("code");
                                        authError = params.get("error");
                                        authErrorDescription = params.get("error_description");

                                        if (key) {
                                            _context2.next = 11;
                                            break;
                                        }

                                        _context2.next = 10;
                                        return Storage.get(settings_1.SMART_KEY);

                                    case 10:
                                        key = _context2.sent;

                                    case 11:
                                        if (!(authError || authErrorDescription)) {
                                            _context2.next = 13;
                                            break;
                                        }

                                        throw new Error([authError, authErrorDescription].filter(Boolean).join(": "));

                                    case 13:
                                        debug("key: %s, code: %s", key, code); // key might be coming from the page url so it might be empty or missing

                                        if (key) {
                                            _context2.next = 16;
                                            break;
                                        }

                                        throw new Error("No 'state' parameter found. Please (re)launch the app.");

                                    case 16:
                                        _context2.next = 18;
                                        return Storage.get(key);

                                    case 18:
                                        state = _context2.sent;
                                        fullSessionStorageSupport = isBrowser() ? lib_1.getPath(env, "options.fullSessionStorageSupport") : true; // If we are in a popup window or an iframe and the authorization is
                                        // complete, send the location back to our opener and exit.

                                        if (!(isBrowser() && state && !state.completeInTarget)) {
                                            _context2.next = 29;
                                            break;
                                        }

                                        inFrame = isInFrame();
                                        inPopUp = isInPopUp(); // we are about to return to the opener/parent where completeAuth will
                                        // be called again. In rare cases the opener or parent might also be
                                        // a frame or popup. Then inFrame or inPopUp will be true but we still
                                        // have to stop going up the chain. To guard against that weird form of
                                        // recursion we pass one additional parameter to the url which we later
                                        // remove.

                                        if (!((inFrame || inPopUp) && !url.searchParams.get("complete"))) {
                                            _context2.next = 29;
                                            break;
                                        }

                                        url.searchParams.set("complete", "1");
                                        href = url.href, origin = url.origin;

                                        if (inFrame) {
                                            parent.postMessage({
                                                type: "completeAuth",
                                                url: href
                                            }, origin);
                                        }

                                        if (inPopUp) {
                                            opener.postMessage({
                                                type: "completeAuth",
                                                url: href
                                            }, origin);
                                            window.close();
                                        }

                                        return _context2.abrupt("return", new Promise(function () { }));

                                    case 29:
                                        url.searchParams.delete("complete"); // Do we have to remove the `code` and `state` params from the URL?

                                        hasState = params.has("state");

                                        if (isBrowser() && lib_1.getPath(env, "options.replaceBrowserHistory") && (code || hasState)) {
                                            // `code` is the flag that tell us to request an access token.
                                            // We have to remove it, otherwise the page will authorize on
                                            // every load!
                                            if (code) {
                                                params.delete("code");
                                                debug("Removed code parameter from the url.");
                                            } // If we have `fullSessionStorageSupport` it means we no longer
                                            // need the `state` key. It will be stored to a well know
                                            // location - sessionStorage[SMART_KEY]. However, no
                                            // fullSessionStorageSupport means that this "well know location"
                                            // might be shared between windows and tabs. In this case we
                                            // MUST keep the `state` url parameter.


                                            if (hasState && fullSessionStorageSupport) {
                                                params.delete("state");
                                                debug("Removed state parameter from the url.");
                                            } // If the browser does not support the replaceState method for the
                                            // History Web API, the "code" parameter cannot be removed. As a
                                            // consequence, the page will (re)authorize on every load. The
                                            // workaround is to reload the page to new location without those
                                            // parameters. If that is not acceptable replaceBrowserHistory
                                            // should be set to false.


                                            if (window.history.replaceState) {
                                                window.history.replaceState({}, "", url.href);
                                            }
                                        } // If the state does not exist, it means the page has been loaded directly.


                                        if (state) {
                                            _context2.next = 34;
                                            break;
                                        }

                                        throw new Error("No state found! Please (re)launch the app.");

                                    case 34:
                                        // Assume the client has already completed a token exchange when
                                        // there is no code (but we have a state) or access token is found in state
                                        authorized = !code || ((_a = state.tokenResponse) === null || _a === void 0 ? void 0 : _a.access_token); // If we are authorized already, then this is just a reload.
                                        // Otherwise, we have to complete the code flow

                                        if (!(!authorized && state.tokenUri)) {
                                            _context2.next = 54;
                                            break;
                                        }

                                        if (code) {
                                            _context2.next = 38;
                                            break;
                                        }

                                        throw new Error("'code' url parameter is required");

                                    case 38:
                                        debug("Preparing to exchange the code for access token...");
                                        requestOptions = buildTokenRequest(env, code, state);
                                        debug("Token request options: %O", requestOptions); // The EHR authorization server SHALL return a JSON structure that
                                        // includes an access token or a message indicating that the
                                        // authorization request has been denied.

                                        _context2.next = 43;
                                        return lib_1.request(state.tokenUri, requestOptions);

                                    case 43:
                                        tokenResponse = _context2.sent;
                                        debug("Token response: %O", tokenResponse);

                                        if (tokenResponse.access_token) {
                                            _context2.next = 47;
                                            break;
                                        }

                                        throw new Error("Failed to obtain access token.");

                                    case 47:
                                        // Now we need to determine when is this authorization going to expire
                                        state.expiresAt = lib_1.getAccessTokenExpiration(tokenResponse, env); // save the tokenResponse so that we don't have to re-authorize on
                                        // every page reload

                                        state = Object.assign({}, state, {
                                            tokenResponse: tokenResponse
                                        });
                                        _context2.next = 51;
                                        return Storage.set(key, state);

                                    case 51:
                                        debug("Authorization successful!");
                                        _context2.next = 55;
                                        break;

                                    case 54:
                                        debug(((_b = state.tokenResponse) === null || _b === void 0 ? void 0 : _b.access_token) ? "Already authorized" : "No authorization needed");

                                    case 55:
                                        if (!fullSessionStorageSupport) {
                                            _context2.next = 58;
                                            break;
                                        }

                                        _context2.next = 58;
                                        return Storage.set(settings_1.SMART_KEY, key);

                                    case 58:
                                        client = new Client_1.default(env, state);
                                        debug("Created client instance: %O", client);
                                        return _context2.abrupt("return", client);

                                    case 61:
                                    case "end":
                                        return _context2.stop();
                                }
                            }
                        }, _callee2);
                    }));
                    return _completeAuth.apply(this, arguments);
                }

                exports.completeAuth = completeAuth;
                /**
                 * Builds the token request options. Does not make the request, just
                 * creates it's configuration and returns it in a Promise.
                 */

                function buildTokenRequest(env, code, state) {
                    var redirectUri = state.redirectUri,
                        clientSecret = state.clientSecret,
                        tokenUri = state.tokenUri,
                        clientId = state.clientId;

                    if (!redirectUri) {
                        throw new Error("Missing state.redirectUri");
                    }

                    if (!tokenUri) {
                        throw new Error("Missing state.tokenUri");
                    }

                    if (!clientId) {
                        throw new Error("Missing state.clientId");
                    }

                    var requestOptions = {
                        method: "POST",
                        headers: {
                            "content-type": "application/x-www-form-urlencoded"
                        },
                        body: "code=" + code + "&grant_type=authorization_code&redirect_uri=" + encodeURIComponent(redirectUri)
                    }; // For public apps, authentication is not possible (and thus not required),
                    // since a client with no secret cannot prove its identity when it issues a
                    // call. (The end-to-end system can still be secure because the client comes
                    // from a known, https protected endpoint specified and enforced by the
                    // redirect uri.) For confidential apps, an Authorization header using HTTP
                    // Basic authentication is required, where the username is the app’s
                    // client_id and the password is the app’s client_secret (see example).

                    if (clientSecret) {
                        requestOptions.headers.Authorization = "Basic " + env.btoa(clientId + ":" + clientSecret);
                        debug("Using state.clientSecret to construct the authorization header: %s", requestOptions.headers.Authorization);
                    } else {
                        debug("No clientSecret found in state. Adding the clientId to the POST body");
                        requestOptions.body += "&client_id=" + encodeURIComponent(clientId);
                    }

                    return requestOptions;
                }

                exports.buildTokenRequest = buildTokenRequest;
                /**
                 * @param env
                 * @param [onSuccess]
                 * @param [onError]
                 */

                function ready(_x5, _x6, _x7) {
                    return _ready.apply(this, arguments);
                }

                function _ready() {
                    _ready = (0, _asyncToGenerator2.default)( /*#__PURE__*/_regenerator.default.mark(function _callee3(env, onSuccess, onError) {
                        var task;
                        return _regenerator.default.wrap(function _callee3$(_context3) {
                            while (1) {
                                switch (_context3.prev = _context3.next) {
                                    case 0:
                                        task = completeAuth(env);

                                        if (onSuccess) {
                                            task = task.then(onSuccess);
                                        }

                                        if (onError) {
                                            task = task.catch(onError);
                                        }

                                        return _context3.abrupt("return", task);

                                    case 4:
                                    case "end":
                                        return _context3.stop();
                                }
                            }
                        }, _callee3);
                    }));
                    return _ready.apply(this, arguments);
                }

                exports.ready = ready;
                /**
                 * This function can be used when you want to handle everything in one page
                 * (no launch endpoint needed). You can think of it as if it does:
                 * ```js
                 * authorize(options).then(ready)
                 * ```
                 *
                 * **Be careful with init()!** There are some details you need to be aware of:
                 *
                 * 1. It will only work if your launch_uri is the same as your redirect_uri.
                 *    While this should be valid, we can’t promise that every EHR will allow you
                 *    to register client with such settings.
                 * 2. Internally, `init()` will be called twice. First it will redirect to the
                 *    EHR, then the EHR will redirect back to the page where init() will be
                 *    called again to complete the authorization. This is generally fine,
                 *    because the returned promise will only be resolved once, after the second
                 *    execution, but please also consider the following:
                 *    - You should wrap all your app’s code in a function that is only executed
                 *      after `init()` resolves!
                 *    - Since the page will be loaded twice, you must be careful if your code
                 *      has global side effects that can persist between page reloads
                 *      (for example writing to localStorage).
                 * 3. For standalone launch, only use init in combination with offline_access
                 *    scope. Once the access_token expires, if you don’t have a refresh_token
                 *    there is no way to re-authorize properly. We detect that and delete the
                 *    expired access token, but it still means that the user will have to
                 *    refresh the page twice to re-authorize.
                 * @param env The adapter
                 * @param options The authorize options
                 */

                function init(_x8, _x9) {
                    return _init.apply(this, arguments);
                }

                function _init() {
                    _init = (0, _asyncToGenerator2.default)( /*#__PURE__*/_regenerator.default.mark(function _callee4(env, options) {
                        var url, code, state, storage, key, cached;
                        return _regenerator.default.wrap(function _callee4$(_context4) {
                            while (1) {
                                switch (_context4.prev = _context4.next) {
                                    case 0:
                                        url = env.getUrl();
                                        code = url.searchParams.get("code");
                                        state = url.searchParams.get("state"); // if `code` and `state` params are present we need to complete the auth flow

                                        if (!(code && state)) {
                                            _context4.next = 5;
                                            break;
                                        }

                                        return _context4.abrupt("return", completeAuth(env));

                                    case 5:
                                        // Check for existing client state. If state is found, it means a client
                                        // instance have already been created in this session and we should try to
                                        // "revive" it.
                                        storage = env.getStorage();
                                        _context4.t0 = state;

                                        if (_context4.t0) {
                                            _context4.next = 11;
                                            break;
                                        }

                                        _context4.next = 10;
                                        return storage.get(settings_1.SMART_KEY);

                                    case 10:
                                        _context4.t0 = _context4.sent;

                                    case 11:
                                        key = _context4.t0;
                                        _context4.next = 14;
                                        return storage.get(key);

                                    case 14:
                                        cached = _context4.sent;

                                        if (!cached) {
                                            _context4.next = 17;
                                            break;
                                        }

                                        return _context4.abrupt("return", new Client_1.default(env, cached));

                                    case 17:
                                        return _context4.abrupt("return", authorize(env, options).then(function () {
                                            // `init` promises a Client but that cannot happen in this case. The
                                            // browser will be redirected (unload the page and be redirected back
                                            // to it later and the same init function will be called again). On
                                            // success, authorize will resolve with the redirect url but we don't
                                            // want to return that from this promise chain because it is not a
                                            // Client instance. At the same time, if authorize fails, we do want to
                                            // pass the error to those waiting for a client instance.
                                            return new Promise(function () { });
                                        }));

                                    case 18:
                                    case "end":
                                        return _context4.stop();
                                }
                            }
                        }, _callee4);
                    }));
                    return _init.apply(this, arguments);
                }

                exports.init = init;

                /***/
            }),

/***/ "./src/storage/BrowserStorage.ts":
/*!***************************************!*\
  !*** ./src/storage/BrowserStorage.ts ***!
  \***************************************/
/*! all exports used */
/***/ (function (module, exports, __webpack_require__) {

                "use strict";


                var _interopRequireDefault = __webpack_require__(/*! @babel/runtime/helpers/interopRequireDefault */ "./node_modules/@babel/runtime/helpers/interopRequireDefault.js");

                var _regenerator = _interopRequireDefault(__webpack_require__(/*! @babel/runtime/regenerator */ "./node_modules/@babel/runtime/regenerator/index.js"));

                __webpack_require__(/*! regenerator-runtime/runtime */ "./node_modules/regenerator-runtime/runtime.js");

                var _asyncToGenerator2 = _interopRequireDefault(__webpack_require__(/*! @babel/runtime/helpers/asyncToGenerator */ "./node_modules/@babel/runtime/helpers/asyncToGenerator.js"));

                Object.defineProperty(exports, "__esModule", {
                    value: true
                });

                var Storage = /*#__PURE__*/function () {
                    function Storage() { }

                    var _proto = Storage.prototype;

                    /**
                     * Gets the value at `key`. Returns a promise that will be resolved
                     * with that value (or undefined for missing keys).
                     */
                    _proto.get =
                        /*#__PURE__*/
                        function () {
                            var _get = (0, _asyncToGenerator2.default)( /*#__PURE__*/_regenerator.default.mark(function _callee(key) {
                                var value;
                                return _regenerator.default.wrap(function _callee$(_context) {
                                    while (1) {
                                        switch (_context.prev = _context.next) {
                                            case 0:
                                                value = sessionStorage[key];

                                                if (!value) {
                                                    _context.next = 3;
                                                    break;
                                                }

                                                return _context.abrupt("return", JSON.parse(value));

                                            case 3:
                                                return _context.abrupt("return", null);

                                            case 4:
                                            case "end":
                                                return _context.stop();
                                        }
                                    }
                                }, _callee);
                            }));

                            function get(_x) {
                                return _get.apply(this, arguments);
                            }

                            return get;
                        }()
                        /**
                         * Sets the `value` on `key` and returns a promise that will be resolved
                         * with the value that was set.
                         */
                        ;

                    _proto.set =
                        /*#__PURE__*/
                        function () {
                            var _set = (0, _asyncToGenerator2.default)( /*#__PURE__*/_regenerator.default.mark(function _callee2(key, value) {
                                return _regenerator.default.wrap(function _callee2$(_context2) {
                                    while (1) {
                                        switch (_context2.prev = _context2.next) {
                                            case 0:
                                                sessionStorage[key] = JSON.stringify(value);
                                                return _context2.abrupt("return", value);

                                            case 2:
                                            case "end":
                                                return _context2.stop();
                                        }
                                    }
                                }, _callee2);
                            }));

                            function set(_x2, _x3) {
                                return _set.apply(this, arguments);
                            }

                            return set;
                        }()
                        /**
                         * Deletes the value at `key`. Returns a promise that will be resolved
                         * with true if the key was deleted or with false if it was not (eg. if
                         * did not exist).
                         */
                        ;

                    _proto.unset =
                        /*#__PURE__*/
                        function () {
                            var _unset = (0, _asyncToGenerator2.default)( /*#__PURE__*/_regenerator.default.mark(function _callee3(key) {
                                return _regenerator.default.wrap(function _callee3$(_context3) {
                                    while (1) {
                                        switch (_context3.prev = _context3.next) {
                                            case 0:
                                                if (!(key in sessionStorage)) {
                                                    _context3.next = 3;
                                                    break;
                                                }

                                                delete sessionStorage[key];
                                                return _context3.abrupt("return", true);

                                            case 3:
                                                return _context3.abrupt("return", false);

                                            case 4:
                                            case "end":
                                                return _context3.stop();
                                        }
                                    }
                                }, _callee3);
                            }));

                            function unset(_x4) {
                                return _unset.apply(this, arguments);
                            }

                            return unset;
                        }();

                    return Storage;
                }();

                exports.default = Storage;

                /***/
            }),

/***/ "./src/strings.ts":
/*!************************!*\
  !*** ./src/strings.ts ***!
  \************************/
/*! all exports used */
/***/ (function (module, exports, __webpack_require__) {

                "use strict";


                Object.defineProperty(exports, "__esModule", {
                    value: true
                }); // This map contains reusable debug messages (only those used in multiple places)

                exports.default = {
                    expired: "Session expired! Please re-launch the app",
                    noScopeForId: "Trying to get the ID of the selected %s. Please add 'launch' or 'launch/%s' to the requested scopes and try again.",
                    noIfNoAuth: "You are trying to get %s but the app is not authorized yet.",
                    noFreeContext: "Please don't use open fhir servers if you need to access launch context items like the %S."
                };

                /***/
            })

        /******/
    });
//# sourceMappingURL=fhir-client.js.map
